{"数据集函数":[{"title":"ds.avg()","date":"","content":"    函数说明：<br />        从数据集中，从满足条件的记录中，算出给定字段或表达式的平均值<br />        <br />    语法：<br />        datasetName.avg(selectExp{,filterExp{,rootGroupExp{,containNull}}})<br />        <br />    参数说明：<br />        selectExp        需要计算平均值的字段或表达式，数值类型<br />        filterExp        过滤条件表达式<br />        rootGroupExp  是否root数据集表达式<br /> containNull  是否对null元素进行计数<br />        <br />    返回值：<br />        实数<br />        <br />    举例：<br />        例1：ds1.avg(score,sex==\"1\")<br />                表示从数据集的当前记录行集中过滤出sex为\"1\"的记录集合，<br />                求得其score字段的平均值，score字段要求为数值型。<br />                <br />        例2：ds2.avg(quantity*price)<br />                表示对数据集的当前记录行集求得表达式quantity*price的平均值<br /><br /> 例2：ds1.avg(score,,,false)<br />  求得数据集的当前记录行集中score字段的平均值，如果某条记录的score字段值为空<br />  则此条记录不计入记录数，score字段要求为数值型","desc":"从数据集中，从满足条件的记录中，算出给定字段或表达式的平均值"},{"title":"ds.colCount()","date":"","content":"    函数说明：<br />        获得数据集的列数<br />        <br />    语法：<br />        datasetName.colcount()<br />        <br />    返回值：<br />        整数<br />    <br />    举例：<br />        例1：ds1.colcount()    获得ds1数据集的列数，整数类型","desc":"获得数据集的列数"},{"title":"ds.count()","date":"","content":"    函数说明：<br />        计算数据集当前记录行集中，满足条件的记录数<br />        <br />    语法：<br />        datasetName.count({filterExp{,rootGroupExp{,nullCheckExp}}})<br />        <br /><br />    参数说明：<br />        filterExp        条件表达式，如果全部选出，则不要此参数，<br />        rootGroupExp     是否root数据集表达式<br /> nullCheckExp  检查某一条记录是否为空的标达式<br /><br />    返回值：<br />        整数<br />        <br />    举例：<br />        例1：ds1.count()<br />                表示对ds1中当前记录行集中所有记录进行计数，返回记录数。<br />                <br />        例2：ds1.count(true)<br />                含义同上，但是运算速度比ds1.count()慢，因此当记录全部选出时，<br />                建议不要true<br />                <br />        例3：ds1.count(quantity>500)<br />                表示从ds1当前记录行集中选出quantity>500的记录进行计数，<br />                返回记录数。<br /><br /> 例4：ds1.count(,,ID)<br />  表示当前记录行集中ID不为空的纪录数目","desc":"计算数据集当前记录行集中，满足条件的记录数"},{"title":"ds.field()","date":"","content":"    函数说明：<br />        获得数据集当前行或者当前组中第一行中，指定列的数据<br />        <br />    语法：<br />        datasetName.field( stringExp )<br />        datasetName.field( #colNo )<br />        <br />    参数说明：<br />        stringExp    数据集列名的表达式<br />        #colNo        数据集列号的表式方式，如第二列用#2，行号列用#0<br />        <br />    返回值：<br />        数据集的列对象，只能作为表达式的元素使用，不能作为最终单元格的值<br />        <br />    说明：<br />        此函数性能比较低，请慎用<br />        <br />    举例：<br />        例1：在报表中写入如下表达式<br />                             A               B<br />                      ┌─────────┬────────────┐<br />                    1 │                  │ = to(1,ds2.colcount()) │<br />                      │                  ├────────────┤<br />                    2 │                  │  = ds2.fieldname(b1)   │<br />                      ├─────────┼────────────┤<br />                    3 │ = ds2.Select(#0) │    = ds2.field(b2)     │<br />                      └─────────┴────────────┘<br />                该报表相当于在B1中根据数据集ds2的列数进行横向扩展，在A3中根据<br />                数据集的行数进行纵向扩展，然后在B2和B3中动态获取列名和列对象，<br />                算出列值，这种用法可以实现动态列报表<br />                <br />                该报表的预览结果如下：<br /><br />        ┌───────┬───────┬───────┬───────┐<br />        │   客户编码   │   客户名称   │     电话     │     传真     │<br />        ├───────┼───────┼───────┼───────┤<br />        │      1       │无锡食品加工厂│   3454356    │   4575775    │<br />        ├───────┼───────┼───────┼───────┤<br />        │      2       │天津长城化工厂│   3452346    │   4562674    │<br />        ├───────┼───────┼───────┼───────┤<br />        │      3       │江苏天龙食品集│   4576546    │   7465675    │<br />        ├───────┼───────┼───────┼───────┤<br />        │      4       │中国化工原料厂│   4563456    │   5675763    │<br />        └───────┴───────┴───────┴───────┘<br />","desc":"获得数据集当前行或者当前组中第一行中，指定列的数据"},{"title":"ds.fieldName()","date":"","content":"    函数说明：<br />        根据列号取数据集的列名<br />        <br />    语法：<br />        datasetName.fieldName( intExp )<br />        <br />    参数说明：<br />        <br />        intExp        数据集列号的表达式<br />        <br />    返回值：<br />        字符型<br />        <br />    举例：<br />        例1：ds1.fieldName(3)    返回\"score\"，<br />                    表示数据集ds1中第三列的列名为\"score\"<br />        <br />        例2：运用举例,在报表中写入如下表达式<br />                             A                B<br />                      ┌─────────┬────────────┐<br />                    1 │                  │ = to(1,ds2.colcount()) │<br />                      │                  ├────────────┤<br />                    2 │                  │  = ds2.fieldname(b2)   │<br />                      ├─────────┼────────────┤<br />                    3 │ = ds2.Select(#0) │    = ds2.field(b2)     │<br />                      └─────────┴────────────┘<br />                该报表相当于在B1中根据数据集ds2的列数进行横向扩展，在A3中根据<br />                数据集的行数进行纵向扩展，然后在B2和B3中动态获取列名和列对象，<br />                算出列值，这种用法可以实现动态列报表<br />                <br />                该报表的预览结果如下：<br /><br />        ┌───────┬───────┬───────┬───────┐<br />        │   客户编码   │   客户名称   │     电话     │     传真     │<br />        ├───────┼───────┼───────┼───────┤<br />        │      1       │无锡食品加工厂│   3454356    │   4575775    │<br />        ├───────┼───────┼───────┼───────┤<br />        │      2       │天津长城化工厂│   3452346    │   4562674    │<br />        ├───────┼───────┼───────┼───────┤<br />        │      3       │江苏天龙食品集│   4576546    │   7465675    │<br />        ├───────┼───────┼───────┼───────┤<br />        │      4       │中国化工原料厂│   4563456    │   5675763    │<br />        └───────┴───────┴───────┴───────┘<br /><br />        ","desc":"根据列号取数据集的列名"},{"title":"ds.first()","date":"","content":"    函数说明：<br />        从数据集满足条件的记录集合中，选出第一条记录，<br />        返回给定字段或表达式的值<br />        <br />    语法：<br />        datasetName.first(selectExp{,descExp{,filterExp{,sortExp{,rootGroupExp}}}})<br />        <br />    参数说明：<br />        selectExp        要选择的字段列，可以是字段列名/列号，也可以是表达式。<br />                                列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />                                <br />        descExp        排序的顺序，true代表逆序，false代表顺序<br />        filterExp    过滤条件表达式<br />        sortExp        排序依据表达式<br />        rootGroupExp    是否root数据集表达式<br />        <br />    返回值：<br />        数据类型不定，由selectExp的计算结果决定<br />        <br />    举例：<br />        例1：ds1.first(name,true,score>90,id)<br />                从ds1数据集中选出成绩大于90的记录，按照id逆序排列，<br />                返回第一条记录的name字段值<br />                <br />        例2：ds1.first(name,true,,score)<br />                    对ds1数据集的所有记录按照成绩逆序排列，然后返回第一条记录的name字段值<br />                <br />        例3：ds1.first(name)    返回数据集ds1中第一条记录的name字段值","desc":"从数据集满足条件的记录集合中，选出第一条记录，返回给定字段或表达式的值"},{"title":"ds.group()","date":"","content":"    函数说明：<br />        根据分组表达式，从数据集中选出一组组集。<br />        <br />    语法：<br />        datasetName.group( <selectExp>, , <filterExp> )<br />        //适用于不需要排序或数据集中已排好序<br />        <br />        datasetName.group(selectExp{,descExp{,filterExp{,sortExp{,groupSortExp{,groupDescExp{,rootGroupExp}}}}}})<br /><br />    参数说明：<br />        selectExp        选出的分组表达式，可以是字段列名/列号，也可以是表达式。<br />                        列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />                                    <br />        descExp            分组前记录的排序顺序，true为逆序，false为顺序<br />        filterExp        过滤表达式<br />        sortExp            分组前记录的排序依据表达式<br />        groupSortExp        分组后对组的排序表达式，一般是汇总运算的表达式，如组合计等<br />        groupDescExp        组排序顺序，true为逆序，false为顺序<br />        rootGroupExp        是否root数据集表达式<br /><br />    返回值：<br />        一组数据的集合，数据类型由selectExp的运算结果来决定<br /><br />    示例：<br />        例1：ds1.group(class)<br />                把数据集ds1中所有记录按照class字段进行分组，<br />                并返回每组的class值组成的集合<br />        <br />        例2：ds1.group(class, true )<br />                把数据集ds1中所有记录按照class字段降序排列，然后根据class进行分组，<br />                并返回每组的class值组成的集合<br />        <br />        例3：ds1.group(class,false,sex=='1')<br />                从数据源ds1中选取性别为\"1\"的记录，按照class字段升序排列，<br />                然后根据class进行分组，并返回每组的class值组成的集合<br />        <br />        例4：ds1.group(class, true, sex=='1', id )<br />                从数据源ds1中选取性别为\"1\"的记录，按照id字段降序排列，<br />                然后根据class进行分组，并返回每组的class值组成的集合<br />                <br />        例5：ds1.group(省份,true,,,sum(工业产值),true)<br />                对数据集ds1按照省份进行分组，分组后求出每组的sum(工业产值)，<br />                然后按照这个汇总值对组进行逆序排列","desc":"根据分组表达式，从数据集中选出一组组集。"},{"title":"ds.isfield()","date":"","content":"    函数说明：<br />        判断数据集中是否有该列名<br />        <br />    语法：<br />        datasetName.isfield( stringExp )<br />        <br />    参数说明：<br />        stringExp        待判断的列名表达式<br />        <br />    返回值：<br />        布尔型<br />        <br />    举例：<br />        例1：ds1.isfield(\"score\")    返回true，表示ds1中含有score这个列名","desc":"判断数据集中是否有该列名"},{"title":"ds.last()","date":"","content":"    函数说明：<br />        从数据集满足条件的记录集合中，选出最后一条记录，返回给定字段或表达式的值<br />        <br />    语法：<br />        datasetName.last(selectExp{,descExp{,filterExp{,sortExp{,rootGroupExp}}}})<br />        <br />    参数说明：<br />        selectExp        要选择的字段列，可以是字段列名/列号，也可以是表达式。<br />                                列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />                                <br />        descExp            排序的顺序，true代表逆序，false代表顺序<br />        filterExp        过滤条件表达式<br />        sortExp            排序依据表达式<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        数据集中最后一条记录指定字段的值，数据类型由selectExp的运算结果决定<br />        <br />    示例：<br />        例1：ds1.last(name,true,,score)<br />                将ds1数据集的记录按成绩逆序排列，并返回最后一条记录的name字段值<br />                <br />        <br />    ","desc":"从数据集满足条件的记录集合中，选出最后一条记录，返回给定字段或表达式的值"},{"title":"ds.max()","date":"","content":"    函数说明：<br />        从数据集中，从满足条件的记录中，选出给定字段或表达式的最大值<br />        <br />    语法：<br />        datasetName.max(selectExp{,filterExp{,rootGroupExp}})<br />        <br />    参数说明：<br />        selectExp        需要获得最大值的字段或表达式<br />                        如果用列号，列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />                                <br />        filterExp        过滤表达式<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        集合中的最大值，数据类型不定，由selectExp的运算结果决定<br />        <br />    示例：<br />        例1：ds1.max(score)        获得数据集ds1中的score最大值<br />        <br />        例2：ds1.max(score,sex==\"1\")    获得数据集ds1中sex=\"1\"的记录中score最大值<br />    ","desc":"从数据集中，从满足条件的记录中，选出给定字段或表达式的最大值"},{"title":"ds.min()","date":"","content":"    函数说明：<br />        从数据集中，从满足条件的记录中，选出给定字段或表达式的最小值<br />        <br />    语法：<br />        datasetName.min(selectExp{,filterExp{,rootGroupExp}})<br />        <br />    参数说明：<br />        selectExp        需要获得最小值的字段或表达式<br />                        如果用列号，列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />                                <br />        filterExp        过滤表达式<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        集合中的最大值，数据类型不定，由selectExp的运算结果决定<br />        <br />    示例：<br />        例1：ds1.min(score)        获得数据集ds1中的score最小值<br />        <br />        例2：ds1.min(score,sex==\"1\")    获得数据集ds1中sex=\"1\"的记录中score最小值","desc":"从数据集中，从满足条件的记录中，选出给定字段或表达式的最小值"},{"title":"ds.plot()","date":"","content":"    函数说明：<br />        根据数据值段进行分组，俗称“按段分组”<br />        <br />    语法：<br />        datasetName.plot( valueExp, listExp{, filterExp{, eqExp{, ascExp{,rootGroupExp}}}} )<br />        <br />    参数说明：<br />        valueExp        用于分组的值表达式<br />        ListExp            数据值段列表，同valueExp数据类型相同的数组，要求其中元素从小到大排列<br />        filterExp        过滤表达式<br />        eqExp            返回布尔值的表达式，缺省为false，表示与元素比较时不包含等于<br />        ascExp            返回布尔值的表达式，缺省为true，表示listExp返回的数组按从小到大排，否则为从大到小排<br />        rootGroupExp        是否root数据集表达式<br />        <br />    特别说明：<br />        ascExp为true(即listExp从小到大排列)时，eqExp为true时，与元素比较时采用<=，eqExp为false时，采用<;<br />        ascExp为false(即listExp从大到小排列)时，eqExp为true时，与元素比较时采用>=，eqExp为false时，采用><br />        <br />    返回值：<br />        整数组，代表记录按值段分组后组的顺序，如list(0,1,2,3)代表第一组，第二组，第三组，第四组<br />        因此，定义完单元格数据值表达式后还需要定义显示值表达式，比如第一组代表不及格，第二组代表及格等等<br />        <br />    示例：<br />        例1：ds1.plot(成绩,list(60，80，90),,true,false)    返回值为list(0,1,2,3)<br />                对数据集ds1的记录按成绩段进行分组，60分以下、60-80，80-90，90分以上等四组<br />                同时定义显示值表达式为：map(list(0,1,2,3),list(不及格,及格,良好,优秀))<br />                <br />        例2：ds1.plot(成绩,arg1,,true,false)    其中arg1为整数组，其值为list(60,70,80,90)<br />                显示值表达式为：map(to(0,count(arg1)),arg2)，其中arg2为字符串组，<br />                其值为{\"不及格\",\"及格\",\"中\",\"良好\",\"优秀\"}<br />                本例通过参数动态控制分组值段以及结果组的显示值<br />    ","desc":"根据数据值段进行分组，俗称“按段分组”"},{"title":"ds.select()","date":"","content":"    函数说明：<br />        从数据集的当前行集中选取符合条件的记录<br />    语法：<br />        datasetName.select( <select_exp>{, desc_exp{, filter_exp{, sort_exp{,rootGroupExp}}}} )<br />        <br />        datasetName.select( <select_exp>, , <filter_exp> )//适用于不需排序或数据集中已排好序            <br /><br />    参数说明：<br />        select_exp：    要选择的字段列名/列号，，也可以是表达式。<br />                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />        desc_exp:    指定数据排序的顺序，true表示降序排列，false表示升序排列。<br />        filter_exp:    数据过滤表达式，如果全部选出，则此参数省略，仅用“,”占位。<br />        sort_exp:    数据排序表达式。当此项为空时先检查desc_exp是否为空，如果为空，<br />                    则不排序，否则使用select_exp排序。<br />        rootGroupExp    是否root数据集表达式<br />                                <br />    返回值：<br />        一组数据的集合，数据类型由select_exp的运算结果决定<br />        <br />    函数示例：<br />        例1：ds1.select( name )<br />                从数据源ds1中选取name字段列的所有值，不排序<br /><br />        例2：ds1.select( #2, true )<br />                从数据源ds1中选取第二个字段列的所有值并降序排列<br /><br />        例3：ds1.select( name,false,sex=='1')<br />                从数据源ds1中选取性别为男性('1')的name字段列的值并升序排列<br /><br />        例4：ds1.select( name, true, sex=='1', id )<br />                从数据源ds1中选取性别为男性的name字段列的值并按id字段降序排列","desc":"从数据集的当前行集中选取符合条件的记录"},{"title":"ds.select1()","date":"","content":"    函数说明：<br />        从数据集中按顺序检索到符合过滤条件的第一条记录，返回其selectExp值<br />        <br />    语法：<br />        datasetName.select1(selectExp{,filterExp{,rootGroupExp}})<br />        <br />    参数说明：<br />        selectExp        要选择的字段列名/列号，，也可以是表达式。<br />                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />        filterExp        过滤条件<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        数据类型不定，由selectExp的运算结果决定<br />        <br />    特别说明：<br />        当对数据集运用过滤条件后确定只剩一条记录时，虽然select<br />        的运算结果一样，但是select1运算效率高，因为他只要找到符合条件的记录，<br />        就不继续检索了，而select要检索完所有的记录才返回。<br />        <br />    示例：<br />        例1：ds1.select1(name)<br />                返回数据集ds1中第一条记录的name字段值<br />                <br />        例2：ds1.select1(name,score>90)<br />                从数据集ds1中检索出成绩大于90的记录，返回第一条记录的name字段值<br />                ","desc":"从数据集中按顺序检索到符合过滤条件的第一条记录，返回其selectExp值"},{"title":"ds.sum()","date":"","content":"    函数说明：<br />        从数据集当前记录行集中检索出符合条件的记录集合，算出给定字段或表达式的汇总值<br />        <br />    语法：<br />        datasetName.sum(selectExp{,filterExp{,rootGroupExp}})<br />        <br />    参数说明：<br />        selectExp        需求和的字段或表达式<br />        filterExp        条件表达式<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        实数<br />        <br />    示例：<br />        例1：ds1.sum(quantity)    求得数据集ds1当前行集中quantity字段的汇总值<br />        <br />        例2：ds1.sum(quantity,productid==\"1\")<br />                    从数据集ds1当前行集中检索出productid=\"1\"的记录集，求得其quantity字段的汇总值","desc":"从数据集当前记录行集中检索出符合条件的记录集合，算出给定字段或表达式的汇总值"},{"title":"ds.top()","date":"","content":"    函数说明：<br />        从数据集中符合条件的记录中选取头num条并返回<br />        <br />    语法：<br />        datasetName.top( <select_exp>,<num_exp>{, desc_exp{, filter_exp{,sort_exp{,rootGroupExp}}}} )<br />    <br />    参数说明：<br />        select_exp：要选择的字段列，可以是字段列名/列号，也可以是表达式。<br />                                列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />        num_exp        要取得记录个数表达式，该字段计算的最终结果为整型<br />        desc_exp    指定数据排序的顺序，true表示降序排列，false表示升序排列。<br />        filter_exp    数据过滤表达式。<br />        sort_exp    排序表达式。<br />        rootGroupExp    是否root数据集表达式<br />    <br />    返回值：<br />        一组数据的集合，数据类型由select_exp的运算结果决定<br />        <br />    示例：<br />        例1：ds1.top(name,10)    返回数据集ds1中头十条记录的name字段值<br />        <br />        例2：ds1.top(name,10,true,,score)<br />                    将数据集记录按成绩降序排列，返回头十条记录的name字段值<br />        ","desc":"从数据集中符合条件的记录中选取头num条并返回"},{"title":"ds.filter()","date":"","content":"    函数说明：<br />        从数据集中按顺序检索到符合过滤条件的所有记录，返回纪录的组，注意该函数不能返回具体值，函数只能用在附加数据集中<br />        <br />    语法：<br />        datasetName.filter(filterExp{,rootGroupExp})<br />        <br />    参数说明：<br />        filterExp        过滤条件<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        返回行<br />        <br />    示例：<br />        例1：ds1.filter(name==\"1\")<br />                返回数据集ds1中记录的name字段是\"1\"的所有行<br />                <br />        例2：ds.filter(score>90)<br />                从数据集ds1中检索出成绩大于90的记录","desc":"从数据集中按顺序检索到符合过滤条件的所有记录，返回纪录的组，注意该函数不能返回具体值，函数只能用在附加数据集中"},{"title":"ds.filter1()","date":"","content":"    函数说明：<br />        从数据集中按顺序检索到符合过滤条件的第一条记录，返回该行，注意该函数不能返回具体值，函数只能用在附加数据集中<br />        <br />    语法：<br />        datasetName.filter1(filterExp{,rootGroupExp})<br />        <br />    参数说明：<br />        filterExp        过滤条件<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        返回行<br />        <br />    特别说明：<br />        当对数据集运用过滤条件后确定只剩一条记录时，虽然filter<br />        的运算结果一样，但是filter1运算效率高，因为他只要找到符合条件的记录，<br />        就不继续检索了，而filter要检索完所有的记录才返回。<br />        <br />    示例：<br />        例1：ds1.filter1(name==\"1\")<br />                返回数据集ds1中第一条记录的name字段是\"1\"的行<br />                <br />        例2：ds1.filter1(score>90)<br />                从数据集ds1中检索出成绩大于90的记录","desc":"从数据集中按顺序检索到符合过滤条件的第一条记录，返回该行，注意该函数不能返回具体值，函数只能用在附加数据集中"},{"title":"ds.filterCross()","date":"","content":"    函数说明：<br />        从数据集中按顺序检索到符合过滤条件的所有记录，返回纪录的组，注意该函数不能返回具体值，函数只能用在附加数据集中<br />        <br />    语法：<br />        datasetName.filterCross(filterExp{,rootGroupExp})<br />        <br />    参数说明：<br />        filterExp        过滤条件<br />        rootGroupExp        是否root数据集表达式<br />        <br />    返回值：<br />        返回行<br />        <br />    示例：<br />        例1：ds1.filterCross(name==\"1\")<br />                返回数据集ds1中记录的name字段是\"1\"的所有行<br />                <br />        例2：ds.filterCross(score>90)<br />                从数据集ds1中检索出成绩大于90的记录<br />        本函数与filter函数的唯一区别是：filter是拿当前行或者组的第一行与ds进行过滤，<br />                                                                    而本函数则是拿当前的行或者组与ds进行过滤.<br />        当过滤条件里用到的列是当前分组，或者列表中指定的列时,这两个函数运算的结果是相同的,这个时候要用filter.<br />        建议尽量少用这个函数,因为当数据量大时,本函数的运算速度极其慢.<br />        ","desc":"从数据集中按顺序检索到符合过滤条件的所有记录，返回纪录的组，注意该函数不能返回具体值，函数只能用在附加数据集中"},{"title":"ds.dselect()","date":"","content":"    函数说明：<br />        从数据集的当前行集中选取符合条件的记录,选出字段相同的行将会只保留第一行<br />    语法：<br />        datasetName.dselect( <select_exp>{, filter_exp{,rootGroupExp}} )        <br /><br />    参数说明：<br />        select_exp    要选择的字段列名/列号，，也可以是表达式。<br />                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />        filter_exp    数据过滤表达式，如果全部选出，则此参数省略，仅用“,”占位。<br />        rootGroupExp    是否root数据集表达式<br />                                <br />    返回值：<br />        一组数据的集合，数据类型由select_exp的运算结果决定<br />        <br />    函数示例：<br />        例1：ds1.dselect( name )<br />                从数据源ds1中选取name字段列的所有值，name相同的纪录只会保留第一个","desc":"从数据集的当前行集中选取符合条件的记录,选出字段相同的行将会只保留第一行"},{"title":"ds.dcount()","date":"","content":"    函数说明：<br />        计算数据集当前记录行集中，满足条件的记录数,选出字段记录的行将被视为同一个记录<br />        <br />    语法：<br />        datasetName.dcount(<select_exp>{filterExp,{rootGroupExp}})<br />        <br /><br />    参数说明：<br />        select_exp    要选择的字段列名/列号，，也可以是表达式。<br />                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />        filterExp    条件表达式，如果全部选出，则不要此参数，<br />        rootGroupExp    是否root数据集表达式<br /><br />    返回值：<br />        整数<br />        <br />    举例：<br />        例1：ds1.dcount( name )<br />                从数据源ds1中选取name字段列的所有值，name相同的纪录被视为同一纪律","desc":"计算数据集当前记录行集中，满足条件的记录数,选出字段记录的行将被视为同一个记录"},{"title":"ds.selectEx()","date":"","content":"    函数说明：<br />        从数据集的当前行集中选取符合条件的记录<br />    语法：<br />        datasetName.selectEx( <select_exp>{filter_exp{, \"sort_exp1, desc_exp1{;sort_exp2, desc_exp2{;...}}\"{,rootGroupExp}}} )        <br /><br />    参数说明：<br />        select_exp    要选择的字段列名/列号，，也可以是表达式。<br />                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />        filter_exp    数据过滤表达式，如果全部选出，则此参数省略，仅用\",\"占位。<br />        sort_exp1    数据排序表达式。按desc_exp1排序。<br />        desc_exp1    指定数据排序的顺序，true表示降序排列，false表示升序排列。<br />        sort_exp2    数据排序表达式。将sort_exp1相同的字段，按desc_exp2排序。<br />        desc_exp2    指定数据排序的顺序，true表示降序排列，false表示升序排列。<br />        ......<br />        rootGroupExp    是否root数据集表达式<br />                                <br />    返回值：<br />        一组数据的集合，数据类型由select_exp的运算结果决定<br />        <br />    函数示例：<br />        <br />        例1：ds1.selectEx( name,sex=='1',\"name;grade,true\")<br />                从数据源ds1中选取性别为男性('1')的name字段列的值并升序排列,然后把姓名相同的按grade降序排列<br />        ","desc":"从数据集的当前行集中选取符合条件的记录"},{"title":"ds.groupEx()","date":"","content":"    函数说明：<br />        根据分组表达式，从数据集中选出一组组集。<br />        <br />    语法：<br />        <br />        datasetName.groupEx(selectExp{,filterExp{, \"sort_exp1, desc_exp1{;sort_exp2, desc_exp2{;...}}\"{,groupSortExp{<br />            ,groupDescExp{,rootGroupExp}}}}})<br /><br />    参数说明：<br />        selectExp    选出的分组表达式，可以是字段列名/列号，也可以是表达式。<br />                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推<br />        filterExp    过滤表达式<br />        sort_exp1    数据排序表达式。按desc_exp1排序。<br />        desc_exp1    指定数据排序的顺序，true表示降序排列，false表示升序排列。<br />        sort_exp2    数据排序表达式。将sort_exp1相同的字段，按desc_exp2排序。<br />        desc_exp2    指定数据排序的顺序，true表示降序排列，false表示升序排列。<br />        ......<br />        groupSortExp    分组后对组的排序表达式，一般是汇总运算的表达式，如组合计等<br />        groupDescExp    组排序顺序，true为逆序，false为顺序<br />        rootGroupExp    是否root数据集表达式<br /><br />    返回值：<br />        一组数据的集合，数据类型由selectExp的运算结果来决定<br /><br />    示例：<br />          例1：ds1.groupEx(sex,,\"grade,true;name\")<br />                从数据源ds1中选取grade字段列的值并降序排列,然后把name相同的按成绩升序排列，然后按sex字段分组<br />        ","desc":"根据分组表达式，从数据集中选出一组组集。"},{"title":"ds.bselect1()","date":"","content":"    函数说明：<br />        此函数功能等同select1()，但是算法不同，采用二分法，适用于数据集记录<br />        已经按照参考字段排好序的情况，运算速度比select1()快<br />        <br />    语法：<br />        datasetName.bselect_one(selectExp,\"referExp1,referDescExp1,referValueExp1<br />            {,referExp2,referDescExp2,referValueExp2{....}}}\"{,rootGroupExp})<br /><br />        datasetName.bselect1(selectExp,\"referExp1,referDescExp1,referValueExp1\")<br /><br />    参数说明：<br />        selectExp    选出字段或表达式<br />        referExp1    参考字段表达式<br />        referDescExp1    参考字段表达式的数据顺序，true表示降序排列，false表示升序排列<br />        referValueExp1    参考字段的值表达式，一旦找到参考字段和该值相同的记录，即返回selectExp的值<br />        ......        参考字段及其值可以多个，如果是多个，则找到多个参考字段都和值匹配的记录才返回<br />        rootGroupExp    是否root数据集表达式<br /><br />    返回值：<br />        数据类型不定，由selectExp的运算结果决定<br /><br />    示例：<br />        例1：ds1.bselect1(name,\"id,false,value()\")<br />            采用二分法，找到数据集ds1中id和当前格的值相等的记录，返回其name字段值<br /><br />        例2：ds1.bselect1(name,\"id,false,value();class,false,A1;sex,true,B1\")<br />            采用二分法，找到数据集ds1中id和当前格的值相等、class和A1相等<br />        且sex和B1相等的记录，返回其name字段值。注意这三个条件在表达式中的顺序<br />        必需和它们在数据集中的排序先后相同，也就是说，在数据集中是先对id升序排<br />        序，再对class升序排序，最后对sex进行降序排序的。","desc":"此函数功能等同select1()，但是算法不同，采用二分法，适用于数据集记录已经按照参考字段排好序的情况，运算速度比select1()快"},{"title":"ds.enumGroup()","date":"","content":"    函数说明：<br />        根据表达式的不同计算结果，返回不同的值,然后按这些值进行分组。本函数:从左到右计算，先出现的表达式先算，如果出现满足的表达式，<br />        则返回相应的结果，后面的不再计算。如果没有一个表达式满足条件,而且有缺省值表达式，则返回缺省值，否则返回null。<br />    语法：<br />    ds.enumGroup({hasNullGroup{,termExp1,resultExp1{,term2,resultExp2{,...{,defaultExp}}}}})<br />    参数说明：<br /> hasNullGroup     布尔表达式，true返回空组，false不返回空组<br />        termExp(n)          条件表达式<br />        resultExp(n)        返回结果表达式<br />        defaultExp          缺省值表达式，如果所有表达式结果都不满足，则返回本表达式计算结果","desc":"根据表达式的不同计算结果，返回不同的值,然后按这些值进行分组。本函数:从左到右计算，先出现的表达式先算，如果出现满足的表达式，则返回相应的结果，后面的不再计算。如果没有一个表达式满足条件,而且有缺省值表达式，则返回缺省值，否则返回null。"},{"title":"ds.overlap","date":"","content":"    函数说明：<br />        对每一条记录依次计算条件表达式，如果满足则把该条记录加入到相应的组里。如果有多个组满足，则这些组中都会<br />        含有此条记录。如果都不满足并且有缺省值表达式，则把该条记录加入到缺醒组中。组值为以改组的第一条记录计算<br />        结果表达式所得到的值。<br />    语法：<br />        ds.overlap({hasNullGroup{,termExp1,resultExp1{,term2,resultExp2{,...{,defaultExp}}}}})<br />    参数说明：<br />        hasNullGroup        布尔表达式，true返回空组，false不返回空组<br />        termExp(n)          条件表达式<br />        resultExp(n)        返回结果表达式<br />        defaultExp          缺省值表达式，如果所有表达式结果都不满足，则返回本表达式计算结果","desc":"对每一条记录依次计算条件表达式，如果满足则把该条记录加入到相应的组里。如果有多个组满足，则这些组中都会含有此条记录。如果都不满足并且有缺省值表达式，则把该条记录加入到缺醒组中。组值为以改组的第一条记录计算结果表达式所得到的值。"}],"单元格函数":[{"title":"avg()","date":"","content":"    函数说明：<br />        对可扩展单元格或集合表达式求平均值<br />        <br />    语法：<br />        avg(expression{,containNull})<br />        average(expression{,containNull})<br /><br />    参数说明：<br />        expression 需要求平均值的单元格或表达式，一般为可扩展单元格或集合表达式<br /> containNull 是否对null元素进行计数<br />        <br />    返回值：<br />        实数<br />        <br />    示例：<br />        例1：avg(A1:B10) 求得A1至B10之间单元格的平均值，注意是以当前格为基格计算A1和B10<br />        <br />        例2：avg(arg1)  其中arg1是整数组，表示求得arg1中所有数据的平均值<br />        <br />        例3：avg(B1{})  表示求得当前主格扩展区域内所有扩展后的B1单元格的平均值<br />        <br />        例4：avg(B1{`0}{}) 表示求得根坐标下所有扩展后的B1单元格的平均值<br /><br /> 例5：avg(list(2,4,null),false)返回3，如果containNull为true或缺省则返回2<br />        ","desc":"对可扩展单元格或集合表达式求平均值"},{"title":"call()","date":"","content":"    函数说明：<br />        执行存储过程，返回结果数据集合，只能返回单列数据，如果存储过程返回多个字段，则返回第一个字段的结果值<br />        <br />    语法：<br />        call(sqlStatement{,arg1{,arg2{,arg3{,……}}}})<br />        <br />    参数说明：<br />        sqlStatement        合法的调用存储过程的sql语句<br />        arg(n)                    sql语句的参数，可以是常数也可以是表达式,<br />                                        如果是输出结果集的参数，对应的参数表达式写成\"@@result\"<br />                    <br />    返回值：<br />        一组数据的集合，由结果集的第一个字段决定数据类型，如果结果集是多列，只返回第一列<br />        <br />    示例：<br />        例1：call(\"{call ResultSet (?,?,?)}\",\"@@result\",\"000001\",A2)<br />                表示执行存储过程ResultSet，第一个输出参数输出结果集，第二、三个<br />                参数传入\"000001\",A2作为参数值<br />                    ","desc":"执行存储过程，返回结果数据集合，只能返回单列数据，如果存储过程返回多个字段，则返回第一个字段的结果值"},{"title":"call2()","date":"","content":"    函数说明：<br />        除第一个参数为数据源连接外，其他参数可call()函数相同，功能也和call()<br />        函数相同，通过第一个参数，可以实现不同的单元格连接不同的数据源。<br />        <br />    语法：<br />        call(dbName,sqlStatement{,arg1{,arg2{,arg3{,……}}}})<br />        <br />    参数说明：<br />        dbName        数据源名称<br />        sqlStatement    合法的调用存储过程的sql语句<br />        arg(n)        sql语句的参数，可以是常数也可以是表达式,<br />                    如果是输出结果集的参数，对应的参数表达式写成\"@@result\"<br />    返回值：<br />        一组数据的集合，由结果集的第一个字段决定数据类型，如果结果集是多列，只返回第一列<br />        <br />    示例：<br />        例1：call2(\"demo\",\"{call ResultSet (?,?,?)}\",\"@@result\",\"000001\",A2)<br />                表示对数据源demo执行存储过程ResultSet，第一个输出参数输出结果集，<br />                第二、三个参数传入\"000001\",A2作为参数值","desc":"除第一个参数为数据源连接外，其他参数可call()函数相同，功能也和call()函数相同，通过第一个参数，可以实现不同的单元格连接不同的数据源。"},{"title":"if()","date":"","content":"    函数说明：<br />        根据布尔表达式的不同计算结果，返回不同的值。本函数从左到右计算，先出现的<br />        布尔表达式先算，如果出现为true的表达式，则返回相应的结果，后面的不再计算。<br />        如果没有一个布尔表达式为true,而且有缺省值表达式，则返回缺省值，否则返回null。<br />        <br />    语法：<br />        if(boolExp1,valueExp1{,boolExp2,valueExp2 {,boolExp3,valueExp3 {, {defaultExp}}}})<br />    <br />    参数说明：<br />        boolExp(n)        布尔表达式，如果结果为真，则返回对应的值表达式计算结果<br />        valueExp(n)        值表达式，和布尔表达式一一对应<br />        defaultExp        缺省值表达式，如果所有布尔表达式结果都为假，则返回本表达式计算结果<br />        <br />    返回值：<br />        数据类型不定，由valueExp(n)的运算结果决定。<br />        <br />    示例：<br />        例1：if(value()>100,-65536,value()<=100 and value()>80,-16776961,-14336 )<br />                表示当前格的值大于100时，返回-65536颜色值，当前格的值小于等于100且<br />                大于80时，返回-16776961颜色值，否则返回-14336颜色值","desc":"根据布尔表达式的不同计算结果，返回不同的值。本函数从左到右计算，先出现的布尔表达式先算，如果出现为true的表达式，则返回相应的结果，后面的不再计算。如果没有一个布尔表达式为true,而且有缺省值表达式，则返回缺省值，否则返回null。"},{"title":"col()","date":"","content":"    函数说明：<br />        取得当前单元格所在列的列号<br />        <br />    语法：<br />        col({cellExp})<br />        <br />    参数说明：<br />        cellExp        单元格表达式(不写表示当前单元格)<br />    返回值：<br />        整数<br />        <br />    举例：<br />        在B列单元格中写入=col()，返回值为2，如果B列存在横向扩展格，则列号依次改变。","desc":"取得当前单元格所在列的列号"},{"title":"count()","date":"","content":"    函数说明：<br />        对可扩展单元格或集合表达式进行计数<br />        <br />    语法：<br />        count(expression{,containNull})<br />        <br />    参数说明：<br />        expression    需要被计数的单元格或表达式，一般为可扩展单元格或集合表达式<br /> containNull   缺省为true，表示对null元素也进行计数；false则相反<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：count(A1:B10,false) 以当前格为基格计算A1和B10之间总共有几个单元格，如果单元格的值为空则不进行计数<br /><br /> 例2：count(A1[1]:B10[3])计算A1扩展出来的第一个格和B10扩展出来的第三个格之间总共有几个单元格<br />        <br />        例3：count(arg1) 其中arg1是参数组，统计arg1中有几个数据<br />        <br />        例4：count(B1{}) 表示求得当前主格扩展区域内所有扩展后的B1单元格的个数<br />        <br />        例5：count(B1{`0}{})    表示求得根坐标下所有扩展后的B1单元格的个数<br />        ","desc":"对可扩展单元格或集合表达式进行计数"},{"title":"disp()","date":"","content":"    函数说明：<br />        取单元格的显示值<br />        <br />    语法：<br />        disp( cell )<br />        <br />    参数说明：<br />        cell        单元格<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：if(disp(A1) like \"中国*\",true,false)<br />                表示如果A1单元格的显示值含有中国的字样，返回true，否则返回false。","desc":"取单元格的显示值"},{"title":"ds()","date":"","content":"    函数说明：<br />        按名称取得数据集对象，本函数用于动态改变表达式的数据集对象，用法很灵活，<br />        但是性能较低，须慎用。<br />        <br />    语法：<br />        ds( stringExp )<br />        <br />    参数说明：<br />        stringExp    数据集的名称<br />        <br />    返回值：<br />        数据集对象<br />        <br />    说明：<br />        本函数的返回值是表达式的一个元素，不能作为单元格的数据值，必须经过二次运算。<br />        <br />    示例：<br />        例1：ds(\"ds1\").select(#0)    表示取出ds1数据集中的记录行号集合","desc":"按名称取得数据集对象，本函数用于动态改变表达式的数据集对象，用法很灵活，但是性能较低，须慎用。"},{"title":"eval()","date":"","content":"    函数说明：<br />        动态解析并计算表达式<br />        <br />    语法：<br />        eval( StringExp )<br />        eval( StringExp, SubRptExp )<br />        eval( StringExp, DataSetExp )<br />        <br />    参数说明：<br />        StringExp    待计算的表达式串<br />        SubRptExp    嵌入式子报表对象，一般是含有子报表的单元格<br />        DataSetExp    数据集对象，一般是ds函数<br />    <br />    返回值：<br />        表达式的结果值，数据类型由表达式决定<br />        <br />    示例：<br />        例1：eval( \"1+5\" )    返回6<br />        <br />        例2：eval(\"B2+10\", A1)    其中A1为嵌入式子报表，表示计算A1子报表中的B2+10<br />        <br />        例3：eval(\"salary+100\", ds(\"ds1\"))    表示计算数据集ds1中salary加100<br />","desc":"动态解析并计算表达式"},{"title":"list()","date":"","content":"    函数说明：<br />        获得一个枚举的数据集合<br />        <br />    语法：<br />        list(valueExp1{,valueExp2{,valueExp3{,……}}})<br />        <br />    参数说明：<br />        valueExp(n)        可以是常数或表达式，也可以是集合表达式<br />        <br />    返回值：<br />        一组枚举数据的集合<br />        <br />    示例：<br />        例1：list(1,3,5,7,9)<br />        <br />        例2：list(\"abc\",\"def\",\"ghj\")<br />        <br />        例3：list(arg1,to(1,3),\"a\",\"b\",\"c\")    假设arg1是个整数组，其值为7,8,9，<br />                那么该表达式的结果值为{7,8,9,1,2,3,\"a\",\"b\",\"c\"}","desc":"获得一个枚举的数据集合"},{"title":"map()","date":"","content":"    函数说明：<br />        显示值对照表函数，从对照表中找出当前单元格对应值的显示值，没有则返回null<br />        <br />    语法：<br />        map(valueListExp, displayListExp)<br />        <br />    参数说明：<br />        valueListExp        真实值列表，可以是可扩展单元格或结果为集合列表的表达式<br />        displayListExp    显示值列表，可以是可扩展单元格或结果为集合列表的表达式<br />    <br />        真实值列表和显示值列表一一对应<br />        <br />    返回值：<br />        字符型，和当前格真实值对应的显示值<br />    <br />    示例：<br />        例1：map(to(1,3),list(\"男\",\"女\",\"不定\"))<br />        <br />        例2：map(arg1,arg2)    其中arg1为1,2,3组成的参数组，arg2为\"男\",\"女\",\"不定\"组成的字符串组<br />        <br />        例3：map(list(1,2,3),list(\"男\",\"女\",\"不定\"))","desc":"显示值对照表函数，从对照表中找出当前单元格对应值的显示值，没有则返回null"},{"title":"max()","date":"","content":"    函数说明：<br />        对可扩展单元格或集合表达式求最大值<br />        <br />    语法：<br />        max(expression)<br /> max(cellExp,exp)<br />        <br />    参数说明：<br />        expression    需要求最大值的单元格或表达式，一般为可扩展单元格或集合表达式<br /><br /> cellExp    单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp<br /> exp    表达式<br />        <br />    返回值：<br />        数据类型不定，由expression的计算结果决定<br />        <br />    示例：<br />        例1：max(A1:A10)    求出单元格A1至A10之间的最大值<br />        <br />        例2：max(arg1)        其中arg1是参数组，求出arg1中的最大值<br />        <br />        例3：max(B1{})        表示求得当前主格扩展区域内所有扩展后的B1单元格的最大值<br />        <br />        例4：max(B1{`0}{})    表示求得根坐标下所有扩展后的B1单元格的最大值<br /><br /> 例5：max(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的最大值","desc":"对可扩展单元格或集合表达式求最大值"},{"title":"maxwidth()","date":"","content":"    函数说明：<br />        求当前列中所有非合并格的显示串的最大字符长度<br />        （注意：ASCII码大于255的字符长度为2)<br />        <br />    语法：<br />        maxwidth()<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        一般用于列首格中，动态控制列宽<br />        <br />        例1：在列首格的单元格宽属性中写入8*maxwidth()，表示动态调整当前列宽为<br />                单元格显示值最大字符长度*8个像素","desc":"求当前列中所有非合并格的显示串的最大字符长度（注意：ASCII码大于255的字符长度为2)"},{"title":"min()","date":"","content":"    函数说明：<br />        对可扩展单元格或集合表达式求最小值<br />        <br />    语法：<br />        min(expression)<br /> min(cellExp,exp)<br />        <br />    参数说明：<br />        expression    需要求最小值的单元格或表达式，一般为可扩展单元格或集合表达式<br /><br /> cellExp    单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp<br /> exp    表达式<br />        <br />    返回值：<br />        数据类型不定，由expression的计算结果决定<br />        <br />    示例：<br />        例1：min(A1:A10)    求出单元格A1至A10之间的最小值<br />        <br />        例2：min(arg1)        其中arg1是参数组，求出arg1中的最小值<br />        <br />        例3：min(B1{})        表示求得当前主格扩展区域内所有扩展后的B1单元格的最小值<br />        <br />        例4：min(B1{`0}{})    表示求得根坐标下所有扩展后的B1单元格的最小值<br /><br /> 例5：min(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的最小值","desc":"对可扩展单元格或集合表达式求最小值"},{"title":"nvl()","date":"","content":"    函数说明：<br />        根据第一个表达式的值是否为空，若为空则返回指定值<br />        <br />    语法：<br />        nvl( valueExp1, valueExp2 )<br />        <br />    参数说明：<br />        valueExp1    需要计算的表达式，其结果不为空时返回其值<br />        valueExp2    需要计算的表达式，当valueExp1结果为空时返回此值<br />        <br />    返回值：<br />        valueExp1或valueExp2的结果值<br />        <br />    示例：<br />        例1：nvl(A1,\"\")        表示当A1为空时，返回空串，否则返回A1<br /><br />        例2：nvl(value(),0)    表示当当前格为空时返回0，否则返回当前格的值","desc":"根据第一个表达式的值是否为空，若为空则返回指定值"},{"title":"plot()","date":"","content":"    函数说明:<br />        计算一个值在一个完全划分中的位置<br />        <br />    语法：<br />        plot( valueExp, ListExp{, eqExp}{, ascExp} )<br />        <br />    参数说明：<br />        valueExp    返回值的表达式，值可以是字符串、数值、日期、时间等<br />        ListExp        返回同valueExp数据类型相同的数组，要求其中元素从小到大排列<br />        eqExp        返回布尔值的表达式，缺省为false，为false表示与ListExp元素比较时不包含等于<br />        ascExp        返回布尔值的表达式，缺省为true，即表示ListExp中元素从小到大排列，否则为从大到小排列<br />        <br />    示例:<br />        例1：plot( 0, list(0,10,100) )    返回1，第一个集合为<0，不包含0，第二个集合为>=0且<10，<br />                            所以0落在了第二个集合中，集合的编号从0开始起编，依次为0,1,2,3，所以结果为1<br />        例2：plot( 0, list(0,10,100),true,true)    返回0<br />        <br />        例3：plot( 10, list(0,10,100), false )    返回2<br />        <br />        例4：plot(10,list(100,10,0),true,false)    返回1<br />        <br />    详细说明：<br />        划分是指将一个集合划分成几个集合，如数组{0,10,100}在eqExp返回false的情况下<br />        将整数集或实数集划分成4个集合，依次分别是<0、<10(此集合中元素必定>=0)、<br />        <100(此集合中元素必定>=10)及其它(即>=100)；<br />        在eqExp返回true的情况下将整数集或实数集划分成4个集合，分别是<=0、<=10(且>0)、<br />        <=100(且>10)及其它(即>100);<br />        对于数组{100,10,0}，eqExp为false时也划分成4个集合，分别为>100,>10(且<=100),<br />        >0(且<=10)及其它(即<=0);<br />        eqExp为true时则为>=100,>=10(且<100),>=0(且<10)及其它(即<0)    ","desc":"br/>计算一个值在一个完全划分中的位置"},{"title":"query()","date":"","content":"    函数说明：<br />        执行sql语句，返回结果数据集合，只能返回单列数据，如果sql语句中有多个字段，<br />        则返回第一个字段的结果值<br />        <br />    语法：<br />        sql(sqlStatement{,arg1{,arg2{,arg3{,……}}}})<br />        query(sqlStatement{,arg1{,arg2{,arg3{,……}}}})<br />        <br />    参数说明：    <br />        sqlStatement        合法的sql语句<br />        arg(n)            sql语句的参数，可以是常数也可以是表达式<br />        <br />    返回值：<br />        一组数据的集合，数据类型由sql语句的第一个选出字段决定<br />        <br />    示例：<br />        例1：query(\"select name from employee where sex=?\",\"1\")<br />                表示从employee表中选出sex=\"1\"的记录，返回其name字段值<br />    ","desc":"执行sql语句，返回结果数据集合，只能返回单列数据，如果sql语句中有多个字段，则返回第一个字段的结果值"},{"title":"query2()","date":"","content":"    函数说明：<br />        执行sql语句，返回结果数据集合，只能返回单列数据，如果sql语句中有多个字段，<br />        则返回第一个字段的结果值。和query()函数的差别在于多了第一个参数，第一个参数<br />        用于制定数据源名称，通过他可以实现不同单元格从不同数据源获取数据<br />        <br />    语法：<br />        query2(dbname, sqlStatement{,arg1{,arg2{,arg3{,……}}}})<br />        <br />    参数说明：    <br />        dbname                数据库逻辑名，为null表示缺省数据库<br />        sqlStatement    合法的sql语句<br />        arg(n)                sql语句的参数，可以是常数也可以是表达式<br />        <br />    返回值：<br />        一组数据的集合，数据类型由sql语句的第一个选出字段决定<br />        <br />    示例：<br />        例1：query2(\"demo\",\"select name from employee where sex=?\",\"1\")<br />                表示从demo数据库的employee表中选出sex=\"1\"的记录，返回其name字段值","desc":"执行sql语句，返回结果数据集合，只能返回单列数据，如果sql语句中有多个字段，则返回第一个字段的结果值。和query()函数的差别在于多了第一个参数，第一个参数用于制定数据源名称，通过他可以实现不同单元格从不同数据源获取数据"},{"title":"rgb()","date":"","content":"    函数说明：<br />        将红、绿、蓝、透明度转换成颜色值<br />        <br />    语法：<br />        rgb( redIntExp, greenIntExp, blueIntExp{, alphaIntExp} )<br />        <br />    参数说明：<br />        redIntExp        0-255之间的整数表达式，表示红色<br />        greenIntExp        0-255之间的整数表达式，表示绿色<br />        blueIntExp        0-255之间的整数表达式，表示蓝色<br />        alphaIntExp        0-255之间的整数表达式，表示透明度，<br />                        0表示完全透明，255表示完全不透明，其他数值呈现不同程度的透明度<br />                        缺省值为255<br />                                    <br />    返回值：<br />        64位的长整数<br />        <br />    示例：<br />        例1：rgb(123,123,123)        返回：-8684677<br />        <br />        例2：rgb(123,123,123,123)    返回：2071690107<br />        <br />        例3：rgb(123,123,123,255)    返回：-8684677<br />        <br />        例4：rgb(123,123,123,0)        返回：8092539","desc":"将红、绿、蓝、透明度转换成颜色值"},{"title":"row()","date":"","content":"    函数说明：<br />        取得当前单元格所在行的行号<br />        <br />    语法：<br />        row({cellExp})<br />    参数说明:<br />        cellExp        单元格表达式(不写表示当前单元格)<br />    返回值：<br />        整数<br />        <br />    举例：<br />        在第三行单元格中写入=row()，返回值为3，如果第三行存在纵向扩展格，则行号依次改变。","desc":"取得当前单元格所在行的行号"},{"title":"sort()","date":"","content":"    函数说明：<br />        对数组进行排序<br />        <br />    语法：<br />        sort( arrayExp{, boolExp} )<br />        <br />    参数说明:<br />        arrayExp    数组表达式，譬如group，select，list等函数<br />        boolExp        布尔表达式，true表示对数组按升序排列，否则降序    <br />        <br />    返回值：<br />        数组，元素数据类型由参数1决定<br />        <br />    示例：<br />        例1：sort({5,2,3,4},true)    返回值为{2,3,4,5}<br />        <br />        例2：sort({5,2,3,4})        返回值为{5,4,3,2}","desc":"对数组进行排序"},{"title":"sum()","date":"","content":"    函数说明：<br />        对可扩展单元格或集合表达式进行求和<br />        <br />    语法：<br />        sum(expression)<br /> sum(cellExp,exp)<br />        <br />    参数说明：<br />        expression        需要被求和的单元格或表达式，一般为可扩展单元格或集合表达式<br /><br /> cellExp    单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp<br /> exp    表达式<br />        <br />    返回值：<br />        实数或者字符型，由被汇总的单元格数据类型决定<br />        <br />    示例：<br />        例1：sum(A1:A10)      求出单元格A1至A10的合计值，被统计单元格可以是数值型也可以是字符型<br />        <br />        例2：sum(arg1)        其中arg1是参数组，求出arg1中所有元素的合计值<br />        <br />        例3：sum(B1{})        表示求得当前主格扩展区域内所有扩展后的B1单元格的合计值<br />        <br />        例4：sum(B1[`0]{})    表示求得根坐标下所有扩展后的B1单元格的合计值<br /><br /> 例5：sum(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的合计值","desc":"对可扩展单元格或集合表达式进行求和"},{"title":"valueat()","date":"","content":"    函数说明：<br />        根据指定位置返回数组或者集合表达式中的某一个元素<br />        <br />    语法：<br />        valueat(arrayexp，suffixExp)<br />        <br />    参数说明：<br />        arrayexp    数组或者集合表达式<br />        suffixExp    整数，用于指定返回集合中的第几个元素，以0开始计数<br />        <br />    返回值：<br />        集合中的一个元素，数据类型由集合中的元素类型决定<br />        <br />    示例：<br />        例1：valueat(to(5,8),2)        返回值为：7<br />        <br />        例2：valueat({\"a\",\"b\",\"c\"},0)    返回值为：\"a\"","desc":"根据指定位置返回数组或者集合表达式中的某一个元素"},{"title":"value()","date":"","content":"    函数说明：<br />        取得当前单元格的值<br />        <br />    语法：<br />        value()<br />        <br />    返回值：<br />        当前单元格的值","desc":"取得当前单元格的值"},{"title":"to()","date":"","content":"    函数说明：<br />        生成一组连续的整数数据<br />    语法：<br />        to(startExp,endExp{,stepExp})<br />    参数说明：<br />        startExp    整数数据开始的表达式<br />        endExp      整数数据结束的表达式 <br />        stepExp   整数数据步长的表达式<br />    函数示例：<br />        to(1,5)=list(1,2,3,4,5)<br />        to(1,5,2)=list(1,3,5)<br />        to(-5,-10,-2)=list(-5,-7,-9)<br />        to(-10,-8)=list(-10,-9,-8)","desc":"生成一组连续的整数数据"},{"title":"cell()","date":"","content":"    函数说明：<br />        在平面内取单元格，注意这里的单元格是运算后的单元格<br />    语法：<br />        cell({cellExp}{,rowOffsetExp{,colOffsetExp}})<br />    参数说明：<br />        cellExp             单元格表达式(不写表示当前单元格)<br />        rowOffsetExp        整数的相对cellExp的行偏移量表达式<br />        colOffsetExp        整数的相对cellExp的列偏移量表达式<br />    函数示例：<br />        cell(,1,-5) 取得当前单元格的下一行，左边5列的单元格<br />        cell(C1) 取得与当前单元格的偏移为“当前单元格的源格与C1的偏移”的格<br />        cell(D1,1,3) 取得D1的下一行，右3列的单元格<br />","desc":"在平面内取单元格，注意这里的单元格是运算后的单元格"},{"title":"inputValue()","date":"","content":"    函数说明：<br />        取得表达式的填报值<br />    语法：<br />        inputValue(Exp)<br />    参数说明：<br />        Exp        表达式<br />    返回值：<br />        该表达式对应的填报值。<br />    ","desc":"取得表达式的填报值"},{"title":"case()","date":"","content":"    函数说明：<br />        根据表达式的不同计算结果，返回不同的值。本函数:从左到右计算，先出现的表达式先算，如果出现满足的表达式，<br />        则返回相应的结果，后面的不再计算。如果没有一个表达式满足条件,而且有缺省值表达式，则返回缺省值，否则返回null。<br />    语法：<br />    case(Exp{,list(valueExp11,valueExp12,...),resultExp1{,list(valueExp21,valueExp22,...),resultExp2{,...{,defaultExp}}}})<br />    参数说明：<br />        Exp            判断用到的表达式<br />        valueExp(n)        值表达式<br />        resultExp(n)        返回结果表达式<br />        defaultExp        缺省值表达式，如果所有表达式结果都不满足，则返回本表达式计算结果<br />    函数示例:<br />        case(\"上海\",list(\"北京\",\"天津\"),\"1\",list(\"武汉\",\"上海\"),\"2\")    运算结果为：\"2\"<br />        case(\"上海\",list(\"北京\",\"天津\"),\"1\",list(\"武汉\"),\"2\",\"3\")    运算结果为：\"3\"<br />        case(\"上海\",list(\"北京\",\"天津\"),\"1\",list(\"武汉\"),\"2\")        运算结果为：null","desc":"根据表达式的不同计算结果，返回不同的值。本函数:从左到右计算，先出现的表达式先算，如果出现满足的表达式，则返回相应的结果，后面的不再计算。如果没有一个表达式满足条件,而且有缺省值表达式，则返回缺省值，否则返回null。"},{"title":"seq","date":"","content":"    函数说明：<br />        取得指定扩展单元格的同源号，即扩展格扩展后，将此单元格的同源格按行（列）号从小到大排序后<br />此单元格所在的序号。<br />        <br />    语法：<br />        seq({cellExp})<br />    参数说明:<br />        cellExp        单元格表达式，必须返回扩展格<br />    返回值：<br />        整数<br />        <br />    举例：<br />        假设A1是扩展格，B1的主格为A1，在B1单元格中写入=seq(A1)，则扩展后B1的值将依次从1变到A1扩展<br />出来的单元格的数目。","desc":"取得指定扩展单元格的同源号，即扩展格扩展后，将此单元格的同源格按行（列）号从小到大排序后此单元格所在的序号。"},{"title":"minc","date":"","content":"    函数说明：<br />        返回输入的单元格（格集）中值最小的单元格组成的List，如果存在多个单元格的<br />值相等且最小，则这些格都会被返回。<br />        <br />    语法：<br /> minc(cellExp1{,cellExp2{,......}})<br />        <br />    参数说明：<br />        cellExp1    单元格(格集)或单元格(格集)表达式<br />        <br />    返回值：<br />        单元格List<br />        <br />    示例：<br />        例1：minc(A1,A2,A3,A4)    求出单元格A1至A4之间值最小的单元格组成的列表<br />        <br />        例2：minc(A1{},A2)         求A1扩展出来的所有单元格和A2中值最小的单元格组成的列表<br />        ","desc":"返回输入的单元格（格集）中值最小的单元格组成的List，如果存在多个单元格的值相等且最小，则这些格都会被返回。"},{"title":"maxc","date":"","content":"    函数说明：<br />        返回输入的单元格（格集）中值最大的单元格组成的List，如果存在多个单元格的<br />值相等且最大，则这些格都会被返回。<br />        <br />    语法：<br /> maxc(cellExp1{,cellExp2{,......}})<br />        <br />    参数说明：<br />        cellExp1    单元格(格集)或单元格(格集)表达式<br />        <br />    返回值：<br />        单元格List<br />        <br />    示例：<br />        例1：maxc(A1,A2,A3,A4)    求出单元格A1至A4之间值最大的单元格组成的列表<br />        <br />        例2：maxc(A1{},A2)         求A1扩展出来的所有单元格和A2中值最大的单元格组成的列表<br />","desc":"返回输入的单元格（格集）中值最大的单元格组成的List，如果存在多个单元格的值相等且最大，则这些格都会被返回。"},{"title":"list2","date":"","content":"    函数说明：<br />        本函数与list函数唯一的区别是，本函数对内部的list不展开<br />        <br />    语法：<br />        list2(valueExp1{,valueExp2{,valueExp3{,……}}})<br />        <br />    参数说明：<br />        valueExp(n)        可以是常数或表达式，也可以是集合表达式<br />        <br />    返回值：<br />        一组枚举数据的集合<br />        <br />    示例：<br />        例1：list2(1,3,5,7,9)<br />        <br />        例2：list2(\"abc\",\"def\",\"ghj\")<br />        <br />        例3：list2(arg1,to(1,3),\"a\",\"b\",\"c\")    假设arg1是个整数组，其值为7,8,9，<br />                那么该表达式的结果值为{list(7,8,9),list(1,2,3),\"a\",\"b\",\"c\"}","desc":"本函数与list函数唯一的区别是，本函数对内部的list不展开"},{"title":"avg2","date":"","content":"    函数说明：<br />        以指定单元格集的元素为基格计算表达式求平均值<br />        <br />    语法：<br />        avg2(cellExp,exp{,containNull})<br /><br />    参数说明：<br /><br /> cellExp  单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp<br /> exp  表达式<br /> containNull 是否对null元素进行计数<br />        <br />    返回值：<br />        实数<br />        <br />    示例：<br />        <br /> 例1：avg2(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的平均值","desc":"以指定单元格集的元素为基格计算表达式求平均值"},{"title":"throwe","date":"","content":"    函数说明：<br />        抛出一个ReportError异常<br />        <br />    语法：<br />        throwe({msg})<br />        <br />    参数说明：<br />        msg        异常信息字符串<br />    返回值：<br />        <br />        <br />    举例：<br />        throwe(\"单元格值有误\") 抛出一个异常，显示信息为“单元格值有误”","desc":"抛出一个ReportError异常"},{"title":"subList","date":"","content":"    函数说明：<br />        获得一个集合的子集合<br />        <br />    语法：<br />        subList(srcList,startPos,count)<br />        <br />    参数说明：<br />        srcList  源集合表达式<br /> startPos 起始索引，从0开始计数<br /> count  返回的元素数目<br />        <br />    返回值：<br />        集合的子集合<br />        <br />    示例：<br />        例1：subList( list(1,3,5,7,9), 1, 2 ) 结果为{ 3, 5 }<br />","desc":"获得一个集合的子集合"}],"时间日期函数":[{"title":"age()","date":"","content":"    函数说明：<br />        计算从参数定义的时间到当前间隔的整年数<br />        <br />    语法：<br />      age(dateExp{,typeExp})<br />        age(stringExp,formatExp{,typeExp})<br />        <br />    参数说明：<br />        dateExp            日期型表达式，运算的结果是日期型(Date)<br />        stringExp        表达式，其结果必须为日期或中国日期时间格式的字符串<br />        formatExp   格式化表达式比如\"yyyyMMdd\",\"yyyy-MM-dd\"等<br />        typeExp     计算精确的最小单位 1为日，2为月，3为年，缺省为日 <br />    返回值：<br />        整数<br />        <br />    示例：<br />        假设今天为2007.1.1<br />        例1：age(datetime2(\"19800227\",\"yyyyMMdd\"))        结果为26<br />        <br />        例3：age(\"19800227\",\"yyyyMMdd\",3) 结果为27    <br />        ","desc":"计算从参数定义的时间到当前间隔的整年数"},{"title":"day()","date":"","content":"    函数说明：<br />        从日期型数据中获得该日在本月中是几号<br />        <br />    语法：<br />        day(dateExp)<br />        <br />    参数说明：<br />        dateExp        表达式，其结果必须为日期或中国日期时间格式的字符串<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：day(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：27<br />        <br />        例2：day(dateTime(12345))            返回：1<br />        <br />        例3：day(dateTime(\"2006-01-15 10:20:30\"))    返回：15<br />        ","desc":"从日期型数据中获得该日在本月中是几号"},{"title":"dayName()","date":"","content":"    函数说明：<br />        从日期型数据中获得该日的星期名称<br />        <br />    语法：<br />        dayName(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：dayName(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：星期三<br />        <br />        例2：dayName(dateTime(12345))            返回：星期四<br />        <br />        例3：dayName(dateTime(\"2006-01-15 10:20:30\"))    返回：星期日<br />        <br />        例4：dayName(\"12:14:34\")            返回：星期四<br />        <br />        例5：dayName(\"1972-11-08\")            返回：星期三<br />        <br />        例6：dayName(\"1972-11-08 10:20:30\")        返回：星期三","desc":"从日期型数据中获得该日的星期名称"},{"title":"dayNo()","date":"","content":"    函数说明：<br />        从日期型数据中，获得该日位于一个星期中的第几天，星期天返回1，星期一返回2，依此类推<br /><br />    语法：<br />        dayNo(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br /><br />    返回值：<br />        整数<br /><br />    示例：<br />        例1：dayNo(dateTime2(\"19800227\",\"yyyyMMdd\"))    返回：4<br />        <br />        例2：dayNo(dateTime(\"2006-01-15 10:20:30\"))    返回：1<br />        <br />        例3：dayNo(\"1972-11-08 10:20:30\")        返回：4","desc":"从日期型数据中，获得该日位于一个星期中的第几天，星期天返回1，星期一返回2，依此类推"},{"title":"daysAfter()","date":"","content":"    函数说明：<br />        计算两个日期型数据相差几天<br />        <br />    语法：<br />        daysAfter(dateExp1, dateExp2)<br />        <br />    参数说明：<br />        dateExp1        日期或标准日期格式的字符串，<br />                        如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />                                <br />        dateExp2        日期或标准日期格式的字符串，<br />                        如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />                                <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：daysAfter(dateTime(\"1983-12-15 10:20:30\"),datetime2(\"1982年12月30日\",\"yyyy年MM月dd日\"))<br />                返回：-350<br />        <br />        例2：daysAfter(\"1983-12-15 10:20:30\",\"1982-12-30\")    返回：-350<br />","desc":"计算两个日期型数据相差几天"},{"title":"daysInMonth()","date":"","content":"    函数说明：<br />        获得指定日期所在月的天数<br />        <br />    语法：<br />        daysInMonth(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />        <br />    返回值：<br />        整数<br />    <br />    示例：<br />        例1：daysInMonth(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：29<br />        <br />        例2：daysInMonth(\"1972-11-08 10:20:30\")            返回：30<br />        <br />        例3：daysInMonth(dateTime(\"2006-01-15 10:20:30\"))    返回：31","desc":"获得指定日期所在月的天数"},{"title":"daysInYear()","date":"","content":"    函数说明：<br />        获得指定日期所在年或者指定年份的天数<br />        <br />    语法：<br />        daysInYear(dateExp)<br />        daysInYear(year)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />                            <br />        year        返回整数的表达式<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：daysInYear(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：366<br />        <br />        例2：daysInYear(dateTime(\"2006-01-15 10:20:30\"))    返回：365<br />        <br />        例3：daysInYear(\"1972-11-08 10:20:30\")            返回：366<br />        <br />        例4：daysInYear(2006)                    返回：365","desc":"获得指定日期所在年或者指定年份的天数"},{"title":"hour()","date":"","content":"    函数说明：<br />        从日期时间型数据中，获得当前时间位于一天中的第几个时辰<br />        <br />    语法：<br />        hour(datetimeExp)<br />        <br />    参数说明：<br />        datetimeExp    日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：hour(\"1983-12-15\")                返回：0<br />        <br />        例2：hour(\"1983-12-15 10:30:25\")        返回：10<br />        <br />        例3：hour(dateTime(\"2006-01-15 13:20:30\"))    返回：13<br />        ","desc":"从日期时间型数据中，获得当前时间位于一天中的第几个时辰"},{"title":"lastday()","date":"","content":"    函数说明：<br />        获得指定日期的上一天<br />        <br />    语法：<br />        lastday(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />                            <br />    返回值：<br />        日期时间型<br />        <br />    示例：<br />        例1：lastday(\"1972-11-08 10:20:30\")        返回：1972-11-07 10:20:30<br />        <br />        例2：lastday(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-02-26 00:00:00<br />        <br />        例3：lastday(dateTime(\"2006-01-15 10:20:30\"))    返回：2006-01-14 10:20:30","desc":"获得指定日期的上一天"},{"title":"lastmonth()","date":"","content":"    函数说明：<br />        取得指定日期在上月的同日，若无同一日，则返回上月月末<br />        <br />    语法：<br />        lastmonth( dateExp )<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />        <br />    返回值：<br />        日期时间型<br />        <br />    示例：<br />        例1：lastmonth(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-01-27 00:00:00<br />        <br />        例2：lastmonth(\"1972-11-08 10:20:30\")            返回：1972-10-08 10:20:30<br />        <br />        例3：lastmonth(dateTime(\"2006-01-15 10:20:30\"))        返回：2005-12-15 10:20:30<br />        ","desc":"取得指定日期在上月的同日，若无同一日，则返回上月月末"},{"title":"lastyear()","date":"","content":"    函数说明：<br />        取得指定日期在去年的同月同日，若无同月同日，则返回去年同月最后一天<br />        <br />    语法：<br />        lastyear( dateExp )<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss<br />                            <br />    返回值：<br />        日期时间型<br />        <br />    示例：<br />        例1：lastyear(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1979-02-27 00:00:00<br />        <br />        例2：lastyear(\"1972-11-08 10:20:30\")        返回：1971-11-08 10:20:30<br />        <br />        例3：lastyear(dateTime(\"2006-01-15 10:20:30\"))    返回：2005-01-15 10:20:30<br />        ","desc":"取得指定日期在去年的同月同日，若无同月同日，则返回去年同月最后一天"},{"title":"minute()","date":"","content":"    函数说明：<br />        从日期时间型数据中，获得分钟的信息<br />        <br />    语法：<br />        minute(datetimeExp)<br />        <br />    参数说明：<br />        datetimeExp    日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：minute(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：0<br />        <br />        例2：minute(\"1972-11-08 10:20:30\")        返回：20<br />        <br />        例3：minute(dateTime(\"2006-01-15 13:20:30\"))    返回：20","desc":"从日期时间型数据中，获得分钟的信息"},{"title":"month()","date":"","content":"    函数说明：<br />        取得指定日期所在的月份<br />        <br />    语法：<br />        month(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：month(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：2<br />        <br />        例2：month(\"1972-11-08 10:20:30\")        返回：11<br />        <br />        例3：month(dateTime(\"2006-01-15 13:20:30\"))    返回：1<br />    ","desc":"取得指定日期所在的月份"},{"title":"monthbegin()","date":"","content":"    函数说明：<br />        取得指定日期所在月的月首<br />        <br />    语法：<br />        monthbegin( dateExp )<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />                            <br />    返回值：<br />        日期时间型<br />        <br />    示例：<br />        例1：monthbegin(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-02-01 00:00:00<br />        <br />        例2：monthbegin(\"1972-11-08 10:20:30\")            返回：1972-11-01 10:20:30<br />        <br />        例3：monthbegin(dateTime(\"2006-01-15 13:20:30\"))    返回：2006-01-01 13:20:30","desc":"取得指定日期所在月的月首"},{"title":"monthend()","date":"","content":"    函数说明：<br />        取得指定日期所在月的月末<br />        <br />    语法：<br />        monthend( dateExp )<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />                            <br />    返回值：<br />        日期时间型<br />        <br />    示例：<br />        例1：monthend(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-02-29 00:00:00<br />        <br />        例2：monthend(\"1972-11-08 10:20:30\")        返回：1972-11-30 10:20:30<br />        <br />        例3：monthend(dateTime(\"2006-01-15 13:20:30\"))    返回：2006-01-31 13:20:30","desc":"取得指定日期所在月的月末"},{"title":"now()","date":"","content":"    函数说明：<br />        获得系统此刻的日期时间<br />        <br />    语法：<br />        now()<br />        <br />    返回值：<br />        日期时间","desc":"获得系统此刻的日期时间"},{"title":"quaterbegin()","date":"","content":"    函数说明：<br />        取得指定日期所在季度的首日<br />        <br />    语法：<br />        quaterbegin( dateExp )<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        日期时间<br />        <br />    示例：<br />        例1：quaterbegin(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-01-01 00:00:00<br />        <br />        例2：quaterbegin(\"1972-11-08 10:20:30\")            返回：1972-10-01 10:20:30<br />        <br />        例3：quaterbegin(dateTime(\"2006-01-15 13:20:30\"))    返回：2006-01-01 13:20:30","desc":"取得指定日期所在季度的首日"},{"title":"quaterend()","date":"","content":"    函数说明：<br />        取得指定日期所在季度的末日<br />        <br />    语法：<br />        quaterend( dateExp )<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        日期时间<br />        <br />    示例：<br />        例1：quaterend(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-03-31 00:00:00<br />        <br />        例2：quaterend(\"1972-11-08 10:20:30\")            返回：1972-12-31 10:20:30<br />        <br />        例3：quaterend(dateTime(\"2006-01-15 13:20:30\"))        返回：2006-03-31 13:20:30","desc":"取得指定日期所在季度的末日"},{"title":"relDate()","date":"","content":"    函数说明：<br />        从给定的日期型数据中，算出相差n天后的新的日期数据<br />        <br />    语法：<br />        relDate(dateExp, nExp)<br />        <br />    参数说明：<br />        dateExp        给定的起始日期表达式，其结果必须为日期或标准日期格式的字符串，<br />                            如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />                            <br />        nExp        整数表达式，需要求得nExp天后的新日期<br />        <br />    返回值：<br />        日期时间<br />        <br />    示例：<br />        例1：relDate(datetime2(\"19800227\",\"yyyyMMdd\"),5)    返回：1980-03-03 00:00:00<br />        <br />        例2：relDate(\"1972-11-08 10:20:30\",-10)            返回：1972-10-29 10:20:30<br />        <br />        例3：relDate(dateTime(\"2006-01-15 13:20:30\"),15)    返回：2006-01-30 13:20:30","desc":"从给定的日期型数据中，算出相差n天后的新的日期数据"},{"title":"relTime()","date":"","content":"    函数说明：<br />        从给定的日期时间型数据中，算出相差n秒后的新的日期时间数据<br />        <br />    语法：<br />        relTime(datetimeExp, nExp)<br />        <br />    参数说明：<br />        datetimeExp        给定的起始日期表达式，其结果必须为日期或标准日期格式的字符串，<br />                                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />                                    <br />        nExp            整数表达式，需要求得nExp秒后的新日期时间<br />        <br />    返回值：<br />        日期时间<br />        <br />    示例：<br />        例1：relTime(datetime2(\"19800227\",\"yyyyMMdd\"),5)    返回：1980-02-27 00:00:05<br />        <br />        例2：relTime(\"1972-11-08 10:20:30\",-10)            返回：1972-11-08 10:20:20<br />        <br />        例3：relTime(dateTime(\"2006-01-15 13:20:30\"),15)    返回：2006-01-15 13:20:45    ","desc":"从给定的日期时间型数据中，算出相差n秒后的新的日期时间数据"},{"title":"second()","date":"","content":"    函数说明：<br />        从日期时间型数据中，获得秒信息<br />        <br />    语法：<br />        second(datetimeExp)<br />        <br />    参数说明：<br />        datetimeExp        日期或标准日期格式的字符串，<br />                        如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：second(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：0<br />        <br />        例2：second(\"1972-11-08 10:20:30\")        返回：30<br />        <br />        例3：second(dateTime(\"2006-01-15 13:20:45\"))    返回：45","desc":"从日期时间型数据中，获得秒信息"},{"title":"secondsAfter()","date":"","content":"    函数说明：<br />        计算两个日期时间型数据相差几秒<br />        <br />    语法：<br />        secondsAfter(datetimeExp1,datetimeExp2)<br />        <br />    参数说明：<br />        datetimeExp1        日期或标准日期格式的字符串，<br />                        如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        datetimeExp2        日期或标准日期格式的字符串，<br />                        如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：secondsAfter(datetime2(\"19800227\",\"yyyyMMdd\"),dateTime(\"1980-02-27 00:00:45\"))    返回：45<br />        <br />        例2：secondsAfter(\"1972-11-08 10:20:30\",\"1972-11-08 10:30:50\")                返回：620<br />","desc":"计算两个日期时间型数据相差几秒"},{"title":"time()","date":"","content":"    函数说明：<br />        将字符串转换成时间型数据<br />        <br />    语法：<br />        time(stringExp)<br />        <br />    参数说明：<br />        stringExp        HH:mm:ss格式的字符串<br />        <br />    返回值：<br />        时间型数据<br />        <br />    示例：<br />        ","desc":"将字符串转换成时间型数据"},{"title":"weekbegin()","date":"","content":"    函数说明：<br />        获得指定日期所在星期的星期天，这里认定星期天为一周的开始<br />        <br />    语法：<br />        weekbegin(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        日期时间型<br />        <br />    示例：<br />        例1：weekbegin(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-02-24 00:00:00<br />        <br />        例2：weekbegin(\"1972-11-08 10:20:30\")            返回：1972-11-05 10:20:30<br />        <br />        例3：weekbegin(dateTime(\"2006-01-15 13:20:45\"))        返回：2006-01-15 13:20:45","desc":"获得指定日期所在星期的星期天，这里认定星期天为一周的开始"},{"title":"weekend()","date":"","content":"    函数说明：<br />        获得指定日期所在星期的星期六，这里认定星期六为一周的结束<br />        <br />    语法：<br />        weekend(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                            如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />                            <br />    返回值：<br />        日期时间型<br />        <br />    示例：<br />        例1：weekend(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980-03-01 00:00:00<br />        <br />        例2：weekend(\"1972-11-08 10:20:30\")        返回：1972-11-11 10:20:30<br />        <br />        例3：weekend(dateTime(\"2006-01-15 13:20:45\"))    返回：2006-01-21 13:20:45","desc":"获得指定日期所在星期的星期六，这里认定星期六为一周的结束"},{"title":"year()","date":"","content":"    函数说明：<br />        从日期型数据中获得年信息<br />        <br />    语法：<br />        year(dateExp)<br />        <br />    参数说明：<br />        dateExp        日期或标准日期格式的字符串，<br />                            如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：year(datetime2(\"19800227\",\"yyyyMMdd\"))    返回：1980<br />        <br />        例2：year(\"1972-11-08 10:20:30\")        返回：1972<br />        <br />        例3：year(dateTime(\"2006-01-15 13:20:45\"))    返回：2006","desc":"从日期型数据中获得年信息"}],"数学函数":[{"title":"abs()","date":"","content":"    函数说明：<br />        计算参数的绝对值<br />        <br />    语法：<br />        abs(numberExp)<br />        <br />    参数说明：<br />        numberExp        待计算绝对值的数据<br />        <br />    返回值：<br />        数值型<br />        <br />    示例：<br />        例1：abs(-3245.54)    返回：3245.54<br />        <br />        例2：abs(-987)        返回：987","desc":"计算参数的绝对值"},{"title":"ceil()","date":"","content":"    函数说明：<br />        对数据在指定位置上进行截取，剩余部分只要有值就进位<br />        相关的函数有:<br />            floor:对数据在指定位置上进行截取，剩余部分只要有值全舍去<br />            round:对数据在指定位置上进行截取，剩余部分四舍五入<br />            <br />    语法：<br />        ceil(numberExp, {nExp})<br />        <br />    参数说明：<br />        numberExp        需要进行截取的数据<br />        nExp            整数，用于指定需要进行截取的位置，<br />                        >0：从小数点往右位移nExp个位数，<br />                        <0：从小数点往左移nExp个位数<br />                        =0：表示当前小数点的位置<br />                                <br />    返回值：<br />        数值型<br />        <br />    示例：<br />        例1：=ceil(3450001.004,0)    返回：3450002.0<br />        例2：=ceil(3450001.004,-1)    返回：3450010.0<br />        例3：=ceil(3450001.004,-2)    返回：3450100.0<br />        例4：=ceil(3450001.004,1)    返回：3450001.1<br />        例5：=ceil(3450001.004,2)    返回：3450001.01","desc":"对数据在指定位置上进行截取，剩余部分只要有值就进位相关的函数有:floor:对数据在指定位置上进行截取，剩余部分只要有值全舍去round:对数据在指定位置上进行截取，剩余部分四舍五入"},{"title":"cos()","date":"","content":"    函数说明：<br />        计算参数的余弦值，其中参数以弧度为单位<br />        相关的函数有sin()    计算参数的正弦值<br />                tan()    计算参数的正切值<br />        <br />    语法：<br />        cos(numberExp)<br />        <br />    参数说明：<br />        numberExp        待计算余弦值的弧度数<br />        <br />    返回值：<br />        double型<br />        <br />    示例：<br />        例1：cos(pi())        返回：-1<br />        <br />        例2：cos(pi(2))        返回：1","desc":"计算参数的余弦值，其中参数以弧度为单位相关的函数有sin()计算参数的正弦值tan()计算参数的正切值"},{"title":"exp()","date":"","content":"    函数说明：<br />        计算e的n次幂<br />        <br />    语法：<br />        exp(nExp)<br />        <br />    参数说明：<br />        nExp    指定次幂数<br />        <br />    返回值：<br />        数值型<br />        <br />    示例：<br />        例1：exp(4.3)        返回：73.69979369959579","desc":"计算e的n次幂"},{"title":"fact()","date":"","content":"    函数说明：<br />        计算参数的阶乘<br />        <br />    语法：<br />        fact(nExp)<br />        <br />    参数说明：<br />        nExp        待计算阶乘的数据<br />        <br />    返回值：<br />        长整数（64位）<br />        <br />    示例：<br />        例1：fact(10)        返回：3628800","desc":"计算参数的阶乘"},{"title":"floor()","date":"","content":"    函数说明：<br />        对数据在指定位置上进行截取，剩余部分只要有值全舍去<br />        相关的函数有:<br />            ceil:对数据在指定位置上进行截取，剩余部分只要有值就进位<br />            round:对数据在指定位置上进行截取，剩余部分四舍五入<br />            <br />    语法：<br />        floor(numberExp, {nExp})<br />        <br />    参数说明：<br />        numberExp        需要进行截取的数据<br />        nExp            整数，用于指定需要进行截取的位置，<br />                        >0：从小数点往右位移nExp个位数，<br />                        <0：从小数点往左移nExp个位数<br />                        =0：表示当前小数点的位置<br />                                <br />    返回值：<br />        数值型<br />        <br />    示例：<br />        例1：=floor(3451231.234,0)    返回：3451231.0<br />        例2：=floor(3451231.234,-1)    返回：3451230.0<br />        例3：=floor(3451231.234,-2)    返回：3451200.0<br />        例4：=floor(3451231.234,1)    返回：3451231.2<br />        例5：=floor(3451231.234,2)    返回：3451231.23","desc":"对数据在指定位置上进行截取，剩余部分只要有值全舍去相关的函数有:ceil:对数据在指定位置上进行截取，剩余部分只要有值就进位round:对数据在指定位置上进行截取，剩余部分四舍五入"},{"title":"log()","date":"","content":"    函数说明：<br />        计算参数的自然对数<br />        相关函数：log10()    计算以10为底的对数<br />        <br />    语法：<br />        log(numberExp)<br />        <br />    参数说明：<br />        numberExp        需要计算自然对数的数据<br />        <br />    返回值：<br />        数值型<br />        <br />    示例：<br />        例1：log(54)        返回：3.9889840465642745","desc":"计算参数的自然对数相关函数：log10()计算以10为底的对数"},{"title":"log10()","date":"","content":"    函数说明：<br />        计算以10为底的对数<br />        相关函数：log()        计算自然对数<br />        <br />    语法：<br />        log10(numberExp)<br />        <br />    参数说明：<br />        numberExp        需要计算以10为底的对数的数据<br />        <br />    返回值：<br />        数值型<br />    <br />    示例：<br />        例1：log10(54)        返回：1.7323937598229684","desc":"计算以10为底的对数相关函数：log()计算自然对数"},{"title":"pi()","date":"","content":"    函数说明：<br />        计算圆周率及其倍数<br />        <br />    语法：<br />        pi(numberExp)<br />        <br />    参数说明：<br />        numberExp        倍数，此参数省略，则返回圆周率<br />        <br />    返回值：<br />        圆周率及其倍数<br />        <br />    示例：<br />        例1：pi()        返回：3.141592653589793<br />        <br />        例2：pi(2)        返回：6.283185307179586","desc":"计算圆周率及其倍数"},{"title":"pow()","date":"","content":"    函数说明：<br />        计算x的n次幂<br />        <br />    语法：<br />        pow(xExp, nExp)<br />        <br />    参数说明：<br />        xExp        底数<br />        nExp        次幂<br />        <br />    返回值：<br />        数值型<br />        <br />    示例：<br />        例1：pow(2,4)        返回：16.0","desc":"计算x的n次幂"},{"title":"rand()","date":"","content":"    函数说明：<br />        取得0-1.0之间的一个随机数<br />        <br />    语法：<br />        rand()<br />        <br />    参数说明：<br />        无<br />        <br />    返回值：<br />        [0, 1.0)之间的一个随机数，浮点型<br />        <br />    示例：<br />        例1：rand()        获得[0, 1.0)之间的一个随机数<br />        <br />        例2：rand()*100        获得[0, 100)之间的一个随机浮点数<br />        <br />        例3：integer(rand()*100)    获得[0, 100)之间的一个随机整数","desc":"取得0-1.0之间的一个随机数"},{"title":"round()","date":"","content":"    函数说明：<br />        对数据在指定位置上进行截取，剩余部分四舍五入<br />        相关的函数有:<br />            ceil:对数据在指定位置上进行截取，剩余部分只要有值就进位<br />            floor:对数据在指定位置上进行截取，剩余部分只要有值全舍去<br />            <br />    语法：<br />        round(numberExp, {nExp})<br />        <br />    参数说明：<br />        numberExp        需要进行截取的数据<br />        nExp            整数，用于指定需要进行截取的位置，<br />                        >0：从小数点往右位移nExp个位数，<br />                        <0：从小数点往左移nExp个位数<br />                        =0：表示当前小数点的位置<br /><br />    返回值：<br />        数值型<br />        <br />    示例：<br />        例1：=round(3451251.274,0)    返回：3451251.0<br />        例2：=round(3451251.274,-1)    返回：3451250.0<br />        例3：=round(3451251.274,-2)    返回：3451300.0<br />        例4：=round(3451251.274,1)    返回：3451251.3<br />        例5：=round(3451251.274,2)    返回：3451251.27","desc":"对数据在指定位置上进行截取，剩余部分四舍五入相关的函数有:ceil:对数据在指定位置上进行截取，剩余部分只要有值就进位floor:对数据在指定位置上进行截取，剩余部分只要有值全舍去"},{"title":"sign()","date":"","content":"    函数说明：<br />        确定参数是正数还是负数还是0，当正数时返回1，负数时返回-1，0时返回0<br />        <br />    语法：<br />        sign(number)<br />        <br />    参数说明：<br />        number        需要判断正负的数据<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：sign(-10)        返回：-1<br />        <br />        例2：sign(30)        返回：1<br />        <br />        例3：sign(0)        返回：0","desc":"确定参数是正数还是负数还是0，当正数时返回1，负数时返回-1，0时返回0"},{"title":"sin()","date":"","content":"    函数说明：<br />        计算参数的正弦值，其中参数以弧度为单位<br />        相关的函数有cos()    计算参数的余弦值<br />                tan()    计算参数的正切值<br />    语法：<br />        sin(number)<br />        <br />    参数说明：<br />        number        需要计算正弦值的弧度数<br />        <br />    返回值：<br />        double型<br />        <br />    示例：<br />        例1：sin(pi())        返回：1.2246467991473532E-16<br />        <br />        例2：sin(pi(2))        返回：-2.4492935982947064E-16<br />        <br />        例3：sin(pi()/2)    返回：1.0","desc":"计算参数的正弦值，其中参数以弧度为单位相关的函数有cos()计算参数的余弦值tan()计算参数的正切值"},{"title":"sqrt()","date":"","content":"    函数说明：<br />        计算平方根<br />        <br />    语法：<br />        sqrt(number)<br /><br />    参数说明：<br />        number            需要计算平方根的数据<br /><br />    返回值：<br />        数值型<br /><br />    示例：<br />        例1：sqrt(100)        返回：10.0<br /><br />        例2：sqrt(99)        返回：9.9498743710662","desc":"计算平方根"},{"title":"tan()","date":"","content":"    函数说明：<br />        计算参数的正切值，其中参数以弧度为单位<br />        相关的函数有sin()    计算参数的正弦值<br />                cos()    计算参数的余弦值<br />    语法：<br />        tan(number)<br />        <br />    参数说明：<br />        需要计算正切值的弧度数<br />        <br />    返回值：<br />        double型<br />        <br />    示例：<br />        例1：tan(pi()/2)    返回：1.633123935319537E16<br />        <br />        例2：tan(pi(2))        返回：-2.4492935982947064E-16","desc":"计算参数的正切值，其中参数以弧度为单位相关的函数有sin()计算参数的正弦值cos()计算参数的余弦值"},{"title":"asin()","date":"","content":"函数说明：<br />        计算参数的反正弦值，其中参数为-1~1的实数<br />        相关的函数有acos()    计算参数的反余弦值<br />                    atan()    计算参数的反正切值<br />    语法：<br />        asin(number)<br />        <br />    参数说明：<br />        number        需要计算反正弦值的实数<br />        <br />    返回值：<br />        圆周率及其倍数<br />        <br />    示例：<br />        例1：asin(-1)        返回：-1.5707963267948966<br />        <br />        例2：asin(sin(pi()/2))   返回：1.5707963267948966<br />        <br />        例3：asin(sin(0))    返回：0.0","desc":"计算参数的反正弦值，其中参数为-1~1的实数相关的函数有acos()计算参数的反余弦值atan()计算参数的反正切值"},{"title":"acos()","date":"","content":"函数说明：<br />        计算参数的反余弦值，其中参数为-1~1的实数<br />        相关的函数有asin()    计算参数的反正弦值<br />                    atan()    计算参数的反正切值<br />    语法：<br />        acos(number)<br />        <br />    参数说明：<br />        number        需要计算反余弦值的实数<br />        <br />    返回值：<br />        圆周率及其倍数<br />        <br />    示例：<br />        例1：acos(-1)        返回：3.141592653589793<br />        <br />        例2：acos(cos(pi()/2))   返回：1.5707963267948966<br />        <br />        例3：acos(cos(0))    返回：0.0","desc":"计算参数的反余弦值，其中参数为-1~1的实数相关的函数有asin()计算参数的反正弦值atan()计算参数的反正切值"},{"title":"atan()","date":"","content":"函数说明：<br />        计算参数的反正切值，其中参数为实数<br />        相关的函数有asin()    计算参数的反正弦值<br />                    acos()    计算参数的反余弦值<br />    语法：<br />        atan(number)<br />        <br />    参数说明：<br />        number        需要计算反正切值的实数<br />        <br />    返回值：<br />        圆周率及其倍数<br />        <br />    示例：<br />        例1：atan(1)            返回：0.7853981633974483<br />        <br />        例2：atan(tan(pi()/2))   返回：1.5707963267948966<br />        <br />        例3：atan(tan(0))     返回：0.0","desc":"计算参数的反正切值，其中参数为实数相关的函数有asin()计算参数的反正弦值acos()计算参数的反余弦值"}],"字符串函数":[{"title":"asc()","date":"","content":"    函数说明：<br />        取字符串指定位置的字符的unicode值，如果是ascii字符则返回ascii码<br />        (一般来说，英文字符及其扩展字符都是ascii字符，中文、日文、韩文等<br />        亚洲字符都是unicode字符，ascii字符为8位，unicode字符为16位（其中有3位用于标志字符类型）)<br />        <br />        相关函数：char()        根据给定的unicode编码或者ascii码取得其对应的字符<br />        <br />    语法：<br />        asc( string{, nPos} )<br />        <br />    参数说明：<br />        string        给定的字符串<br />        nPos            整数表达式，缺省为0<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：=asc(\"def\")    返回：100    (ascii)<br />        <br />        例2：=asc(\"def\",1)    返回：101    (ascii)<br />        <br />        例3：=asc(\"中国\")    返回：20013    (unicode)<br />        <br />        例4：=asc(\"中国\",1)    返回：22269    (unicode)<br />    ","desc":"取字符串指定位置的字符的unicode值，如果是ascii字符则返回ascii码(一般来说，英文字符及其扩展字符都是ascii字符，中文、日文、韩文等亚洲字符都是unicode字符，ascii字符为8位，unicode字符为16位（其中有3位用于标志字符类型）)相关函数：char()根据给定的unicode编码或者ascii码取得其对应的字符"},{"title":"char()","date":"","content":"    函数说明：<br />        根据给定的unicode编码或者ascii码取得其对应的字符<br />        (一般来说，英文字符及其扩展字符都是ascii字符，中文、日文、韩文等<br />        亚洲字符都是unicode字符，ascii字符为8位，unicode字符为16位（其中有3位用于标志字符类型）)<br />        <br />        相关函数：asc()        取字符串指定位置的字符的unicode值，如果是ascii字符则返回ascii码<br />        <br />    语法：<br />        char( int )<br />        <br />    参数说明：<br />        int            整数表达式，unicode编码或者ascii编码<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：=char(22269)    返回：'国'<br />        <br />        例1：=char(101)        返回：'e'","desc":"根据给定的unicode编码或者ascii码取得其对应的字符(一般来说，英文字符及其扩展字符都是ascii字符，中文、日文、韩文等亚洲字符都是unicode字符，ascii字符为8位，unicode字符为16位（其中有3位用于标志字符类型）)相关函数：asc()取字符串指定位置的字符的unicode值，如果是ascii字符则返回ascii码"},{"title":"chn()","date":"","content":"    函数说明：<br />        将一个整数转化成汉字大写<br />        <br />    语法：<br />        chn( intExp{, abbrivateExp{, uppercaseExp }} )<br />        <br />    参数说明：<br />        intExp            整数表达式<br />        abbrivateExp    为true时采用亿万千百十的写法，<br />                                    为false时采用一二三四五六七的写法，缺省为false<br />        uppercaseExp    为false时采用零一二三四五六七八九十百千，<br />                                    为true时采用壹贰叁肆伍陆柒捌玖拾佰仟,缺省为false<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：chn(1234567,true)        返回：\"一百二十三万四千五百六十七\"<br />        <br />        例2：chn(1234567)        返回：\"一二三四五六七\"<br />        <br />        例3：chn(1234567,true,true)    返回：\"壹佰贰拾叁万肆仟伍佰陆拾柒\"<br />        <br />        例4：chn(1234567,,false)    返回：\"一二三四五六七\"","desc":"将一个整数转化成汉字大写"},{"title":"fill()","date":"","content":"    函数说明：<br />        获得n个s拼成的字符串<br />        相关函数：space()    产生一个空串<br />        <br />    语法：<br />        fill(s, n)<br />        <br />    参数说明：<br />        s        用于拼成新串的源串<br />        n        新串中包含源串的个数<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：fill(\"1 \",10)    返回：\"1 1 1 1 1 1 1 1 1 1 \"<br />        <br />        例2：fill(\"a b\",10)    返回：\"a ba ba ba ba ba ba ba ba ba b\"","desc":"获得n个s拼成的字符串相关函数：space()产生一个空串"},{"title":"hexstring()","date":"","content":"    函数说明：<br />        将数据或者byte数组转换为十六进制字符（数据当做无符号数据处理）<br />        <br />    语法：<br />        hexstring(dataExp{,spaceExp})<br />        <br />    参数说明：<br />        dataExp        数据或者byte数组表达式<br />        spaceExp    布尔型，数据之间是否用空格隔开，true表示要，false表示不要<br />        <br />    返回值：<br />        字符型，十六进制字符<br />        <br />    示例：<br />        例1：hexstring(12345678,true)    返回：\"BC 61 4E\"<br />        例2：hexstring(12345678,false)    返回：\"BC614E\"<br />        例3：hexstring(12345678)    返回：\"BC614E\"","desc":"将数据或者byte数组转换为十六进制字符（数据当做无符号数据处理）"},{"title":"left()","date":"","content":"    函数说明：<br />        获得源字符串左边的子串<br />        相关函数：mid()            获得源字符串中间的子串<br />              right()        获得源字符串右边的子串<br /><br />    语法：<br />        left(string, n)<br />        <br />    参数说明：<br />        string        获得子串的源串<br />        n        获得子串的长度<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：left(\"abcdefg\",3)        返回：\"abc\"","desc":"获得源字符串左边的子串相关函数：mid()获得源字符串中间的子串right()获得源字符串右边的子串"},{"title":"lrim()","date":"","content":"    函数说明：<br />        去掉字符串左边的空格<br />        相关函数：rrim()        去掉字符串右边的空格<br />              trim()        去掉字符串左右的空串<br />        <br />    语法：<br />        ltrim(s)<br />        <br />    参数说明：<br />        s        准备去掉左边空格的源串<br />        <br />    返回值：<br />        字符串型<br />        <br />    示例：<br />        例1：ltrim(\"  abc  def  \")    返回：\"abc  def  \"<br />        <br />        例2：ltrim(\"def abc  \")        返回：\"def abc  \"","desc":"去掉字符串左边的空格相关函数：rrim()去掉字符串右边的空格trim()去掉字符串左右的空串"},{"title":"len()","date":"","content":"    函数说明：<br />        计算字符串的长度<br />        <br />    语法：<br />        len(s)<br />        <br />    参数说明：<br />        s        待计算长度的字符串<br />        <br />    返回值：<br />        整数<br />        <br />    示例：<br />        例1：len(\"adfg\")    返回：4<br />        <br />        例2：len(\"  abd  \")    返回：7","desc":"计算字符串的长度"},{"title":"like()","date":"","content":"    函数说明：<br />        判断字符串是否匹配格式串(*匹配0个或多个字符，?匹配单个字符)<br />        <br />    语法：<br />        like( stringExp, formatExp{, ignoreCase} )<br />        <br />    参数说明：<br />        stringExp            字符串的表达式<br />        formatExp            格式串的表达式<br />        ignoreCase            布尔值的表达式，缺省为false，表示匹配时大小写敏感，否则忽略大小写<br />    <br />    返回值：<br />        布尔型<br />        <br />    示例：<br />        例1：like( \"abc123\", \"abc*\" )        返回：true<br />        <br />        例2：like( \"abc123\", \"abc1?3\" )        返回：true<br />        <br />        例3：like( \"abc123\", \"abc*34\" )        返回：false<br />        <br />        例4：like( \"abc123\", \"ABC*\" )        返回：false<br />        <br />        例5：like( \"abc123\", \"ABC*\", true )    返回：true<br />        ","desc":"判断字符串是否匹配格式串(*匹配0个或多个字符，?匹配单个字符)"},{"title":"lower()","date":"","content":"    函数说明：<br />        将字符串转成小写<br />        相关函数：upper()        把字符串转成大写<br />              word_cap()        将字符串每一个单词的首字母大写<br />        <br />    语法：<br />        lower(s)<br />        <br />    参数说明：<br />        s        待转成小写的字符串<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：lower(\"ABCdef\")    返回：\"abcdef\"<br />        <br />        例2：lower(\"defABC\")    返回：\"defabc\"","desc":"将字符串转成小写相关函数：upper()把字符串转成大写word_cap()将字符串每一个单词的首字母大写"},{"title":"mid()","date":"","content":"    函数说明：<br />        返回字符串的子串<br />        相关函数：left()        获得源字符串左边的子串<br />              right()        获得源字符串右边的子串<br />        <br />    语法：<br />        mid(s, start{, end})<br />        <br />    参数说明：<br />        s        待获得子串的源串<br />        start        获得子串的起始位置<br />        end        获得子串的结束位置，缺省为源串的长度<br />        <br />    返回值：<br />        字符串型<br />        <br />    示例：<br />        例1：mid(\"abcde\",0)    返回：abcde<br />        <br />        例2：mid(\"abcde\",1,2)    返回：b<br />        <br />        例3：mid(\"abcde\",3)    返回：de","desc":"返回字符串的子串相关函数：left()获得源字符串左边的子串right()获得源字符串右边的子串"},{"title":"pos()","date":"","content":"    函数说明：<br />        查找母串中子串的位置<br />        <br />    语法：<br />        pos(s1, s2{, begin})<br />        <br />    参数说明：<br />        s1        待查找子串的母串<br />        s2        被查找的子串<br />        begin        查找的起始位置，缺省为0<br />        <br />    返回值:<br />        整数<br />    <br />    示例:<br />        例1：pos(\"abcdef\",\"def\")    返回：3<br />        <br />        例2：pos(\"abcdefdef\",\"def\",5)    返回：6<br />","desc":"查找母串中子串的位置"},{"title":"right()","date":"","content":"    函数说明：<br />        获得字符串右边的子串<br />        相关函数：left()        获得源字符串左边的子串<br />              mid()            获得源字符串中间的子串<br /><br />    语法：<br />        right(s, n)<br />        <br />    参数说明：<br />        s        待获得子串的源串<br />        n        获得子串的长度<br />    <br />    返回值：<br />        字符串型<br />        <br />    示例：<br />        例1：right(\"abced\",2)  返回：\"ed\"","desc":"获得字符串右边的子串相关函数：left()获得源字符串左边的子串mid()获得源字符串中间的子串"},{"title":"rtrim()","date":"","content":"    函数说明：<br />        去掉字符串右边的空格<br />        相关函数：ltrim() 去掉字符串左边的空格<br />                            trim()            去掉字符串左右的空串<br />        <br />    语法：<br />        rtrim(s)<br />        <br />    参数说明：<br />        s        准备去掉右边空格的源串<br />        <br />    返回值：<br />        字符串型<br />        <br />    示例：<br />        例1：rtrim(\"  abc  def  \")    返回：\"  abc  def\"<br />        <br />        例2：rtrim(\"def abc  \")        返回：\"def abc\"","desc":"去掉字符串右边的空格相关函数：ltrim()去掉字符串左边的空格trim()去掉字符串左右的空串"},{"title":"rmb()","date":"","content":"    函数说明：<br />        将浮点数（只支持小数点后两位）转换人民币大写格式<br />        <br />    语法：<br />        rmb( numberExp )<br />        <br />    参数说明：<br />        numberExp        数据值表达式<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：rmb(123456.89)    返回：\"壹拾贰万叁仟肆佰伍拾陆圆捌角玖分\"","desc":"将浮点数（只支持小数点后两位）转换人民币大写格式"},{"title":"rplc()","date":"","content":"    函数说明：<br />        将字符串src的子字符串a变为字符串b，<br />        <br />    语法：<br />        rplc( srcExp,subStrA,rplcStrB{,boolExp})<br />        <br />    参数说明：<br />        srcExp            源字符串<br />        subStrA            源字符串的子字符串<br />        rplcStrB        将要替换成的字符串<br />        boolExp            引号里的字符是否需要变换，缺省为true<br />        <br />    返回值：<br />        替换后的字符串<br />        <br />    示例：<br />        例1：rplc(\"abc'abc'def\",\"a\",\"中国\")        返回：\"中国bc'中国bc'def\"<br />        <br />        例2：rplc(\"abc'abc'def\",\"a\",\"中国\",false)    返回：\"中国bc'abc'def\"<br />        <br />        例3：rplc(\"abc'abc'def\",\"a\",\"中国\",true)    返回：\"中国bc'中国bc'def\"","desc":"将字符串src的子字符串a变为字符串b，"},{"title":"space()","date":"","content":"    函数说明：<br />        产生一个空串<br />        相关函数：fill()    获得n个s拼成的字符串<br />        <br />    语法：<br />        space(n)<br />        <br />    参数说明：<br />        n        生成空串的长度<br />        <br />    返回值：<br />        字符串型，获得n个空格拼成的字符串<br />        <br />    示例：<br />        例1：space(5)    返回：\"     \"","desc":"产生一个空串相关函数：fill()获得n个s拼成的字符串"},{"title":"split()","date":"","content":"    函数说明：<br />        将字符串按分割符分割成多个子串<br />        <br />    语法：<br />        split( srcExp,sepExp{,boolExp})<br />        <br />    参数说明：<br />        srcExp        待分割的字符串表达式<br />        sepExp        分隔符表达式<br />        boolExp        bool型，是否解析引号、括号里的分隔符，<br />                    为true时解析，为false时不解析，缺省为false<br />        <br />    返回值：<br />        分割后的字符串列表<br />        <br />    示例：<br />        例1：=split(\"ab;cd;ef;tg;tt\",\";\")        返回数组：[\"ab\",\"cd\",\"ef\",\"tg\",\"tt\"]<br />        <br />        例2：=split(\"ab;c'd;e'f;tg;tt\",\";\",false)    返回数组：[\"ab\",\"c'd;e'f\",\"tg\",\"tt\"]　不解析引号里的分隔符<br />        <br />        例3：=split(\"ab;c[d;e]f;tg;tt\",\";\",false)    返回数组：[\"ab\",\"c[d;e]f\",\"tg\",\"tt\"]　不解析括号里的分隔符<br />        <br />        例4：=split(\"ab;c'd;e'f;tg;tt\",\";\",true)    返回数组：[\"ab\",\"c'd\",\"e'f\",\"tg\",\"tt\"]　解析引号里的分隔符<br />        <br />        例5：=split(\"ab;c[d;e]f;tg;tt\",\";\",true)    返回数组：[\"ab\",\"c[d\",\"e]f\",\"tg\",\"tt\"]　解析括号里的分隔符","desc":"将字符串按分割符分割成多个子串"},{"title":"trim()","date":"","content":"    函数说明：<br />        去掉字符串左右的空串<br />        相关函数：right_trim()        去掉字符串右边的空格<br />              left_trim()        去掉字符串左边的空格<br />        <br />    语法：<br />        trim(s)<br />        <br />    参数说明：<br />        s        待去掉左右空串的源串<br />        <br />    返回值：<br />        字符串型<br />        <br />    示例：<br />        例1：trim(\"  abc  \")    返回:\"abc\"<br />        <br />        例2：trim(\"  a  bc  \")    返回:\"a  bc\"","desc":"去掉字符串左右的空串相关函数：right_trim()去掉字符串右边的空格left_trim()去掉字符串左边的空格"},{"title":"upper()","date":"","content":"    函数说明：<br />        把字符串转成大写<br />        相关函数：lower()        把字符串转成小写<br />              word_cap()        将字符串每一个单词的首字母大写<br />    语法：<br />        upper(s)<br />        <br />    参数说明：<br />        s        待转成大写的源串<br />        <br />    返回值：<br />        字符串型<br />        <br />    示例：<br />        例1：upper(\"ABCdef\")    返回:\"ABCDEF\"<br />        <br />        例2：upper(\"abcDEF\")    返回:\"ABCDEF\"","desc":"把字符串转成大写相关函数：lower()把字符串转成小写word_cap()将字符串每一个单词的首字母大写"},{"title":"wordCap()","date":"","content":"    函数说明：<br />        将字符串每一个单词的首字母大写<br />        相关函数：upper()                把字符串转成大写<br />              lower()                把字符串转成小写<br />                            <br />    语法：<br />        wordCap(s)<br />        <br />    参数说明：<br />        s        需要将单词首字母大写的源串<br />        <br />    返回值：<br />        字符串型<br />        <br />    示例：<br />        例1：wordCap(\"I love my country\")    返回：\"I Love My Country\"<br />        <br />        例2：wordCap(\"she is beautiful\")    返回：\"She Is Beautiful\"","desc":"将字符串每一个单词的首字母大写相关函数：upper()把字符串转成大写lower()把字符串转成小写"},{"title":"rmQuote()","date":"","content":"    函数说明：<br />        删除表达式里的引号，包括单引号和双引号<br />        <br />    语法：<br />        rmQuote(exp)<br />        <br />    参数说明：<br />        exp            表达式<br />        <br />    返回值：<br />        字符串","desc":"删除表达式里的引号，包括单引号和双引号"},{"title":"link","date":"","content":"    函数说明：<br />        生成一个url<br /><br />    语法：<br />        link(serviceName{,jspArgNames,jspArgValues{,reportArgNames,reportArgValues}})<br />        <br />    参数说明：<br />        serviceName 服务名称<br /> jspArgNames jsp参数名称数组，可为空，元素类型需为字符串型<br /> jspArgValues jsp参数值数组，需与jspArgNames元素个数相同<br /> reportArgNames 报表参数名称数组，可为空，元素类型需为字符串型<br /> reportArgValues 报表参数值数组，需与reportArgNames元素个数相同<br />        <br />    返回值：<br />        字符串型<br />        <br />    示例：<br /><br />        例1：link(\"ServiceName\",list(\"jspArg1\",\"jspArg2\"), list(\"value1\",2),\"count\",5)<br />  返回ServiceName?jasArg1=value1&jspArg2=2&params=count=5","desc":"生成一个url"}],"数据类型转换":[{"title":"bigint()","date":"","content":"    函数说明：<br />        将字符型整数转换成大整数或对数值型数据取整返回大整数<br />        该数据类型精度高，支持大于64位的整数，但是运算速度慢<br />        如果小于64位的整数，建议用long(支持64位，即最大为2的64次方)或者int(支持32位，即最大为2的32次方)<br />        <br />    语法：<br />        bigint(stringExp)<br />        bigint(numberExp)<br />        <br />    参数说明：<br />        stringExp        需要转换的整数串<br />        numberExp        需要取整的数值型数据，超过64位要用decimal类型，缺省为double(64位)<br />        <br />    返回值：<br />        大整数BigInteger<br />        <br />    示例：<br />        例1：bigint(\"123456789012345678901234567890\")        返回：123456789012345678901234567890<br />        <br />        例2：bigint(decimal(\"1234567890123456789012345.67890\"))    返回：1234567890123456789012345<br />        <br />        例3：bigint(12345.6789012345678901234567890)        返回：12345<br />        ","desc":"将字符型整数转换成大整数或对数值型数据取整返回大整数该数据类型精度高，支持大于64位的整数，但是运算速度慢如果小于64位的整数，建议用long(支持64位，即最大为2的64次方)或者int(支持32位，即最大为2的32次方)"},{"title":"date()","date":"","content":"    函数说明：<br />        将字符串转换成日期型数据<br />        <br />    语法：<br />        date(stringExp)<br />        <br />    参数说明：<br />        stringExp        字符串表达式，其结果必须返回合法日期格式的字符串<br />                        要求格式为yyyy-MM-dd，不含时间，如果含了时间，时间部分不转换<br />                                    <br />    返回值：<br />        日期时间型，但是时间部分都为00:00:00<br />        <br />    示例：<br />        例1：date(\"1982-08-09\")            返回日期：1982-08-09 00:00:00<br />        <br />        例2：date(\"1982-08-09 10:20:30\")    返回日期：1982-08-09 00:00:00<br />        ","desc":"将字符串转换成日期型数据"},{"title":"dateTime()","date":"","content":"    函数说明：<br />        将字符串或长整数转换成日期时间<br />        <br />    语法：<br />        dateTime(string)<br />        dateTime(long)<br />        <br />    参数说明：<br />        string        格式为yyyy-MM-dd HH:mm:ss的字符串<br />        long        以微秒计的长整数<br />        <br />    返回值：<br />        日期时间<br />    <br />    示例：<br />        例1：dateTime(\"2006-01-01 10:20:30\")        返回：2006-01-01 10:20:30<br />            <br />        例2：dateTime(\"2006-01-01 10:20:30:111\")    返回：2006-01-01 10:20:30<br />        <br />        例3：dateTime(12345)                返回：1970-01-01 08:00:12","desc":"将字符串或长整数转换成日期时间"},{"title":"datetime2()","date":"","content":"    函数说明：<br />        将各种格式的日期字符串转换成日期时间型数据，转换时可以指定字符串的当前格式<br />        <br />    语法：<br />        datetime2(string, format)<br />        <br />    参数说明：<br />        string        各种格式的日期字符串<br />        format        用于说明参数1的格式串<br />        <br />    返回值：<br />        日期时间型数据<br />        <br />    示例：<br />        例1：datetime2(\"12/28/1972\",\"MM/dd/yyyy\")            返回：1972-12-28 00:00:00<br />        <br />        例2：datetime2(\"12/28/1972 10:23:43\",\"MM/dd/yyyy hh:mm:ss\")    返回：1972-12-28 10:23:43<br />        <br />        例3：datetime2(\"19800227\",\"yyyyMMdd\")                返回：1980-02-27 00:00:00<br />        <br />        例4：datetime2(\"1982年12月30日\",\"yyyy年MM月dd日\")        返回：1982-12-30 00:00:00","desc":"将各种格式的日期字符串转换成日期时间型数据，转换时可以指定字符串的当前格式"},{"title":"decimal()","date":"","content":"    函数说明：<br />        将字符串或数字型数值转换成大浮点数<br />        <br />    语法：<br />        deicmal(stringExp)<br />        decimal(numberExp)<br />        <br />    参数说明：<br />        stringExp        给定数字串,可含小数点<br />        numberExp        数值，只能少于等于64位，超过64位就要用字符串<br />        <br />    返回值：<br />        大浮点数BigDecimal<br />        <br />    示例：<br />        例1：decimal(\"123456789012345678901234567890\")    返回：123456789012345678901234567890<br />        <br />        例2：decimal(1234567890123456)            返回：1234567890123456（BigDecimal类型）<br />","desc":"将字符串或数字型数值转换成大浮点数"},{"title":"double()","date":"","content":"    函数说明：<br />        将字符串或数字转换成64位的双精度浮点数<br />        <br />    语法：<br />        double( string )<br />        double( number )<br />        <br />    参数说明：<br />        string        需要转换的字符串表达式<br />        number        数字<br />        <br />    返回值：<br />        64位的双精度浮点数<br />        <br />    示例：<br />        例1：double(\"1234567\")    返回：1234567.0<br />        <br />        例2：double(1234567)    返回：1234567.0","desc":"将字符串或数字转换成64位的双精度浮点数"},{"title":"float()","date":"","content":"    函数说明：<br />        将单精度浮点数、双精度浮点数、字符串转换为32位的单精度浮点型<br />        <br />    语法：<br />        float(string)<br />        float(number)<br />        <br />    参数说明：<br />        string        需要转换的单精度浮点数、双精度浮点数表达式<br />        number        数字<br />        <br />    返回值：<br />        32位的单精度浮点数<br />        <br />    示例：<br />        例1：float(\"1234567\")    返回：1234567.0<br />        <br />        例2：float(1234567.0)    返回：1234567.0<br />        <br />        例3：float(1234567)    表达式提示错误，因为1234567不是浮点数","desc":"将单精度浮点数、双精度浮点数、字符串转换为32位的单精度浮点型"},{"title":"int()","date":"","content":"    函数说明：<br />        将字符串或数字转换成整数<br />        <br />    语法：<br />        int( string )<br />        int( number )<br />        <br />    参数说明：<br />        string        需要转换的字符串表达式<br />        number        数字，如果带有小数位，转换后小数位被截掉<br />        <br />    返回值：<br />        32位整数<br />        <br />    示例:<br />        例1：int( \"100\" )    返回：100<br />        <br />        例2：int( 100.1 )    返回：100<br />        <br />        例3：int(100.9999)    返回：100","desc":"将字符串或数字转换成整数"},{"title":"long()","date":"","content":"    函数说明：<br />        将字符串或数字转换成64位长整数<br />        <br />    语法：<br />        long( string )<br />        long( number )<br />        <br />    参数说明：<br />        string        需要转换的字符串表达式<br />        number        数字,如果带有小数，则小数部分被截掉<br />        <br />    返回值：<br />        64位长整数<br />        <br />    示例：<br />        例1：long(\"1234567\")    返回：1234567<br />        <br />        例2：long(1234567.789)    返回：1234567","desc":"将字符串或数字转换成64位长整数"},{"title":"number()","date":"","content":"    函数说明：<br />        将字符串转换成相应的32位整数、64位整数、或者64位符点数<br />        <br />    语法：<br />        number( string )<br />        <br />    参数说明：<br />        string        需要转换的字符串表达式<br />        <br />    返回值：<br />        32位整数、64位整数、或者64位符点数<br />        <br />    示例：<br />        例1：number(\"123\")        返回：123<br />        <br />        例2：number(\"1234567890\")    返回：1234567890<br />        <br />        例3：number(\"12345.7891\")    返回：12345.7891","desc":"将字符串转换成相应的32位整数、64位整数、或者64位符点数"},{"title":"str()","date":"","content":"    函数说明：<br />        将对象转换成字符型，转换过程中可以进行格式化<br />        <br />    语法：<br />        str(expression{, format})<br />        <br />    参数说明：<br />        expression        需要转换成字符串的常数对象或表达式<br />        format            转换过程中进行格式化的格式串<br />        <br />    返回值：<br />        字符型<br />        <br />    示例：<br />        例1：str(123)        返回值：\"123\"<br />        <br />        例2：str(arg1,\"yyyy年MM月dd日\")，其中arg1为日期型参数，值为1972-09-09，<br />                    返回值：\"1972年09月09日\"<br />        <br />        例3：str(3456.9876,\"￥#,##0.00\")    返回值：\"￥3,456.99\"","desc":"将对象转换成字符型，转换过程中可以进行格式化"}],"数据类型判断":[{"title":"isdate()","date":"","content":"    函数说明：<br />        判定字符串是否具有转换成日期的合法格式<br />        <br />    语法：<br />        isdate( string )<br />        <br />    参数说明：<br />        string            字符串表达式<br />        <br />    返回值：<br />        布尔型<br />        <br />    示例：<br />        例1：isdate(\"2006-10-10\")        返回：true<br />        <br />        例2：isdate(\"2006-10-10 10:20:30\")    返回：true<br />        <br />        例3：isdate(\"20061010\")            返回：false<br />        <br />        例4：isdate(\"10:20:30\")            返回：false","desc":"判定字符串是否具有转换成日期的合法格式"},{"title":"isnumber()","date":"","content":"    函数说明：<br />        判定字符串是否具有转换成数值的合法格式<br />        <br />    语法：<br />        isnumber( string )<br />        <br />    参数说明：<br />        string            字符串表达式<br />        <br />    返回值：<br />        布尔型<br />        <br />    示例：<br />        例1：isnumber(\"abc\")    返回：false<br />        <br />        例2：isnumber(\"1234\")    返回：true","desc":"判定字符串是否具有转换成数值的合法格式"},{"title":"istime()","date":"","content":"    函数说明：<br />        判定字符串是否具有转换成时间的合法格式<br />        <br />    语法：<br />        istime( string )<br />        <br />    参数说明：<br />        string            字符串表达式<br />        <br />    返回值：<br />        布尔型<br /><br />    示例：<br />        例1：istime(\"2006-10-10\")        返回：false<br />        <br />        例2：istime(\"2006-10-10 10:20:30\")    返回：false<br />        <br />        例3：istime(\"20061010\")            返回：false<br />        <br />        例4：istime(\"10:20:30\")            返回：true","desc":"判定字符串是否具有转换成时间的合法格式"},{"title":"isEmpty()","date":"","content":"    函数说明：<br />        判定表达式运算的结果列表中的元素个数是否为0,或者运算的结果是否为null<br />        <br />    语法：<br />        isEmpty(exp)<br />        <br />    参数说明：<br />        exp            表达式<br />        <br />    返回值：<br />        布尔型<br />","desc":"判定表达式运算的结果列表中的元素个数是否为0,或者运算的结果是否为null"}],"分页后运算函数":[{"title":"pno()","date":"","content":"    函数说明：<br />        取得当前页的页码，注意，本函数只是在分页后才有效<br />    语法：<br />        pno({booleanExp})<br />    参数说明：<br />        booleanExp        表达式<br />    返回值：<br />        当前页的页码。<br />    函数示例：<br />        pno()       返回前页在总的页表中的页码<br />        pno(true)   返回前页在纵向分页的页表中的页码<br />        pno(false)  返回前页在横向分页的页表中的页码","desc":"取得当前页的页码，注意，本函数只是在分页后才有效"},{"title":"pcount()","date":"","content":"    函数说明：<br />        取得总的页数，注意，本函数只是在分页后才有效<br />    语法：<br />        pcount({booleanExp})<br />    参数说明：<br />        booleanExp        表达式<br />    返回值：<br />        页数。<br />    函数示例：<br />        pcount()       返回总的页表中的页数<br />        pcount(true)   返回纵向分页的页表中的页数<br />        pcount(false)  返回横向分页的页表中的页数","desc":"取得总的页数，注意，本函数只是在分页后才有效"},{"title":"pcsum()","date":"","content":"    函数说明：<br />        计算分页后的当前页中所有的单元格(cellExp)的和，注意，本函数只是在分页后才有效<br />    语法：<br />        pcsum({cellExp})<br />    参数说明：<br />        cellExp        表达式<br />    返回值：<br />        当前页中所有的单元格(cellExp)的和<br />    函数示例：<br />        pcsum(A2{条件})      返回当前页中所有的A2格之和","desc":"计算分页后的当前页中所有的单元格(cellExp)的和，注意，本函数只是在分页后才有效"},{"title":"pccount()","date":"","content":"    函数说明：<br />        计算分页后的当前页中所有的单元格(cellExp)的个数，注意，本函数只是在分页后才有效<br />    语法：<br />        pccount({cellExp})<br />    参数说明：<br />        cellExp        表达式<br />    返回值：<br />        当前页中所有的单元格(cellExp)的个数<br />    函数示例：<br />        pccount(A2{条件})      返回当前页中所有的A2格的个数","desc":"计算分页后的当前页中所有的单元格(cellExp)的个数，注意，本函数只是在分页后才有效"}],"统计图运算函数":[{"title":"graph()","date":"","content":"    函数说明：<br />        计算生成统计图<br />    语法：<br />        graph({graphTypeExp})<br />    参数说明：<br />        graphTypeExp        统计图类型表达式，本参数运算的结果为整型。分别对应以下值：<br />                                1：区域图<br />                                 2：条形图<br />                                 3：三维条形图<br />                                 4：三维簇状条形图<br />                                 5：堆积条形图<br />                                 6：三维堆积条形图<br />                                7：柱形图<br />                                8：三维柱形图<br />                                 9：三维簇状柱形图<br />                                 10：堆积柱形图<br />                                 11：三维堆积柱形图<br />                                 12：折线图<br />                                 13：饼型图<br />                                 14：散列图<br />                                 15：三维区域图<br />                                 16：三维折线图<br />                                 17：三维饼型图<br />                                 18：时序状态图<br />                                 19：时间走势图<br />                                 20：双轴折线图<br />                                 21：双轴柱线图<br />                                22：雷达图<br />                                 23：甘特图<br />                                 24：仪表盘<br />                                 25：里程碑<br />    返回值：<br />        统计图<br />    函数示例：<br />        graph(2)      计算条形图","desc":"计算生成统计图"}]}