<?xml version="1.0" encoding="UTF-8"?>
<funcs>
<F1 define="ds.avg()" desc="    函数说明：&#10;        从数据集中，从满足条件的记录中，算出给定字段或表达式的平均值&#10;        &#10;    语法：&#10;        datasetName.avg(selectExp{,filterExp{,rootGroupExp{,containNull}}})&#10;        &#10;    参数说明：&#10;        selectExp        需要计算平均值的字段或表达式，数值类型&#10;        filterExp        过滤条件表达式&#10;        rootGroupExp  是否root数据集表达式&#10; containNull  是否对null元素进行计数&#10;        &#10;    返回值：&#10;        实数&#10;        &#10;    举例：&#10;        例1：ds1.avg(score,sex==&quot;1&quot;)&#10;                表示从数据集的当前记录行集中过滤出sex为&quot;1&quot;的记录集合，&#10;                求得其score字段的平均值，score字段要求为数值型。&#10;                &#10;        例2：ds2.avg(quantity*price)&#10;                表示对数据集的当前记录行集求得表达式quantity*price的平均值&#10;&#10; 例2：ds1.avg(score,,,false)&#10;  求得数据集的当前记录行集中score字段的平均值，如果某条记录的score字段值为空&#10;  则此条记录不计入记录数，score字段要求为数值型" type="数据集函数"/>
<F2 define="ds.colCount()" desc="    函数说明：&#10;        获得数据集的列数&#10;        &#10;    语法：&#10;        datasetName.colcount()&#10;        &#10;    返回值：&#10;        整数&#10;    &#10;    举例：&#10;        例1：ds1.colcount()    获得ds1数据集的列数，整数类型" type="数据集函数"/>
<F3 define="ds.count()" desc="    函数说明：&#10;        计算数据集当前记录行集中，满足条件的记录数&#10;        &#10;    语法：&#10;        datasetName.count({filterExp{,rootGroupExp{,nullCheckExp}}})&#10;        &#10;&#10;    参数说明：&#10;        filterExp        条件表达式，如果全部选出，则不要此参数，&#10;        rootGroupExp     是否root数据集表达式&#10; nullCheckExp  检查某一条记录是否为空的标达式&#10;&#10;    返回值：&#10;        整数&#10;        &#10;    举例：&#10;        例1：ds1.count()&#10;                表示对ds1中当前记录行集中所有记录进行计数，返回记录数。&#10;                &#10;        例2：ds1.count(true)&#10;                含义同上，但是运算速度比ds1.count()慢，因此当记录全部选出时，&#10;                建议不要true&#10;                &#10;        例3：ds1.count(quantity&gt;500)&#10;                表示从ds1当前记录行集中选出quantity&gt;500的记录进行计数，&#10;                返回记录数。&#10;&#10; 例4：ds1.count(,,ID)&#10;  表示当前记录行集中ID不为空的纪录数目" type="数据集函数"/>
<F4 define="ds.field()" desc="    函数说明：&#10;        获得数据集当前行或者当前组中第一行中，指定列的数据&#10;        &#10;    语法：&#10;        datasetName.field( stringExp )&#10;        datasetName.field( #colNo )&#10;        &#10;    参数说明：&#10;        stringExp    数据集列名的表达式&#10;        #colNo        数据集列号的表式方式，如第二列用#2，行号列用#0&#10;        &#10;    返回值：&#10;        数据集的列对象，只能作为表达式的元素使用，不能作为最终单元格的值&#10;        &#10;    说明：&#10;        此函数性能比较低，请慎用&#10;        &#10;    举例：&#10;        例1：在报表中写入如下表达式&#10;                             A               B&#10;                      ┌─────────┬────────────┐&#10;                    1 │                  │ = to(1,ds2.colcount()) │&#10;                      │                  ├────────────┤&#10;                    2 │                  │  = ds2.fieldname(b1)   │&#10;                      ├─────────┼────────────┤&#10;                    3 │ = ds2.Select(#0) │    = ds2.field(b2)     │&#10;                      └─────────┴────────────┘&#10;                该报表相当于在B1中根据数据集ds2的列数进行横向扩展，在A3中根据&#10;                数据集的行数进行纵向扩展，然后在B2和B3中动态获取列名和列对象，&#10;                算出列值，这种用法可以实现动态列报表&#10;                &#10;                该报表的预览结果如下：&#10;&#10;        ┌───────┬───────┬───────┬───────┐&#10;        │   客户编码   │   客户名称   │     电话     │     传真     │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      1       │无锡食品加工厂│   3454356    │   4575775    │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      2       │天津长城化工厂│   3452346    │   4562674    │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      3       │江苏天龙食品集│   4576546    │   7465675    │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      4       │中国化工原料厂│   4563456    │   5675763    │&#10;        └───────┴───────┴───────┴───────┘&#10;" type="数据集函数"/>
<F5 define="ds.fieldName()" desc="    函数说明：&#10;        根据列号取数据集的列名&#10;        &#10;    语法：&#10;        datasetName.fieldName( intExp )&#10;        &#10;    参数说明：&#10;        &#10;        intExp        数据集列号的表达式&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    举例：&#10;        例1：ds1.fieldName(3)    返回&quot;score&quot;，&#10;                    表示数据集ds1中第三列的列名为&quot;score&quot;&#10;        &#10;        例2：运用举例,在报表中写入如下表达式&#10;                             A                B&#10;                      ┌─────────┬────────────┐&#10;                    1 │                  │ = to(1,ds2.colcount()) │&#10;                      │                  ├────────────┤&#10;                    2 │                  │  = ds2.fieldname(b2)   │&#10;                      ├─────────┼────────────┤&#10;                    3 │ = ds2.Select(#0) │    = ds2.field(b2)     │&#10;                      └─────────┴────────────┘&#10;                该报表相当于在B1中根据数据集ds2的列数进行横向扩展，在A3中根据&#10;                数据集的行数进行纵向扩展，然后在B2和B3中动态获取列名和列对象，&#10;                算出列值，这种用法可以实现动态列报表&#10;                &#10;                该报表的预览结果如下：&#10;&#10;        ┌───────┬───────┬───────┬───────┐&#10;        │   客户编码   │   客户名称   │     电话     │     传真     │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      1       │无锡食品加工厂│   3454356    │   4575775    │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      2       │天津长城化工厂│   3452346    │   4562674    │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      3       │江苏天龙食品集│   4576546    │   7465675    │&#10;        ├───────┼───────┼───────┼───────┤&#10;        │      4       │中国化工原料厂│   4563456    │   5675763    │&#10;        └───────┴───────┴───────┴───────┘&#10;&#10;        " type="数据集函数"/>
<F6 define="ds.first()" desc="    函数说明：&#10;        从数据集满足条件的记录集合中，选出第一条记录，&#10;        返回给定字段或表达式的值&#10;        &#10;    语法：&#10;        datasetName.first(selectExp{,descExp{,filterExp{,sortExp{,rootGroupExp}}}})&#10;        &#10;    参数说明：&#10;        selectExp        要选择的字段列，可以是字段列名/列号，也可以是表达式。&#10;                                列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;                                &#10;        descExp        排序的顺序，true代表逆序，false代表顺序&#10;        filterExp    过滤条件表达式&#10;        sortExp        排序依据表达式&#10;        rootGroupExp    是否root数据集表达式&#10;        &#10;    返回值：&#10;        数据类型不定，由selectExp的计算结果决定&#10;        &#10;    举例：&#10;        例1：ds1.first(name,true,score&gt;90,id)&#10;                从ds1数据集中选出成绩大于90的记录，按照id逆序排列，&#10;                返回第一条记录的name字段值&#10;                &#10;        例2：ds1.first(name,true,,score)&#10;                    对ds1数据集的所有记录按照成绩逆序排列，然后返回第一条记录的name字段值&#10;                &#10;        例3：ds1.first(name)    返回数据集ds1中第一条记录的name字段值" type="数据集函数"/>
<F7 define="ds.group()" desc="    函数说明：&#10;        根据分组表达式，从数据集中选出一组组集。&#10;        &#10;    语法：&#10;        datasetName.group( &lt;selectExp&gt;, , &lt;filterExp&gt; )&#10;        //适用于不需要排序或数据集中已排好序&#10;        &#10;        datasetName.group(selectExp{,descExp{,filterExp{,sortExp{,groupSortExp{,groupDescExp{,rootGroupExp}}}}}})&#10;&#10;    参数说明：&#10;        selectExp        选出的分组表达式，可以是字段列名/列号，也可以是表达式。&#10;                        列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;                                    &#10;        descExp            分组前记录的排序顺序，true为逆序，false为顺序&#10;        filterExp        过滤表达式&#10;        sortExp            分组前记录的排序依据表达式&#10;        groupSortExp        分组后对组的排序表达式，一般是汇总运算的表达式，如组合计等&#10;        groupDescExp        组排序顺序，true为逆序，false为顺序&#10;        rootGroupExp        是否root数据集表达式&#10;&#10;    返回值：&#10;        一组数据的集合，数据类型由selectExp的运算结果来决定&#10;&#10;    示例：&#10;        例1：ds1.group(class)&#10;                把数据集ds1中所有记录按照class字段进行分组，&#10;                并返回每组的class值组成的集合&#10;        &#10;        例2：ds1.group(class, true )&#10;                把数据集ds1中所有记录按照class字段降序排列，然后根据class进行分组，&#10;                并返回每组的class值组成的集合&#10;        &#10;        例3：ds1.group(class,false,sex=='1')&#10;                从数据源ds1中选取性别为&quot;1&quot;的记录，按照class字段升序排列，&#10;                然后根据class进行分组，并返回每组的class值组成的集合&#10;        &#10;        例4：ds1.group(class, true, sex=='1', id )&#10;                从数据源ds1中选取性别为&quot;1&quot;的记录，按照id字段降序排列，&#10;                然后根据class进行分组，并返回每组的class值组成的集合&#10;                &#10;        例5：ds1.group(省份,true,,,sum(工业产值),true)&#10;                对数据集ds1按照省份进行分组，分组后求出每组的sum(工业产值)，&#10;                然后按照这个汇总值对组进行逆序排列" type="数据集函数"/>
<F8 define="ds.isfield()" desc="    函数说明：&#10;        判断数据集中是否有该列名&#10;        &#10;    语法：&#10;        datasetName.isfield( stringExp )&#10;        &#10;    参数说明：&#10;        stringExp        待判断的列名表达式&#10;        &#10;    返回值：&#10;        布尔型&#10;        &#10;    举例：&#10;        例1：ds1.isfield(&quot;score&quot;)    返回true，表示ds1中含有score这个列名" type="数据集函数"/>
<F9 define="ds.last()" desc="    函数说明：&#10;        从数据集满足条件的记录集合中，选出最后一条记录，返回给定字段或表达式的值&#10;        &#10;    语法：&#10;        datasetName.last(selectExp{,descExp{,filterExp{,sortExp{,rootGroupExp}}}})&#10;        &#10;    参数说明：&#10;        selectExp        要选择的字段列，可以是字段列名/列号，也可以是表达式。&#10;                                列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;                                &#10;        descExp            排序的顺序，true代表逆序，false代表顺序&#10;        filterExp        过滤条件表达式&#10;        sortExp            排序依据表达式&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        数据集中最后一条记录指定字段的值，数据类型由selectExp的运算结果决定&#10;        &#10;    示例：&#10;        例1：ds1.last(name,true,,score)&#10;                将ds1数据集的记录按成绩逆序排列，并返回最后一条记录的name字段值&#10;                &#10;        &#10;    " type="数据集函数"/>
<F10 define="ds.max()" desc="    函数说明：&#10;        从数据集中，从满足条件的记录中，选出给定字段或表达式的最大值&#10;        &#10;    语法：&#10;        datasetName.max(selectExp{,filterExp{,rootGroupExp}})&#10;        &#10;    参数说明：&#10;        selectExp        需要获得最大值的字段或表达式&#10;                        如果用列号，列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;                                &#10;        filterExp        过滤表达式&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        集合中的最大值，数据类型不定，由selectExp的运算结果决定&#10;        &#10;    示例：&#10;        例1：ds1.max(score)        获得数据集ds1中的score最大值&#10;        &#10;        例2：ds1.max(score,sex==&quot;1&quot;)    获得数据集ds1中sex=&quot;1&quot;的记录中score最大值&#10;    " type="数据集函数"/>
<F11 define="ds.min()" desc="    函数说明：&#10;        从数据集中，从满足条件的记录中，选出给定字段或表达式的最小值&#10;        &#10;    语法：&#10;        datasetName.min(selectExp{,filterExp{,rootGroupExp}})&#10;        &#10;    参数说明：&#10;        selectExp        需要获得最小值的字段或表达式&#10;                        如果用列号，列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;                                &#10;        filterExp        过滤表达式&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        集合中的最大值，数据类型不定，由selectExp的运算结果决定&#10;        &#10;    示例：&#10;        例1：ds1.min(score)        获得数据集ds1中的score最小值&#10;        &#10;        例2：ds1.min(score,sex==&quot;1&quot;)    获得数据集ds1中sex=&quot;1&quot;的记录中score最小值" type="数据集函数"/>
<F12 define="ds.plot()" desc="    函数说明：&#10;        根据数据值段进行分组，俗称“按段分组”&#10;        &#10;    语法：&#10;        datasetName.plot( valueExp, listExp{, filterExp{, eqExp{, ascExp{,rootGroupExp}}}} )&#10;        &#10;    参数说明：&#10;        valueExp        用于分组的值表达式&#10;        ListExp            数据值段列表，同valueExp数据类型相同的数组，要求其中元素从小到大排列&#10;        filterExp        过滤表达式&#10;        eqExp            返回布尔值的表达式，缺省为false，表示与元素比较时不包含等于&#10;        ascExp            返回布尔值的表达式，缺省为true，表示listExp返回的数组按从小到大排，否则为从大到小排&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    特别说明：&#10;        ascExp为true(即listExp从小到大排列)时，eqExp为true时，与元素比较时采用&lt;=，eqExp为false时，采用&lt;;&#10;        ascExp为false(即listExp从大到小排列)时，eqExp为true时，与元素比较时采用&gt;=，eqExp为false时，采用&gt;&#10;        &#10;    返回值：&#10;        整数组，代表记录按值段分组后组的顺序，如list(0,1,2,3)代表第一组，第二组，第三组，第四组&#10;        因此，定义完单元格数据值表达式后还需要定义显示值表达式，比如第一组代表不及格，第二组代表及格等等&#10;        &#10;    示例：&#10;        例1：ds1.plot(成绩,list(60，80，90),,true,false)    返回值为list(0,1,2,3)&#10;                对数据集ds1的记录按成绩段进行分组，60分以下、60-80，80-90，90分以上等四组&#10;                同时定义显示值表达式为：map(list(0,1,2,3),list(不及格,及格,良好,优秀))&#10;                &#10;        例2：ds1.plot(成绩,arg1,,true,false)    其中arg1为整数组，其值为list(60,70,80,90)&#10;                显示值表达式为：map(to(0,count(arg1)),arg2)，其中arg2为字符串组，&#10;                其值为{&quot;不及格&quot;,&quot;及格&quot;,&quot;中&quot;,&quot;良好&quot;,&quot;优秀&quot;}&#10;                本例通过参数动态控制分组值段以及结果组的显示值&#10;    " type="数据集函数"/>
<F13 define="ds.select()" desc="    函数说明：&#10;        从数据集的当前行集中选取符合条件的记录&#10;    语法：&#10;        datasetName.select( &lt;select_exp&gt;{, desc_exp{, filter_exp{, sort_exp{,rootGroupExp}}}} )&#10;        &#10;        datasetName.select( &lt;select_exp&gt;, , &lt;filter_exp&gt; )//适用于不需排序或数据集中已排好序            &#10;&#10;    参数说明：&#10;        select_exp：    要选择的字段列名/列号，，也可以是表达式。&#10;                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;        desc_exp:    指定数据排序的顺序，true表示降序排列，false表示升序排列。&#10;        filter_exp:    数据过滤表达式，如果全部选出，则此参数省略，仅用“,”占位。&#10;        sort_exp:    数据排序表达式。当此项为空时先检查desc_exp是否为空，如果为空，&#10;                    则不排序，否则使用select_exp排序。&#10;        rootGroupExp    是否root数据集表达式&#10;                                &#10;    返回值：&#10;        一组数据的集合，数据类型由select_exp的运算结果决定&#10;        &#10;    函数示例：&#10;        例1：ds1.select( name )&#10;                从数据源ds1中选取name字段列的所有值，不排序&#10;&#10;        例2：ds1.select( #2, true )&#10;                从数据源ds1中选取第二个字段列的所有值并降序排列&#10;&#10;        例3：ds1.select( name,false,sex=='1')&#10;                从数据源ds1中选取性别为男性('1')的name字段列的值并升序排列&#10;&#10;        例4：ds1.select( name, true, sex=='1', id )&#10;                从数据源ds1中选取性别为男性的name字段列的值并按id字段降序排列" type="数据集函数"/>
<F14 define="ds.select1()" desc="    函数说明：&#10;        从数据集中按顺序检索到符合过滤条件的第一条记录，返回其selectExp值&#10;        &#10;    语法：&#10;        datasetName.select1(selectExp{,filterExp{,rootGroupExp}})&#10;        &#10;    参数说明：&#10;        selectExp        要选择的字段列名/列号，，也可以是表达式。&#10;                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;        filterExp        过滤条件&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        数据类型不定，由selectExp的运算结果决定&#10;        &#10;    特别说明：&#10;        当对数据集运用过滤条件后确定只剩一条记录时，虽然select&#10;        的运算结果一样，但是select1运算效率高，因为他只要找到符合条件的记录，&#10;        就不继续检索了，而select要检索完所有的记录才返回。&#10;        &#10;    示例：&#10;        例1：ds1.select1(name)&#10;                返回数据集ds1中第一条记录的name字段值&#10;                &#10;        例2：ds1.select1(name,score&gt;90)&#10;                从数据集ds1中检索出成绩大于90的记录，返回第一条记录的name字段值&#10;                " type="数据集函数"/>
<F15 define="ds.sum()" desc="    函数说明：&#10;        从数据集当前记录行集中检索出符合条件的记录集合，算出给定字段或表达式的汇总值&#10;        &#10;    语法：&#10;        datasetName.sum(selectExp{,filterExp{,rootGroupExp}})&#10;        &#10;    参数说明：&#10;        selectExp        需求和的字段或表达式&#10;        filterExp        条件表达式&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        实数&#10;        &#10;    示例：&#10;        例1：ds1.sum(quantity)    求得数据集ds1当前行集中quantity字段的汇总值&#10;        &#10;        例2：ds1.sum(quantity,productid==&quot;1&quot;)&#10;                    从数据集ds1当前行集中检索出productid=&quot;1&quot;的记录集，求得其quantity字段的汇总值" type="数据集函数"/>
<F16 define="ds.top()" desc="    函数说明：&#10;        从数据集中符合条件的记录中选取头num条并返回&#10;        &#10;    语法：&#10;        datasetName.top( &lt;select_exp&gt;,&lt;num_exp&gt;{, desc_exp{, filter_exp{,sort_exp{,rootGroupExp}}}} )&#10;    &#10;    参数说明：&#10;        select_exp：要选择的字段列，可以是字段列名/列号，也可以是表达式。&#10;                                列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;        num_exp        要取得记录个数表达式，该字段计算的最终结果为整型&#10;        desc_exp    指定数据排序的顺序，true表示降序排列，false表示升序排列。&#10;        filter_exp    数据过滤表达式。&#10;        sort_exp    排序表达式。&#10;        rootGroupExp    是否root数据集表达式&#10;    &#10;    返回值：&#10;        一组数据的集合，数据类型由select_exp的运算结果决定&#10;        &#10;    示例：&#10;        例1：ds1.top(name,10)    返回数据集ds1中头十条记录的name字段值&#10;        &#10;        例2：ds1.top(name,10,true,,score)&#10;                    将数据集记录按成绩降序排列，返回头十条记录的name字段值&#10;        " type="数据集函数"/>
<F17 define="ds.filter()" desc="    函数说明：&#10;        从数据集中按顺序检索到符合过滤条件的所有记录，返回纪录的组，注意该函数不能返回具体值，函数只能用在附加数据集中&#10;        &#10;    语法：&#10;        datasetName.filter(filterExp{,rootGroupExp})&#10;        &#10;    参数说明：&#10;        filterExp        过滤条件&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        返回行&#10;        &#10;    示例：&#10;        例1：ds1.filter(name==&quot;1&quot;)&#10;                返回数据集ds1中记录的name字段是&quot;1&quot;的所有行&#10;                &#10;        例2：ds.filter(score&gt;90)&#10;                从数据集ds1中检索出成绩大于90的记录" type="数据集函数"/>
<F18 define="ds.filter1()" desc="    函数说明：&#10;        从数据集中按顺序检索到符合过滤条件的第一条记录，返回该行，注意该函数不能返回具体值，函数只能用在附加数据集中&#10;        &#10;    语法：&#10;        datasetName.filter1(filterExp{,rootGroupExp})&#10;        &#10;    参数说明：&#10;        filterExp        过滤条件&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        返回行&#10;        &#10;    特别说明：&#10;        当对数据集运用过滤条件后确定只剩一条记录时，虽然filter&#10;        的运算结果一样，但是filter1运算效率高，因为他只要找到符合条件的记录，&#10;        就不继续检索了，而filter要检索完所有的记录才返回。&#10;        &#10;    示例：&#10;        例1：ds1.filter1(name==&quot;1&quot;)&#10;                返回数据集ds1中第一条记录的name字段是&quot;1&quot;的行&#10;                &#10;        例2：ds1.filter1(score&gt;90)&#10;                从数据集ds1中检索出成绩大于90的记录" type="数据集函数"/>
<F19 define="ds.filterCross()" desc="    函数说明：&#10;        从数据集中按顺序检索到符合过滤条件的所有记录，返回纪录的组，注意该函数不能返回具体值，函数只能用在附加数据集中&#10;        &#10;    语法：&#10;        datasetName.filterCross(filterExp{,rootGroupExp})&#10;        &#10;    参数说明：&#10;        filterExp        过滤条件&#10;        rootGroupExp        是否root数据集表达式&#10;        &#10;    返回值：&#10;        返回行&#10;        &#10;    示例：&#10;        例1：ds1.filterCross(name==&quot;1&quot;)&#10;                返回数据集ds1中记录的name字段是&quot;1&quot;的所有行&#10;                &#10;        例2：ds.filterCross(score&gt;90)&#10;                从数据集ds1中检索出成绩大于90的记录&#10;        本函数与filter函数的唯一区别是：filter是拿当前行或者组的第一行与ds进行过滤，&#10;                                                                    而本函数则是拿当前的行或者组与ds进行过滤.&#10;        当过滤条件里用到的列是当前分组，或者列表中指定的列时,这两个函数运算的结果是相同的,这个时候要用filter.&#10;        建议尽量少用这个函数,因为当数据量大时,本函数的运算速度极其慢.&#10;        " type="数据集函数"/>
<F20 define="ds.dselect()" desc="    函数说明：&#10;        从数据集的当前行集中选取符合条件的记录,选出字段相同的行将会只保留第一行&#10;    语法：&#10;        datasetName.dselect( &lt;select_exp&gt;{, filter_exp{,rootGroupExp}} )        &#10;&#10;    参数说明：&#10;        select_exp    要选择的字段列名/列号，，也可以是表达式。&#10;                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;        filter_exp    数据过滤表达式，如果全部选出，则此参数省略，仅用“,”占位。&#10;        rootGroupExp    是否root数据集表达式&#10;                                &#10;    返回值：&#10;        一组数据的集合，数据类型由select_exp的运算结果决定&#10;        &#10;    函数示例：&#10;        例1：ds1.dselect( name )&#10;                从数据源ds1中选取name字段列的所有值，name相同的纪录只会保留第一个" type="数据集函数"/>
<F21 define="ds.dcount()" desc="    函数说明：&#10;        计算数据集当前记录行集中，满足条件的记录数,选出字段记录的行将被视为同一个记录&#10;        &#10;    语法：&#10;        datasetName.dcount(&lt;select_exp&gt;{filterExp,{rootGroupExp}})&#10;        &#10;&#10;    参数说明：&#10;        select_exp    要选择的字段列名/列号，，也可以是表达式。&#10;                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;        filterExp    条件表达式，如果全部选出，则不要此参数，&#10;        rootGroupExp    是否root数据集表达式&#10;&#10;    返回值：&#10;        整数&#10;        &#10;    举例：&#10;        例1：ds1.dcount( name )&#10;                从数据源ds1中选取name字段列的所有值，name相同的纪录被视为同一纪律" type="数据集函数"/>
<F22 define="ds.selectEx()" desc="    函数说明：&#10;        从数据集的当前行集中选取符合条件的记录&#10;    语法：&#10;        datasetName.selectEx( &lt;select_exp&gt;{filter_exp{, &quot;sort_exp1, desc_exp1{;sort_exp2, desc_exp2{;...}}&quot;{,rootGroupExp}}} )        &#10;&#10;    参数说明：&#10;        select_exp    要选择的字段列名/列号，，也可以是表达式。&#10;                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;        filter_exp    数据过滤表达式，如果全部选出，则此参数省略，仅用&quot;,&quot;占位。&#10;        sort_exp1    数据排序表达式。按desc_exp1排序。&#10;        desc_exp1    指定数据排序的顺序，true表示降序排列，false表示升序排列。&#10;        sort_exp2    数据排序表达式。将sort_exp1相同的字段，按desc_exp2排序。&#10;        desc_exp2    指定数据排序的顺序，true表示降序排列，false表示升序排列。&#10;        ......&#10;        rootGroupExp    是否root数据集表达式&#10;                                &#10;    返回值：&#10;        一组数据的集合，数据类型由select_exp的运算结果决定&#10;        &#10;    函数示例：&#10;        &#10;        例1：ds1.selectEx( name,sex=='1',&quot;name;grade,true&quot;)&#10;                从数据源ds1中选取性别为男性('1')的name字段列的值并升序排列,然后把姓名相同的按grade降序排列&#10;        " type="数据集函数"/>
<F23 define="ds.groupEx()" desc="    函数说明：&#10;        根据分组表达式，从数据集中选出一组组集。&#10;        &#10;    语法：&#10;        &#10;        datasetName.groupEx(selectExp{,filterExp{, &quot;sort_exp1, desc_exp1{;sort_exp2, desc_exp2{;...}}&quot;{,groupSortExp{&#10;            ,groupDescExp{,rootGroupExp}}}}})&#10;&#10;    参数说明：&#10;        selectExp    选出的分组表达式，可以是字段列名/列号，也可以是表达式。&#10;                    列号用#n表示，例如#0代表第0列，#1代表第1列，依此类推&#10;        filterExp    过滤表达式&#10;        sort_exp1    数据排序表达式。按desc_exp1排序。&#10;        desc_exp1    指定数据排序的顺序，true表示降序排列，false表示升序排列。&#10;        sort_exp2    数据排序表达式。将sort_exp1相同的字段，按desc_exp2排序。&#10;        desc_exp2    指定数据排序的顺序，true表示降序排列，false表示升序排列。&#10;        ......&#10;        groupSortExp    分组后对组的排序表达式，一般是汇总运算的表达式，如组合计等&#10;        groupDescExp    组排序顺序，true为逆序，false为顺序&#10;        rootGroupExp    是否root数据集表达式&#10;&#10;    返回值：&#10;        一组数据的集合，数据类型由selectExp的运算结果来决定&#10;&#10;    示例：&#10;          例1：ds1.groupEx(sex,,&quot;grade,true;name&quot;)&#10;                从数据源ds1中选取grade字段列的值并降序排列,然后把name相同的按成绩升序排列，然后按sex字段分组&#10;        " type="数据集函数"/>
<F24 define="ds.bselect1()" desc="    函数说明：&#10;        此函数功能等同select1()，但是算法不同，采用二分法，适用于数据集记录&#10;        已经按照参考字段排好序的情况，运算速度比select1()快&#10;        &#10;    语法：&#10;        datasetName.bselect_one(selectExp,&quot;referExp1,referDescExp1,referValueExp1&#10;            {,referExp2,referDescExp2,referValueExp2{....}}}&quot;{,rootGroupExp})&#10;&#10;        datasetName.bselect1(selectExp,&quot;referExp1,referDescExp1,referValueExp1&quot;)&#10;&#10;    参数说明：&#10;        selectExp    选出字段或表达式&#10;        referExp1    参考字段表达式&#10;        referDescExp1    参考字段表达式的数据顺序，true表示降序排列，false表示升序排列&#10;        referValueExp1    参考字段的值表达式，一旦找到参考字段和该值相同的记录，即返回selectExp的值&#10;        ......        参考字段及其值可以多个，如果是多个，则找到多个参考字段都和值匹配的记录才返回&#10;        rootGroupExp    是否root数据集表达式&#10;&#10;    返回值：&#10;        数据类型不定，由selectExp的运算结果决定&#10;&#10;    示例：&#10;        例1：ds1.bselect1(name,&quot;id,false,value()&quot;)&#10;            采用二分法，找到数据集ds1中id和当前格的值相等的记录，返回其name字段值&#10;&#10;        例2：ds1.bselect1(name,&quot;id,false,value();class,false,A1;sex,true,B1&quot;)&#10;            采用二分法，找到数据集ds1中id和当前格的值相等、class和A1相等&#10;        且sex和B1相等的记录，返回其name字段值。注意这三个条件在表达式中的顺序&#10;        必需和它们在数据集中的排序先后相同，也就是说，在数据集中是先对id升序排&#10;        序，再对class升序排序，最后对sex进行降序排序的。" type="数据集函数"/>
<F25 define="ds.enumGroup()" desc="    函数说明：&#10;        根据表达式的不同计算结果，返回不同的值,然后按这些值进行分组。本函数:从左到右计算，先出现的表达式先算，如果出现满足的表达式，&#10;        则返回相应的结果，后面的不再计算。如果没有一个表达式满足条件,而且有缺省值表达式，则返回缺省值，否则返回null。&#10;    语法：&#10;    ds.enumGroup({hasNullGroup{,termExp1,resultExp1{,term2,resultExp2{,...{,defaultExp}}}}})&#10;    参数说明：&#10; hasNullGroup     布尔表达式，true返回空组，false不返回空组&#10;        termExp(n)          条件表达式&#10;        resultExp(n)        返回结果表达式&#10;        defaultExp          缺省值表达式，如果所有表达式结果都不满足，则返回本表达式计算结果" type="数据集函数"/>
<F26 define="ds.overlap" desc="    函数说明：&#10;        对每一条记录依次计算条件表达式，如果满足则把该条记录加入到相应的组里。如果有多个组满足，则这些组中都会&#10;        含有此条记录。如果都不满足并且有缺省值表达式，则把该条记录加入到缺醒组中。组值为以改组的第一条记录计算&#10;        结果表达式所得到的值。&#10;    语法：&#10;        ds.overlap({hasNullGroup{,termExp1,resultExp1{,term2,resultExp2{,...{,defaultExp}}}}})&#10;    参数说明：&#10;        hasNullGroup        布尔表达式，true返回空组，false不返回空组&#10;        termExp(n)          条件表达式&#10;        resultExp(n)        返回结果表达式&#10;        defaultExp          缺省值表达式，如果所有表达式结果都不满足，则返回本表达式计算结果" type="数据集函数"/>
<F27 define="avg()" desc="    函数说明：&#10;        对可扩展单元格或集合表达式求平均值&#10;        &#10;    语法：&#10;        avg(expression{,containNull})&#10;        average(expression{,containNull})&#10;&#10;    参数说明：&#10;        expression 需要求平均值的单元格或表达式，一般为可扩展单元格或集合表达式&#10; containNull 是否对null元素进行计数&#10;        &#10;    返回值：&#10;        实数&#10;        &#10;    示例：&#10;        例1：avg(A1:B10) 求得A1至B10之间单元格的平均值，注意是以当前格为基格计算A1和B10&#10;        &#10;        例2：avg(arg1)  其中arg1是整数组，表示求得arg1中所有数据的平均值&#10;        &#10;        例3：avg(B1{})  表示求得当前主格扩展区域内所有扩展后的B1单元格的平均值&#10;        &#10;        例4：avg(B1{`0}{}) 表示求得根坐标下所有扩展后的B1单元格的平均值&#10;&#10; 例5：avg(list(2,4,null),false)返回3，如果containNull为true或缺省则返回2&#10;        " type="单元格函数"/>
<F28 define="call()" desc="    函数说明：&#10;        执行存储过程，返回结果数据集合，只能返回单列数据，如果存储过程返回多个字段，则返回第一个字段的结果值&#10;        &#10;    语法：&#10;        call(sqlStatement{,arg1{,arg2{,arg3{,……}}}})&#10;        &#10;    参数说明：&#10;        sqlStatement        合法的调用存储过程的sql语句&#10;        arg(n)                    sql语句的参数，可以是常数也可以是表达式,&#10;                                        如果是输出结果集的参数，对应的参数表达式写成&quot;@@result&quot;&#10;                    &#10;    返回值：&#10;        一组数据的集合，由结果集的第一个字段决定数据类型，如果结果集是多列，只返回第一列&#10;        &#10;    示例：&#10;        例1：call(&quot;{call ResultSet (?,?,?)}&quot;,&quot;@@result&quot;,&quot;000001&quot;,A2)&#10;                表示执行存储过程ResultSet，第一个输出参数输出结果集，第二、三个&#10;                参数传入&quot;000001&quot;,A2作为参数值&#10;                    " type="单元格函数"/>
<F29 define="call2()" desc="    函数说明：&#10;        除第一个参数为数据源连接外，其他参数可call()函数相同，功能也和call()&#10;        函数相同，通过第一个参数，可以实现不同的单元格连接不同的数据源。&#10;        &#10;    语法：&#10;        call(dbName,sqlStatement{,arg1{,arg2{,arg3{,……}}}})&#10;        &#10;    参数说明：&#10;        dbName        数据源名称&#10;        sqlStatement    合法的调用存储过程的sql语句&#10;        arg(n)        sql语句的参数，可以是常数也可以是表达式,&#10;                    如果是输出结果集的参数，对应的参数表达式写成&quot;@@result&quot;&#10;    返回值：&#10;        一组数据的集合，由结果集的第一个字段决定数据类型，如果结果集是多列，只返回第一列&#10;        &#10;    示例：&#10;        例1：call2(&quot;demo&quot;,&quot;{call ResultSet (?,?,?)}&quot;,&quot;@@result&quot;,&quot;000001&quot;,A2)&#10;                表示对数据源demo执行存储过程ResultSet，第一个输出参数输出结果集，&#10;                第二、三个参数传入&quot;000001&quot;,A2作为参数值" type="单元格函数"/>
<F30 define="if()" desc="    函数说明：&#10;        根据布尔表达式的不同计算结果，返回不同的值。本函数从左到右计算，先出现的&#10;        布尔表达式先算，如果出现为true的表达式，则返回相应的结果，后面的不再计算。&#10;        如果没有一个布尔表达式为true,而且有缺省值表达式，则返回缺省值，否则返回null。&#10;        &#10;    语法：&#10;        if(boolExp1,valueExp1{,boolExp2,valueExp2 {,boolExp3,valueExp3 {, {defaultExp}}}})&#10;    &#10;    参数说明：&#10;        boolExp(n)        布尔表达式，如果结果为真，则返回对应的值表达式计算结果&#10;        valueExp(n)        值表达式，和布尔表达式一一对应&#10;        defaultExp        缺省值表达式，如果所有布尔表达式结果都为假，则返回本表达式计算结果&#10;        &#10;    返回值：&#10;        数据类型不定，由valueExp(n)的运算结果决定。&#10;        &#10;    示例：&#10;        例1：if(value()&gt;100,-65536,value()&lt;=100 and value()&gt;80,-16776961,-14336 )&#10;                表示当前格的值大于100时，返回-65536颜色值，当前格的值小于等于100且&#10;                大于80时，返回-16776961颜色值，否则返回-14336颜色值" type="单元格函数"/>
<F31 define="col()" desc="    函数说明：&#10;        取得当前单元格所在列的列号&#10;        &#10;    语法：&#10;        col({cellExp})&#10;        &#10;    参数说明：&#10;        cellExp        单元格表达式(不写表示当前单元格)&#10;    返回值：&#10;        整数&#10;        &#10;    举例：&#10;        在B列单元格中写入=col()，返回值为2，如果B列存在横向扩展格，则列号依次改变。" type="单元格函数"/>
<F32 define="count()" desc="    函数说明：&#10;        对可扩展单元格或集合表达式进行计数&#10;        &#10;    语法：&#10;        count(expression{,containNull})&#10;        &#10;    参数说明：&#10;        expression    需要被计数的单元格或表达式，一般为可扩展单元格或集合表达式&#10; containNull   缺省为true，表示对null元素也进行计数；false则相反&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：count(A1:B10,false) 以当前格为基格计算A1和B10之间总共有几个单元格，如果单元格的值为空则不进行计数&#10;&#10; 例2：count(A1[1]:B10[3])计算A1扩展出来的第一个格和B10扩展出来的第三个格之间总共有几个单元格&#10;        &#10;        例3：count(arg1) 其中arg1是参数组，统计arg1中有几个数据&#10;        &#10;        例4：count(B1{}) 表示求得当前主格扩展区域内所有扩展后的B1单元格的个数&#10;        &#10;        例5：count(B1{`0}{})    表示求得根坐标下所有扩展后的B1单元格的个数&#10;        " type="单元格函数"/>
<F33 define="disp()" desc="    函数说明：&#10;        取单元格的显示值&#10;        &#10;    语法：&#10;        disp( cell )&#10;        &#10;    参数说明：&#10;        cell        单元格&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：if(disp(A1) like &quot;中国*&quot;,true,false)&#10;                表示如果A1单元格的显示值含有中国的字样，返回true，否则返回false。" type="单元格函数"/>
<F34 define="ds()" desc="    函数说明：&#10;        按名称取得数据集对象，本函数用于动态改变表达式的数据集对象，用法很灵活，&#10;        但是性能较低，须慎用。&#10;        &#10;    语法：&#10;        ds( stringExp )&#10;        &#10;    参数说明：&#10;        stringExp    数据集的名称&#10;        &#10;    返回值：&#10;        数据集对象&#10;        &#10;    说明：&#10;        本函数的返回值是表达式的一个元素，不能作为单元格的数据值，必须经过二次运算。&#10;        &#10;    示例：&#10;        例1：ds(&quot;ds1&quot;).select(#0)    表示取出ds1数据集中的记录行号集合" type="单元格函数"/>
<F35 define="eval()" desc="    函数说明：&#10;        动态解析并计算表达式&#10;        &#10;    语法：&#10;        eval( StringExp )&#10;        eval( StringExp, SubRptExp )&#10;        eval( StringExp, DataSetExp )&#10;        &#10;    参数说明：&#10;        StringExp    待计算的表达式串&#10;        SubRptExp    嵌入式子报表对象，一般是含有子报表的单元格&#10;        DataSetExp    数据集对象，一般是ds函数&#10;    &#10;    返回值：&#10;        表达式的结果值，数据类型由表达式决定&#10;        &#10;    示例：&#10;        例1：eval( &quot;1+5&quot; )    返回6&#10;        &#10;        例2：eval(&quot;B2+10&quot;, A1)    其中A1为嵌入式子报表，表示计算A1子报表中的B2+10&#10;        &#10;        例3：eval(&quot;salary+100&quot;, ds(&quot;ds1&quot;))    表示计算数据集ds1中salary加100&#10;" type="单元格函数"/>
<F36 define="list()" desc="    函数说明：&#10;        获得一个枚举的数据集合&#10;        &#10;    语法：&#10;        list(valueExp1{,valueExp2{,valueExp3{,……}}})&#10;        &#10;    参数说明：&#10;        valueExp(n)        可以是常数或表达式，也可以是集合表达式&#10;        &#10;    返回值：&#10;        一组枚举数据的集合&#10;        &#10;    示例：&#10;        例1：list(1,3,5,7,9)&#10;        &#10;        例2：list(&quot;abc&quot;,&quot;def&quot;,&quot;ghj&quot;)&#10;        &#10;        例3：list(arg1,to(1,3),&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)    假设arg1是个整数组，其值为7,8,9，&#10;                那么该表达式的结果值为{7,8,9,1,2,3,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}" type="单元格函数"/>
<F37 define="map()" desc="    函数说明：&#10;        显示值对照表函数，从对照表中找出当前单元格对应值的显示值，没有则返回null&#10;        &#10;    语法：&#10;        map(valueListExp, displayListExp)&#10;        &#10;    参数说明：&#10;        valueListExp        真实值列表，可以是可扩展单元格或结果为集合列表的表达式&#10;        displayListExp    显示值列表，可以是可扩展单元格或结果为集合列表的表达式&#10;    &#10;        真实值列表和显示值列表一一对应&#10;        &#10;    返回值：&#10;        字符型，和当前格真实值对应的显示值&#10;    &#10;    示例：&#10;        例1：map(to(1,3),list(&quot;男&quot;,&quot;女&quot;,&quot;不定&quot;))&#10;        &#10;        例2：map(arg1,arg2)    其中arg1为1,2,3组成的参数组，arg2为&quot;男&quot;,&quot;女&quot;,&quot;不定&quot;组成的字符串组&#10;        &#10;        例3：map(list(1,2,3),list(&quot;男&quot;,&quot;女&quot;,&quot;不定&quot;))" type="单元格函数"/>
<F38 define="max()" desc="    函数说明：&#10;        对可扩展单元格或集合表达式求最大值&#10;        &#10;    语法：&#10;        max(expression)&#10; max(cellExp,exp)&#10;        &#10;    参数说明：&#10;        expression    需要求最大值的单元格或表达式，一般为可扩展单元格或集合表达式&#10;&#10; cellExp    单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp&#10; exp    表达式&#10;        &#10;    返回值：&#10;        数据类型不定，由expression的计算结果决定&#10;        &#10;    示例：&#10;        例1：max(A1:A10)    求出单元格A1至A10之间的最大值&#10;        &#10;        例2：max(arg1)        其中arg1是参数组，求出arg1中的最大值&#10;        &#10;        例3：max(B1{})        表示求得当前主格扩展区域内所有扩展后的B1单元格的最大值&#10;        &#10;        例4：max(B1{`0}{})    表示求得根坐标下所有扩展后的B1单元格的最大值&#10;&#10; 例5：max(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的最大值" type="单元格函数"/>
<F39 define="maxwidth()" desc="    函数说明：&#10;        求当前列中所有非合并格的显示串的最大字符长度&#10;        （注意：ASCII码大于255的字符长度为2)&#10;        &#10;    语法：&#10;        maxwidth()&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        一般用于列首格中，动态控制列宽&#10;        &#10;        例1：在列首格的单元格宽属性中写入8*maxwidth()，表示动态调整当前列宽为&#10;                单元格显示值最大字符长度*8个像素" type="单元格函数"/>
<F40 define="min()" desc="    函数说明：&#10;        对可扩展单元格或集合表达式求最小值&#10;        &#10;    语法：&#10;        min(expression)&#10; min(cellExp,exp)&#10;        &#10;    参数说明：&#10;        expression    需要求最小值的单元格或表达式，一般为可扩展单元格或集合表达式&#10;&#10; cellExp    单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp&#10; exp    表达式&#10;        &#10;    返回值：&#10;        数据类型不定，由expression的计算结果决定&#10;        &#10;    示例：&#10;        例1：min(A1:A10)    求出单元格A1至A10之间的最小值&#10;        &#10;        例2：min(arg1)        其中arg1是参数组，求出arg1中的最小值&#10;        &#10;        例3：min(B1{})        表示求得当前主格扩展区域内所有扩展后的B1单元格的最小值&#10;        &#10;        例4：min(B1{`0}{})    表示求得根坐标下所有扩展后的B1单元格的最小值&#10;&#10; 例5：min(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的最小值" type="单元格函数"/>
<F41 define="nvl()" desc="    函数说明：&#10;        根据第一个表达式的值是否为空，若为空则返回指定值&#10;        &#10;    语法：&#10;        nvl( valueExp1, valueExp2 )&#10;        &#10;    参数说明：&#10;        valueExp1    需要计算的表达式，其结果不为空时返回其值&#10;        valueExp2    需要计算的表达式，当valueExp1结果为空时返回此值&#10;        &#10;    返回值：&#10;        valueExp1或valueExp2的结果值&#10;        &#10;    示例：&#10;        例1：nvl(A1,&quot;&quot;)        表示当A1为空时，返回空串，否则返回A1&#10;&#10;        例2：nvl(value(),0)    表示当当前格为空时返回0，否则返回当前格的值" type="单元格函数"/>
<F42 define="plot()" desc="    函数说明:&#10;        计算一个值在一个完全划分中的位置&#10;        &#10;    语法：&#10;        plot( valueExp, ListExp{, eqExp}{, ascExp} )&#10;        &#10;    参数说明：&#10;        valueExp    返回值的表达式，值可以是字符串、数值、日期、时间等&#10;        ListExp        返回同valueExp数据类型相同的数组，要求其中元素从小到大排列&#10;        eqExp        返回布尔值的表达式，缺省为false，为false表示与ListExp元素比较时不包含等于&#10;        ascExp        返回布尔值的表达式，缺省为true，即表示ListExp中元素从小到大排列，否则为从大到小排列&#10;        &#10;    示例:&#10;        例1：plot( 0, list(0,10,100) )    返回1，第一个集合为&lt;0，不包含0，第二个集合为&gt;=0且&lt;10，&#10;                            所以0落在了第二个集合中，集合的编号从0开始起编，依次为0,1,2,3，所以结果为1&#10;        例2：plot( 0, list(0,10,100),true,true)    返回0&#10;        &#10;        例3：plot( 10, list(0,10,100), false )    返回2&#10;        &#10;        例4：plot(10,list(100,10,0),true,false)    返回1&#10;        &#10;    详细说明：&#10;        划分是指将一个集合划分成几个集合，如数组{0,10,100}在eqExp返回false的情况下&#10;        将整数集或实数集划分成4个集合，依次分别是&lt;0、&lt;10(此集合中元素必定&gt;=0)、&#10;        &lt;100(此集合中元素必定&gt;=10)及其它(即&gt;=100)；&#10;        在eqExp返回true的情况下将整数集或实数集划分成4个集合，分别是&lt;=0、&lt;=10(且&gt;0)、&#10;        &lt;=100(且&gt;10)及其它(即&gt;100);&#10;        对于数组{100,10,0}，eqExp为false时也划分成4个集合，分别为&gt;100,&gt;10(且&lt;=100),&#10;        &gt;0(且&lt;=10)及其它(即&lt;=0);&#10;        eqExp为true时则为&gt;=100,&gt;=10(且&lt;100),&gt;=0(且&lt;10)及其它(即&lt;0)    " type="单元格函数"/>
<F43 define="query()" desc="    函数说明：&#10;        执行sql语句，返回结果数据集合，只能返回单列数据，如果sql语句中有多个字段，&#10;        则返回第一个字段的结果值&#10;        &#10;    语法：&#10;        sql(sqlStatement{,arg1{,arg2{,arg3{,……}}}})&#10;        query(sqlStatement{,arg1{,arg2{,arg3{,……}}}})&#10;        &#10;    参数说明：    &#10;        sqlStatement        合法的sql语句&#10;        arg(n)            sql语句的参数，可以是常数也可以是表达式&#10;        &#10;    返回值：&#10;        一组数据的集合，数据类型由sql语句的第一个选出字段决定&#10;        &#10;    示例：&#10;        例1：query(&quot;select name from employee where sex=?&quot;,&quot;1&quot;)&#10;                表示从employee表中选出sex=&quot;1&quot;的记录，返回其name字段值&#10;    " type="单元格函数"/>
<F44 define="query2()" desc="    函数说明：&#10;        执行sql语句，返回结果数据集合，只能返回单列数据，如果sql语句中有多个字段，&#10;        则返回第一个字段的结果值。和query()函数的差别在于多了第一个参数，第一个参数&#10;        用于制定数据源名称，通过他可以实现不同单元格从不同数据源获取数据&#10;        &#10;    语法：&#10;        query2(dbname, sqlStatement{,arg1{,arg2{,arg3{,……}}}})&#10;        &#10;    参数说明：    &#10;        dbname                数据库逻辑名，为null表示缺省数据库&#10;        sqlStatement    合法的sql语句&#10;        arg(n)                sql语句的参数，可以是常数也可以是表达式&#10;        &#10;    返回值：&#10;        一组数据的集合，数据类型由sql语句的第一个选出字段决定&#10;        &#10;    示例：&#10;        例1：query2(&quot;demo&quot;,&quot;select name from employee where sex=?&quot;,&quot;1&quot;)&#10;                表示从demo数据库的employee表中选出sex=&quot;1&quot;的记录，返回其name字段值" type="单元格函数"/>
<F45 define="rgb()" desc="    函数说明：&#10;        将红、绿、蓝、透明度转换成颜色值&#10;        &#10;    语法：&#10;        rgb( redIntExp, greenIntExp, blueIntExp{, alphaIntExp} )&#10;        &#10;    参数说明：&#10;        redIntExp        0-255之间的整数表达式，表示红色&#10;        greenIntExp        0-255之间的整数表达式，表示绿色&#10;        blueIntExp        0-255之间的整数表达式，表示蓝色&#10;        alphaIntExp        0-255之间的整数表达式，表示透明度，&#10;                        0表示完全透明，255表示完全不透明，其他数值呈现不同程度的透明度&#10;                        缺省值为255&#10;                                    &#10;    返回值：&#10;        64位的长整数&#10;        &#10;    示例：&#10;        例1：rgb(123,123,123)        返回：-8684677&#10;        &#10;        例2：rgb(123,123,123,123)    返回：2071690107&#10;        &#10;        例3：rgb(123,123,123,255)    返回：-8684677&#10;        &#10;        例4：rgb(123,123,123,0)        返回：8092539" type="单元格函数"/>
<F46 define="row()" desc="    函数说明：&#10;        取得当前单元格所在行的行号&#10;        &#10;    语法：&#10;        row({cellExp})&#10;    参数说明:&#10;        cellExp        单元格表达式(不写表示当前单元格)&#10;    返回值：&#10;        整数&#10;        &#10;    举例：&#10;        在第三行单元格中写入=row()，返回值为3，如果第三行存在纵向扩展格，则行号依次改变。" type="单元格函数"/>
<F47 define="sort()" desc="    函数说明：&#10;        对数组进行排序&#10;        &#10;    语法：&#10;        sort( arrayExp{, boolExp} )&#10;        &#10;    参数说明:&#10;        arrayExp    数组表达式，譬如group，select，list等函数&#10;        boolExp        布尔表达式，true表示对数组按升序排列，否则降序    &#10;        &#10;    返回值：&#10;        数组，元素数据类型由参数1决定&#10;        &#10;    示例：&#10;        例1：sort({5,2,3,4},true)    返回值为{2,3,4,5}&#10;        &#10;        例2：sort({5,2,3,4})        返回值为{5,4,3,2}" type="单元格函数"/>
<F48 define="sum()" desc="    函数说明：&#10;        对可扩展单元格或集合表达式进行求和&#10;        &#10;    语法：&#10;        sum(expression)&#10; sum(cellExp,exp)&#10;        &#10;    参数说明：&#10;        expression        需要被求和的单元格或表达式，一般为可扩展单元格或集合表达式&#10;&#10; cellExp    单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp&#10; exp    表达式&#10;        &#10;    返回值：&#10;        实数或者字符型，由被汇总的单元格数据类型决定&#10;        &#10;    示例：&#10;        例1：sum(A1:A10)      求出单元格A1至A10的合计值，被统计单元格可以是数值型也可以是字符型&#10;        &#10;        例2：sum(arg1)        其中arg1是参数组，求出arg1中所有元素的合计值&#10;        &#10;        例3：sum(B1{})        表示求得当前主格扩展区域内所有扩展后的B1单元格的合计值&#10;        &#10;        例4：sum(B1[`0]{})    表示求得根坐标下所有扩展后的B1单元格的合计值&#10;&#10; 例5：sum(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的合计值" type="单元格函数"/>
<F49 define="valueat()" desc="    函数说明：&#10;        根据指定位置返回数组或者集合表达式中的某一个元素&#10;        &#10;    语法：&#10;        valueat(arrayexp，suffixExp)&#10;        &#10;    参数说明：&#10;        arrayexp    数组或者集合表达式&#10;        suffixExp    整数，用于指定返回集合中的第几个元素，以0开始计数&#10;        &#10;    返回值：&#10;        集合中的一个元素，数据类型由集合中的元素类型决定&#10;        &#10;    示例：&#10;        例1：valueat(to(5,8),2)        返回值为：7&#10;        &#10;        例2：valueat({&quot;a&quot;,&quot;b&quot;,&quot;c&quot;},0)    返回值为：&quot;a&quot;" type="单元格函数"/>
<F50 define="value()" desc="    函数说明：&#10;        取得当前单元格的值&#10;        &#10;    语法：&#10;        value()&#10;        &#10;    返回值：&#10;        当前单元格的值" type="单元格函数"/>
<F51 define="to()" desc="    函数说明：&#10;        生成一组连续的整数数据&#10;    语法：&#10;        to(startExp,endExp{,stepExp})&#10;    参数说明：&#10;        startExp    整数数据开始的表达式&#10;        endExp      整数数据结束的表达式 &#10;        stepExp   整数数据步长的表达式&#10;    函数示例：&#10;        to(1,5)=list(1,2,3,4,5)&#10;        to(1,5,2)=list(1,3,5)&#10;        to(-5,-10,-2)=list(-5,-7,-9)&#10;        to(-10,-8)=list(-10,-9,-8)" type="单元格函数"/>
<F52 define="cell()" desc="    函数说明：&#10;        在平面内取单元格，注意这里的单元格是运算后的单元格&#10;    语法：&#10;        cell({cellExp}{,rowOffsetExp{,colOffsetExp}})&#10;    参数说明：&#10;        cellExp             单元格表达式(不写表示当前单元格)&#10;        rowOffsetExp        整数的相对cellExp的行偏移量表达式&#10;        colOffsetExp        整数的相对cellExp的列偏移量表达式&#10;    函数示例：&#10;        cell(,1,-5) 取得当前单元格的下一行，左边5列的单元格&#10;        cell(C1) 取得与当前单元格的偏移为“当前单元格的源格与C1的偏移”的格&#10;        cell(D1,1,3) 取得D1的下一行，右3列的单元格&#10;" type="单元格函数"/>
<F53 define="inputValue()" desc="    函数说明：&#10;        取得表达式的填报值&#10;    语法：&#10;        inputValue(Exp)&#10;    参数说明：&#10;        Exp        表达式&#10;    返回值：&#10;        该表达式对应的填报值。&#10;    " type="单元格函数"/>
<F54 define="case()" desc="    函数说明：&#10;        根据表达式的不同计算结果，返回不同的值。本函数:从左到右计算，先出现的表达式先算，如果出现满足的表达式，&#10;        则返回相应的结果，后面的不再计算。如果没有一个表达式满足条件,而且有缺省值表达式，则返回缺省值，否则返回null。&#10;    语法：&#10;    case(Exp{,list(valueExp11,valueExp12,...),resultExp1{,list(valueExp21,valueExp22,...),resultExp2{,...{,defaultExp}}}})&#10;    参数说明：&#10;        Exp            判断用到的表达式&#10;        valueExp(n)        值表达式&#10;        resultExp(n)        返回结果表达式&#10;        defaultExp        缺省值表达式，如果所有表达式结果都不满足，则返回本表达式计算结果&#10;    函数示例:&#10;        case(&quot;上海&quot;,list(&quot;北京&quot;,&quot;天津&quot;),&quot;1&quot;,list(&quot;武汉&quot;,&quot;上海&quot;),&quot;2&quot;)    运算结果为：&quot;2&quot;&#10;        case(&quot;上海&quot;,list(&quot;北京&quot;,&quot;天津&quot;),&quot;1&quot;,list(&quot;武汉&quot;),&quot;2&quot;,&quot;3&quot;)    运算结果为：&quot;3&quot;&#10;        case(&quot;上海&quot;,list(&quot;北京&quot;,&quot;天津&quot;),&quot;1&quot;,list(&quot;武汉&quot;),&quot;2&quot;)        运算结果为：null" type="单元格函数"/>
<F55 define="seq" desc="    函数说明：&#10;        取得指定扩展单元格的同源号，即扩展格扩展后，将此单元格的同源格按行（列）号从小到大排序后&#10;此单元格所在的序号。&#10;        &#10;    语法：&#10;        seq({cellExp})&#10;    参数说明:&#10;        cellExp        单元格表达式，必须返回扩展格&#10;    返回值：&#10;        整数&#10;        &#10;    举例：&#10;        假设A1是扩展格，B1的主格为A1，在B1单元格中写入=seq(A1)，则扩展后B1的值将依次从1变到A1扩展&#10;出来的单元格的数目。" type="单元格函数"/>
<F56 define="minc" desc="    函数说明：&#10;        返回输入的单元格（格集）中值最小的单元格组成的List，如果存在多个单元格的&#10;值相等且最小，则这些格都会被返回。&#10;        &#10;    语法：&#10; minc(cellExp1{,cellExp2{,......}})&#10;        &#10;    参数说明：&#10;        cellExp1    单元格(格集)或单元格(格集)表达式&#10;        &#10;    返回值：&#10;        单元格List&#10;        &#10;    示例：&#10;        例1：minc(A1,A2,A3,A4)    求出单元格A1至A4之间值最小的单元格组成的列表&#10;        &#10;        例2：minc(A1{},A2)         求A1扩展出来的所有单元格和A2中值最小的单元格组成的列表&#10;        " type="单元格函数"/>
<F57 define="maxc" desc="    函数说明：&#10;        返回输入的单元格（格集）中值最大的单元格组成的List，如果存在多个单元格的&#10;值相等且最大，则这些格都会被返回。&#10;        &#10;    语法：&#10; maxc(cellExp1{,cellExp2{,......}})&#10;        &#10;    参数说明：&#10;        cellExp1    单元格(格集)或单元格(格集)表达式&#10;        &#10;    返回值：&#10;        单元格List&#10;        &#10;    示例：&#10;        例1：maxc(A1,A2,A3,A4)    求出单元格A1至A4之间值最大的单元格组成的列表&#10;        &#10;        例2：maxc(A1{},A2)         求A1扩展出来的所有单元格和A2中值最大的单元格组成的列表&#10;" type="单元格函数"/>
<F58 define="list2" desc="    函数说明：&#10;        本函数与list函数唯一的区别是，本函数对内部的list不展开&#10;        &#10;    语法：&#10;        list2(valueExp1{,valueExp2{,valueExp3{,……}}})&#10;        &#10;    参数说明：&#10;        valueExp(n)        可以是常数或表达式，也可以是集合表达式&#10;        &#10;    返回值：&#10;        一组枚举数据的集合&#10;        &#10;    示例：&#10;        例1：list2(1,3,5,7,9)&#10;        &#10;        例2：list2(&quot;abc&quot;,&quot;def&quot;,&quot;ghj&quot;)&#10;        &#10;        例3：list2(arg1,to(1,3),&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)    假设arg1是个整数组，其值为7,8,9，&#10;                那么该表达式的结果值为{list(7,8,9),list(1,2,3),&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}" type="单元格函数"/>
<F59 define="avg2" desc="    函数说明：&#10;        以指定单元格集的元素为基格计算表达式求平均值&#10;        &#10;    语法：&#10;        avg2(cellExp,exp{,containNull})&#10;&#10;    参数说明：&#10;&#10; cellExp  单元格或单元格集合，以cellExp里的单元格为当前格计算表达式exp&#10; exp  表达式&#10; containNull 是否对null元素进行计数&#10;        &#10;    返回值：&#10;        实数&#10;        &#10;    示例：&#10;        &#10; 例1：avg2(A1[`0]{},B1+C1) 计算分别与每个A1相对应的B1、C1的和的平均值" type="单元格函数"/>
<F60 define="throwe" desc="    函数说明：&#10;        抛出一个ReportError异常&#10;        &#10;    语法：&#10;        throwe({msg})&#10;        &#10;    参数说明：&#10;        msg        异常信息字符串&#10;    返回值：&#10;        &#10;        &#10;    举例：&#10;        throwe(&quot;单元格值有误&quot;) 抛出一个异常，显示信息为“单元格值有误”" type="单元格函数"/>
<F61 define="subList" desc="    函数说明：&#10;        获得一个集合的子集合&#10;        &#10;    语法：&#10;        subList(srcList,startPos,count)&#10;        &#10;    参数说明：&#10;        srcList  源集合表达式&#10; startPos 起始索引，从0开始计数&#10; count  返回的元素数目&#10;        &#10;    返回值：&#10;        集合的子集合&#10;        &#10;    示例：&#10;        例1：subList( list(1,3,5,7,9), 1, 2 ) 结果为{ 3, 5 }&#10;" type="单元格函数"/>
<F62 define="age()" desc="    函数说明：&#10;        计算从参数定义的时间到当前间隔的整年数&#10;        &#10;    语法：&#10;      age(dateExp{,typeExp})&#10;        age(stringExp,formatExp{,typeExp})&#10;        &#10;    参数说明：&#10;        dateExp            日期型表达式，运算的结果是日期型(Date)&#10;        stringExp        表达式，其结果必须为日期或中国日期时间格式的字符串&#10;        formatExp   格式化表达式比如&quot;yyyyMMdd&quot;,&quot;yyyy-MM-dd&quot;等&#10;        typeExp     计算精确的最小单位 1为日，2为月，3为年，缺省为日 &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        假设今天为2007.1.1&#10;        例1：age(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))        结果为26&#10;        &#10;        例3：age(&quot;19800227&quot;,&quot;yyyyMMdd&quot;,3) 结果为27    &#10;        " type="时间日期函数"/>
<F63 define="day()" desc="    函数说明：&#10;        从日期型数据中获得该日在本月中是几号&#10;        &#10;    语法：&#10;        day(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        表达式，其结果必须为日期或中国日期时间格式的字符串&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：day(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：27&#10;        &#10;        例2：day(dateTime(12345))            返回：1&#10;        &#10;        例3：day(dateTime(&quot;2006-01-15 10:20:30&quot;))    返回：15&#10;        " type="时间日期函数"/>
<F64 define="dayName()" desc="    函数说明：&#10;        从日期型数据中获得该日的星期名称&#10;        &#10;    语法：&#10;        dayName(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：dayName(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：星期三&#10;        &#10;        例2：dayName(dateTime(12345))            返回：星期四&#10;        &#10;        例3：dayName(dateTime(&quot;2006-01-15 10:20:30&quot;))    返回：星期日&#10;        &#10;        例4：dayName(&quot;12:14:34&quot;)            返回：星期四&#10;        &#10;        例5：dayName(&quot;1972-11-08&quot;)            返回：星期三&#10;        &#10;        例6：dayName(&quot;1972-11-08 10:20:30&quot;)        返回：星期三" type="时间日期函数"/>
<F65 define="dayNo()" desc="    函数说明：&#10;        从日期型数据中，获得该日位于一个星期中的第几天，星期天返回1，星期一返回2，依此类推&#10;&#10;    语法：&#10;        dayNo(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;&#10;    返回值：&#10;        整数&#10;&#10;    示例：&#10;        例1：dayNo(dateTime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：4&#10;        &#10;        例2：dayNo(dateTime(&quot;2006-01-15 10:20:30&quot;))    返回：1&#10;        &#10;        例3：dayNo(&quot;1972-11-08 10:20:30&quot;)        返回：4" type="时间日期函数"/>
<F66 define="daysAfter()" desc="    函数说明：&#10;        计算两个日期型数据相差几天&#10;        &#10;    语法：&#10;        daysAfter(dateExp1, dateExp2)&#10;        &#10;    参数说明：&#10;        dateExp1        日期或标准日期格式的字符串，&#10;                        如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;                                &#10;        dateExp2        日期或标准日期格式的字符串，&#10;                        如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;                                &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：daysAfter(dateTime(&quot;1983-12-15 10:20:30&quot;),datetime2(&quot;1982年12月30日&quot;,&quot;yyyy年MM月dd日&quot;))&#10;                返回：-350&#10;        &#10;        例2：daysAfter(&quot;1983-12-15 10:20:30&quot;,&quot;1982-12-30&quot;)    返回：-350&#10;" type="时间日期函数"/>
<F67 define="daysInMonth()" desc="    函数说明：&#10;        获得指定日期所在月的天数&#10;        &#10;    语法：&#10;        daysInMonth(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;        &#10;    返回值：&#10;        整数&#10;    &#10;    示例：&#10;        例1：daysInMonth(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：29&#10;        &#10;        例2：daysInMonth(&quot;1972-11-08 10:20:30&quot;)            返回：30&#10;        &#10;        例3：daysInMonth(dateTime(&quot;2006-01-15 10:20:30&quot;))    返回：31" type="时间日期函数"/>
<F68 define="daysInYear()" desc="    函数说明：&#10;        获得指定日期所在年或者指定年份的天数&#10;        &#10;    语法：&#10;        daysInYear(dateExp)&#10;        daysInYear(year)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;                            &#10;        year        返回整数的表达式&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：daysInYear(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：366&#10;        &#10;        例2：daysInYear(dateTime(&quot;2006-01-15 10:20:30&quot;))    返回：365&#10;        &#10;        例3：daysInYear(&quot;1972-11-08 10:20:30&quot;)            返回：366&#10;        &#10;        例4：daysInYear(2006)                    返回：365" type="时间日期函数"/>
<F69 define="hour()" desc="    函数说明：&#10;        从日期时间型数据中，获得当前时间位于一天中的第几个时辰&#10;        &#10;    语法：&#10;        hour(datetimeExp)&#10;        &#10;    参数说明：&#10;        datetimeExp    日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：hour(&quot;1983-12-15&quot;)                返回：0&#10;        &#10;        例2：hour(&quot;1983-12-15 10:30:25&quot;)        返回：10&#10;        &#10;        例3：hour(dateTime(&quot;2006-01-15 13:20:30&quot;))    返回：13&#10;        " type="时间日期函数"/>
<F70 define="lastday()" desc="    函数说明：&#10;        获得指定日期的上一天&#10;        &#10;    语法：&#10;        lastday(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;                            &#10;    返回值：&#10;        日期时间型&#10;        &#10;    示例：&#10;        例1：lastday(&quot;1972-11-08 10:20:30&quot;)        返回：1972-11-07 10:20:30&#10;        &#10;        例2：lastday(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-02-26 00:00:00&#10;        &#10;        例3：lastday(dateTime(&quot;2006-01-15 10:20:30&quot;))    返回：2006-01-14 10:20:30" type="时间日期函数"/>
<F71 define="lastmonth()" desc="    函数说明：&#10;        取得指定日期在上月的同日，若无同一日，则返回上月月末&#10;        &#10;    语法：&#10;        lastmonth( dateExp )&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;        &#10;    返回值：&#10;        日期时间型&#10;        &#10;    示例：&#10;        例1：lastmonth(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-01-27 00:00:00&#10;        &#10;        例2：lastmonth(&quot;1972-11-08 10:20:30&quot;)            返回：1972-10-08 10:20:30&#10;        &#10;        例3：lastmonth(dateTime(&quot;2006-01-15 10:20:30&quot;))        返回：2005-12-15 10:20:30&#10;        " type="时间日期函数"/>
<F72 define="lastyear()" desc="    函数说明：&#10;        取得指定日期在去年的同月同日，若无同月同日，则返回去年同月最后一天&#10;        &#10;    语法：&#10;        lastyear( dateExp )&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss，yyyy-MM-dd，HH:mm:ss&#10;                            &#10;    返回值：&#10;        日期时间型&#10;        &#10;    示例：&#10;        例1：lastyear(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1979-02-27 00:00:00&#10;        &#10;        例2：lastyear(&quot;1972-11-08 10:20:30&quot;)        返回：1971-11-08 10:20:30&#10;        &#10;        例3：lastyear(dateTime(&quot;2006-01-15 10:20:30&quot;))    返回：2005-01-15 10:20:30&#10;        " type="时间日期函数"/>
<F73 define="minute()" desc="    函数说明：&#10;        从日期时间型数据中，获得分钟的信息&#10;        &#10;    语法：&#10;        minute(datetimeExp)&#10;        &#10;    参数说明：&#10;        datetimeExp    日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：minute(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：0&#10;        &#10;        例2：minute(&quot;1972-11-08 10:20:30&quot;)        返回：20&#10;        &#10;        例3：minute(dateTime(&quot;2006-01-15 13:20:30&quot;))    返回：20" type="时间日期函数"/>
<F74 define="month()" desc="    函数说明：&#10;        取得指定日期所在的月份&#10;        &#10;    语法：&#10;        month(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：month(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：2&#10;        &#10;        例2：month(&quot;1972-11-08 10:20:30&quot;)        返回：11&#10;        &#10;        例3：month(dateTime(&quot;2006-01-15 13:20:30&quot;))    返回：1&#10;    " type="时间日期函数"/>
<F75 define="monthbegin()" desc="    函数说明：&#10;        取得指定日期所在月的月首&#10;        &#10;    语法：&#10;        monthbegin( dateExp )&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;                            &#10;    返回值：&#10;        日期时间型&#10;        &#10;    示例：&#10;        例1：monthbegin(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-02-01 00:00:00&#10;        &#10;        例2：monthbegin(&quot;1972-11-08 10:20:30&quot;)            返回：1972-11-01 10:20:30&#10;        &#10;        例3：monthbegin(dateTime(&quot;2006-01-15 13:20:30&quot;))    返回：2006-01-01 13:20:30" type="时间日期函数"/>
<F76 define="monthend()" desc="    函数说明：&#10;        取得指定日期所在月的月末&#10;        &#10;    语法：&#10;        monthend( dateExp )&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;                            &#10;    返回值：&#10;        日期时间型&#10;        &#10;    示例：&#10;        例1：monthend(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-02-29 00:00:00&#10;        &#10;        例2：monthend(&quot;1972-11-08 10:20:30&quot;)        返回：1972-11-30 10:20:30&#10;        &#10;        例3：monthend(dateTime(&quot;2006-01-15 13:20:30&quot;))    返回：2006-01-31 13:20:30" type="时间日期函数"/>
<F77 define="now()" desc="    函数说明：&#10;        获得系统此刻的日期时间&#10;        &#10;    语法：&#10;        now()&#10;        &#10;    返回值：&#10;        日期时间" type="时间日期函数"/>
<F78 define="quaterbegin()" desc="    函数说明：&#10;        取得指定日期所在季度的首日&#10;        &#10;    语法：&#10;        quaterbegin( dateExp )&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        日期时间&#10;        &#10;    示例：&#10;        例1：quaterbegin(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-01-01 00:00:00&#10;        &#10;        例2：quaterbegin(&quot;1972-11-08 10:20:30&quot;)            返回：1972-10-01 10:20:30&#10;        &#10;        例3：quaterbegin(dateTime(&quot;2006-01-15 13:20:30&quot;))    返回：2006-01-01 13:20:30" type="时间日期函数"/>
<F79 define="quaterend()" desc="    函数说明：&#10;        取得指定日期所在季度的末日&#10;        &#10;    语法：&#10;        quaterend( dateExp )&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        日期时间&#10;        &#10;    示例：&#10;        例1：quaterend(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-03-31 00:00:00&#10;        &#10;        例2：quaterend(&quot;1972-11-08 10:20:30&quot;)            返回：1972-12-31 10:20:30&#10;        &#10;        例3：quaterend(dateTime(&quot;2006-01-15 13:20:30&quot;))        返回：2006-03-31 13:20:30" type="时间日期函数"/>
<F80 define="relDate()" desc="    函数说明：&#10;        从给定的日期型数据中，算出相差n天后的新的日期数据&#10;        &#10;    语法：&#10;        relDate(dateExp, nExp)&#10;        &#10;    参数说明：&#10;        dateExp        给定的起始日期表达式，其结果必须为日期或标准日期格式的字符串，&#10;                            如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;                            &#10;        nExp        整数表达式，需要求得nExp天后的新日期&#10;        &#10;    返回值：&#10;        日期时间&#10;        &#10;    示例：&#10;        例1：relDate(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;),5)    返回：1980-03-03 00:00:00&#10;        &#10;        例2：relDate(&quot;1972-11-08 10:20:30&quot;,-10)            返回：1972-10-29 10:20:30&#10;        &#10;        例3：relDate(dateTime(&quot;2006-01-15 13:20:30&quot;),15)    返回：2006-01-30 13:20:30" type="时间日期函数"/>
<F81 define="relTime()" desc="    函数说明：&#10;        从给定的日期时间型数据中，算出相差n秒后的新的日期时间数据&#10;        &#10;    语法：&#10;        relTime(datetimeExp, nExp)&#10;        &#10;    参数说明：&#10;        datetimeExp        给定的起始日期表达式，其结果必须为日期或标准日期格式的字符串，&#10;                                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;                                    &#10;        nExp            整数表达式，需要求得nExp秒后的新日期时间&#10;        &#10;    返回值：&#10;        日期时间&#10;        &#10;    示例：&#10;        例1：relTime(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;),5)    返回：1980-02-27 00:00:05&#10;        &#10;        例2：relTime(&quot;1972-11-08 10:20:30&quot;,-10)            返回：1972-11-08 10:20:20&#10;        &#10;        例3：relTime(dateTime(&quot;2006-01-15 13:20:30&quot;),15)    返回：2006-01-15 13:20:45    " type="时间日期函数"/>
<F82 define="second()" desc="    函数说明：&#10;        从日期时间型数据中，获得秒信息&#10;        &#10;    语法：&#10;        second(datetimeExp)&#10;        &#10;    参数说明：&#10;        datetimeExp        日期或标准日期格式的字符串，&#10;                        如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：second(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：0&#10;        &#10;        例2：second(&quot;1972-11-08 10:20:30&quot;)        返回：30&#10;        &#10;        例3：second(dateTime(&quot;2006-01-15 13:20:45&quot;))    返回：45" type="时间日期函数"/>
<F83 define="secondsAfter()" desc="    函数说明：&#10;        计算两个日期时间型数据相差几秒&#10;        &#10;    语法：&#10;        secondsAfter(datetimeExp1,datetimeExp2)&#10;        &#10;    参数说明：&#10;        datetimeExp1        日期或标准日期格式的字符串，&#10;                        如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        datetimeExp2        日期或标准日期格式的字符串，&#10;                        如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：secondsAfter(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;),dateTime(&quot;1980-02-27 00:00:45&quot;))    返回：45&#10;        &#10;        例2：secondsAfter(&quot;1972-11-08 10:20:30&quot;,&quot;1972-11-08 10:30:50&quot;)                返回：620&#10;" type="时间日期函数"/>
<F84 define="time()" desc="    函数说明：&#10;        将字符串转换成时间型数据&#10;        &#10;    语法：&#10;        time(stringExp)&#10;        &#10;    参数说明：&#10;        stringExp        HH:mm:ss格式的字符串&#10;        &#10;    返回值：&#10;        时间型数据&#10;        &#10;    示例：&#10;        " type="时间日期函数"/>
<F85 define="weekbegin()" desc="    函数说明：&#10;        获得指定日期所在星期的星期天，这里认定星期天为一周的开始&#10;        &#10;    语法：&#10;        weekbegin(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                    如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        日期时间型&#10;        &#10;    示例：&#10;        例1：weekbegin(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-02-24 00:00:00&#10;        &#10;        例2：weekbegin(&quot;1972-11-08 10:20:30&quot;)            返回：1972-11-05 10:20:30&#10;        &#10;        例3：weekbegin(dateTime(&quot;2006-01-15 13:20:45&quot;))        返回：2006-01-15 13:20:45" type="时间日期函数"/>
<F86 define="weekend()" desc="    函数说明：&#10;        获得指定日期所在星期的星期六，这里认定星期六为一周的结束&#10;        &#10;    语法：&#10;        weekend(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                            如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;                            &#10;    返回值：&#10;        日期时间型&#10;        &#10;    示例：&#10;        例1：weekend(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980-03-01 00:00:00&#10;        &#10;        例2：weekend(&quot;1972-11-08 10:20:30&quot;)        返回：1972-11-11 10:20:30&#10;        &#10;        例3：weekend(dateTime(&quot;2006-01-15 13:20:45&quot;))    返回：2006-01-21 13:20:45" type="时间日期函数"/>
<F87 define="year()" desc="    函数说明：&#10;        从日期型数据中获得年信息&#10;        &#10;    语法：&#10;        year(dateExp)&#10;        &#10;    参数说明：&#10;        dateExp        日期或标准日期格式的字符串，&#10;                            如：yyyy-MM-dd HH:mm:ss、yyyy-MM-dd 或 HH:mm:ss&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：year(datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;))    返回：1980&#10;        &#10;        例2：year(&quot;1972-11-08 10:20:30&quot;)        返回：1972&#10;        &#10;        例3：year(dateTime(&quot;2006-01-15 13:20:45&quot;))    返回：2006" type="时间日期函数"/>
<F88 define="abs()" desc="    函数说明：&#10;        计算参数的绝对值&#10;        &#10;    语法：&#10;        abs(numberExp)&#10;        &#10;    参数说明：&#10;        numberExp        待计算绝对值的数据&#10;        &#10;    返回值：&#10;        数值型&#10;        &#10;    示例：&#10;        例1：abs(-3245.54)    返回：3245.54&#10;        &#10;        例2：abs(-987)        返回：987" type="数学函数"/>
<F89 define="ceil()" desc="    函数说明：&#10;        对数据在指定位置上进行截取，剩余部分只要有值就进位&#10;        相关的函数有:&#10;            floor:对数据在指定位置上进行截取，剩余部分只要有值全舍去&#10;            round:对数据在指定位置上进行截取，剩余部分四舍五入&#10;            &#10;    语法：&#10;        ceil(numberExp, {nExp})&#10;        &#10;    参数说明：&#10;        numberExp        需要进行截取的数据&#10;        nExp            整数，用于指定需要进行截取的位置，&#10;                        &gt;0：从小数点往右位移nExp个位数，&#10;                        &lt;0：从小数点往左移nExp个位数&#10;                        =0：表示当前小数点的位置&#10;                                &#10;    返回值：&#10;        数值型&#10;        &#10;    示例：&#10;        例1：=ceil(3450001.004,0)    返回：3450002.0&#10;        例2：=ceil(3450001.004,-1)    返回：3450010.0&#10;        例3：=ceil(3450001.004,-2)    返回：3450100.0&#10;        例4：=ceil(3450001.004,1)    返回：3450001.1&#10;        例5：=ceil(3450001.004,2)    返回：3450001.01" type="数学函数"/>
<F90 define="cos()" desc="    函数说明：&#10;        计算参数的余弦值，其中参数以弧度为单位&#10;        相关的函数有sin()    计算参数的正弦值&#10;                tan()    计算参数的正切值&#10;        &#10;    语法：&#10;        cos(numberExp)&#10;        &#10;    参数说明：&#10;        numberExp        待计算余弦值的弧度数&#10;        &#10;    返回值：&#10;        double型&#10;        &#10;    示例：&#10;        例1：cos(pi())        返回：-1&#10;        &#10;        例2：cos(pi(2))        返回：1" type="数学函数"/>
<F91 define="exp()" desc="    函数说明：&#10;        计算e的n次幂&#10;        &#10;    语法：&#10;        exp(nExp)&#10;        &#10;    参数说明：&#10;        nExp    指定次幂数&#10;        &#10;    返回值：&#10;        数值型&#10;        &#10;    示例：&#10;        例1：exp(4.3)        返回：73.69979369959579" type="数学函数"/>
<F92 define="fact()" desc="    函数说明：&#10;        计算参数的阶乘&#10;        &#10;    语法：&#10;        fact(nExp)&#10;        &#10;    参数说明：&#10;        nExp        待计算阶乘的数据&#10;        &#10;    返回值：&#10;        长整数（64位）&#10;        &#10;    示例：&#10;        例1：fact(10)        返回：3628800" type="数学函数"/>
<F93 define="floor()" desc="    函数说明：&#10;        对数据在指定位置上进行截取，剩余部分只要有值全舍去&#10;        相关的函数有:&#10;            ceil:对数据在指定位置上进行截取，剩余部分只要有值就进位&#10;            round:对数据在指定位置上进行截取，剩余部分四舍五入&#10;            &#10;    语法：&#10;        floor(numberExp, {nExp})&#10;        &#10;    参数说明：&#10;        numberExp        需要进行截取的数据&#10;        nExp            整数，用于指定需要进行截取的位置，&#10;                        &gt;0：从小数点往右位移nExp个位数，&#10;                        &lt;0：从小数点往左移nExp个位数&#10;                        =0：表示当前小数点的位置&#10;                                &#10;    返回值：&#10;        数值型&#10;        &#10;    示例：&#10;        例1：=floor(3451231.234,0)    返回：3451231.0&#10;        例2：=floor(3451231.234,-1)    返回：3451230.0&#10;        例3：=floor(3451231.234,-2)    返回：3451200.0&#10;        例4：=floor(3451231.234,1)    返回：3451231.2&#10;        例5：=floor(3451231.234,2)    返回：3451231.23" type="数学函数"/>
<F94 define="log()" desc="    函数说明：&#10;        计算参数的自然对数&#10;        相关函数：log10()    计算以10为底的对数&#10;        &#10;    语法：&#10;        log(numberExp)&#10;        &#10;    参数说明：&#10;        numberExp        需要计算自然对数的数据&#10;        &#10;    返回值：&#10;        数值型&#10;        &#10;    示例：&#10;        例1：log(54)        返回：3.9889840465642745" type="数学函数"/>
<F95 define="log10()" desc="    函数说明：&#10;        计算以10为底的对数&#10;        相关函数：log()        计算自然对数&#10;        &#10;    语法：&#10;        log10(numberExp)&#10;        &#10;    参数说明：&#10;        numberExp        需要计算以10为底的对数的数据&#10;        &#10;    返回值：&#10;        数值型&#10;    &#10;    示例：&#10;        例1：log10(54)        返回：1.7323937598229684" type="数学函数"/>
<F96 define="pi()" desc="    函数说明：&#10;        计算圆周率及其倍数&#10;        &#10;    语法：&#10;        pi(numberExp)&#10;        &#10;    参数说明：&#10;        numberExp        倍数，此参数省略，则返回圆周率&#10;        &#10;    返回值：&#10;        圆周率及其倍数&#10;        &#10;    示例：&#10;        例1：pi()        返回：3.141592653589793&#10;        &#10;        例2：pi(2)        返回：6.283185307179586" type="数学函数"/>
<F97 define="pow()" desc="    函数说明：&#10;        计算x的n次幂&#10;        &#10;    语法：&#10;        pow(xExp, nExp)&#10;        &#10;    参数说明：&#10;        xExp        底数&#10;        nExp        次幂&#10;        &#10;    返回值：&#10;        数值型&#10;        &#10;    示例：&#10;        例1：pow(2,4)        返回：16.0" type="数学函数"/>
<F98 define="rand()" desc="    函数说明：&#10;        取得0-1.0之间的一个随机数&#10;        &#10;    语法：&#10;        rand()&#10;        &#10;    参数说明：&#10;        无&#10;        &#10;    返回值：&#10;        [0, 1.0)之间的一个随机数，浮点型&#10;        &#10;    示例：&#10;        例1：rand()        获得[0, 1.0)之间的一个随机数&#10;        &#10;        例2：rand()*100        获得[0, 100)之间的一个随机浮点数&#10;        &#10;        例3：integer(rand()*100)    获得[0, 100)之间的一个随机整数" type="数学函数"/>
<F99 define="round()" desc="    函数说明：&#10;        对数据在指定位置上进行截取，剩余部分四舍五入&#10;        相关的函数有:&#10;            ceil:对数据在指定位置上进行截取，剩余部分只要有值就进位&#10;            floor:对数据在指定位置上进行截取，剩余部分只要有值全舍去&#10;            &#10;    语法：&#10;        round(numberExp, {nExp})&#10;        &#10;    参数说明：&#10;        numberExp        需要进行截取的数据&#10;        nExp            整数，用于指定需要进行截取的位置，&#10;                        &gt;0：从小数点往右位移nExp个位数，&#10;                        &lt;0：从小数点往左移nExp个位数&#10;                        =0：表示当前小数点的位置&#10;&#10;    返回值：&#10;        数值型&#10;        &#10;    示例：&#10;        例1：=round(3451251.274,0)    返回：3451251.0&#10;        例2：=round(3451251.274,-1)    返回：3451250.0&#10;        例3：=round(3451251.274,-2)    返回：3451300.0&#10;        例4：=round(3451251.274,1)    返回：3451251.3&#10;        例5：=round(3451251.274,2)    返回：3451251.27" type="数学函数"/>
<F100 define="sign()" desc="    函数说明：&#10;        确定参数是正数还是负数还是0，当正数时返回1，负数时返回-1，0时返回0&#10;        &#10;    语法：&#10;        sign(number)&#10;        &#10;    参数说明：&#10;        number        需要判断正负的数据&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：sign(-10)        返回：-1&#10;        &#10;        例2：sign(30)        返回：1&#10;        &#10;        例3：sign(0)        返回：0" type="数学函数"/>
<F101 define="sin()" desc="    函数说明：&#10;        计算参数的正弦值，其中参数以弧度为单位&#10;        相关的函数有cos()    计算参数的余弦值&#10;                tan()    计算参数的正切值&#10;    语法：&#10;        sin(number)&#10;        &#10;    参数说明：&#10;        number        需要计算正弦值的弧度数&#10;        &#10;    返回值：&#10;        double型&#10;        &#10;    示例：&#10;        例1：sin(pi())        返回：1.2246467991473532E-16&#10;        &#10;        例2：sin(pi(2))        返回：-2.4492935982947064E-16&#10;        &#10;        例3：sin(pi()/2)    返回：1.0" type="数学函数"/>
<F102 define="sqrt()" desc="    函数说明：&#10;        计算平方根&#10;        &#10;    语法：&#10;        sqrt(number)&#10;&#10;    参数说明：&#10;        number            需要计算平方根的数据&#10;&#10;    返回值：&#10;        数值型&#10;&#10;    示例：&#10;        例1：sqrt(100)        返回：10.0&#10;&#10;        例2：sqrt(99)        返回：9.9498743710662" type="数学函数"/>
<F103 define="tan()" desc="    函数说明：&#10;        计算参数的正切值，其中参数以弧度为单位&#10;        相关的函数有sin()    计算参数的正弦值&#10;                cos()    计算参数的余弦值&#10;    语法：&#10;        tan(number)&#10;        &#10;    参数说明：&#10;        需要计算正切值的弧度数&#10;        &#10;    返回值：&#10;        double型&#10;        &#10;    示例：&#10;        例1：tan(pi()/2)    返回：1.633123935319537E16&#10;        &#10;        例2：tan(pi(2))        返回：-2.4492935982947064E-16" type="数学函数"/>
<F104 define="asin()" desc="函数说明：&#10;        计算参数的反正弦值，其中参数为-1~1的实数&#10;        相关的函数有acos()    计算参数的反余弦值&#10;                    atan()    计算参数的反正切值&#10;    语法：&#10;        asin(number)&#10;        &#10;    参数说明：&#10;        number        需要计算反正弦值的实数&#10;        &#10;    返回值：&#10;        圆周率及其倍数&#10;        &#10;    示例：&#10;        例1：asin(-1)        返回：-1.5707963267948966&#10;        &#10;        例2：asin(sin(pi()/2))   返回：1.5707963267948966&#10;        &#10;        例3：asin(sin(0))    返回：0.0" type="数学函数"/>
<F105 define="acos()" desc="函数说明：&#10;        计算参数的反余弦值，其中参数为-1~1的实数&#10;        相关的函数有asin()    计算参数的反正弦值&#10;                    atan()    计算参数的反正切值&#10;    语法：&#10;        acos(number)&#10;        &#10;    参数说明：&#10;        number        需要计算反余弦值的实数&#10;        &#10;    返回值：&#10;        圆周率及其倍数&#10;        &#10;    示例：&#10;        例1：acos(-1)        返回：3.141592653589793&#10;        &#10;        例2：acos(cos(pi()/2))   返回：1.5707963267948966&#10;        &#10;        例3：acos(cos(0))    返回：0.0" type="数学函数"/>
<F106 define="atan()" desc="函数说明：&#10;        计算参数的反正切值，其中参数为实数&#10;        相关的函数有asin()    计算参数的反正弦值&#10;                    acos()    计算参数的反余弦值&#10;    语法：&#10;        atan(number)&#10;        &#10;    参数说明：&#10;        number        需要计算反正切值的实数&#10;        &#10;    返回值：&#10;        圆周率及其倍数&#10;        &#10;    示例：&#10;        例1：atan(1)            返回：0.7853981633974483&#10;        &#10;        例2：atan(tan(pi()/2))   返回：1.5707963267948966&#10;        &#10;        例3：atan(tan(0))     返回：0.0" type="数学函数"/>
<F107 define="asc()" desc="    函数说明：&#10;        取字符串指定位置的字符的unicode值，如果是ascii字符则返回ascii码&#10;        (一般来说，英文字符及其扩展字符都是ascii字符，中文、日文、韩文等&#10;        亚洲字符都是unicode字符，ascii字符为8位，unicode字符为16位（其中有3位用于标志字符类型）)&#10;        &#10;        相关函数：char()        根据给定的unicode编码或者ascii码取得其对应的字符&#10;        &#10;    语法：&#10;        asc( string{, nPos} )&#10;        &#10;    参数说明：&#10;        string        给定的字符串&#10;        nPos            整数表达式，缺省为0&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：=asc(&quot;def&quot;)    返回：100    (ascii)&#10;        &#10;        例2：=asc(&quot;def&quot;,1)    返回：101    (ascii)&#10;        &#10;        例3：=asc(&quot;中国&quot;)    返回：20013    (unicode)&#10;        &#10;        例4：=asc(&quot;中国&quot;,1)    返回：22269    (unicode)&#10;    " type="字符串函数"/>
<F108 define="char()" desc="    函数说明：&#10;        根据给定的unicode编码或者ascii码取得其对应的字符&#10;        (一般来说，英文字符及其扩展字符都是ascii字符，中文、日文、韩文等&#10;        亚洲字符都是unicode字符，ascii字符为8位，unicode字符为16位（其中有3位用于标志字符类型）)&#10;        &#10;        相关函数：asc()        取字符串指定位置的字符的unicode值，如果是ascii字符则返回ascii码&#10;        &#10;    语法：&#10;        char( int )&#10;        &#10;    参数说明：&#10;        int            整数表达式，unicode编码或者ascii编码&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：=char(22269)    返回：'国'&#10;        &#10;        例1：=char(101)        返回：'e'" type="字符串函数"/>
<F109 define="chn()" desc="    函数说明：&#10;        将一个整数转化成汉字大写&#10;        &#10;    语法：&#10;        chn( intExp{, abbrivateExp{, uppercaseExp }} )&#10;        &#10;    参数说明：&#10;        intExp            整数表达式&#10;        abbrivateExp    为true时采用亿万千百十的写法，&#10;                                    为false时采用一二三四五六七的写法，缺省为false&#10;        uppercaseExp    为false时采用零一二三四五六七八九十百千，&#10;                                    为true时采用壹贰叁肆伍陆柒捌玖拾佰仟,缺省为false&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：chn(1234567,true)        返回：&quot;一百二十三万四千五百六十七&quot;&#10;        &#10;        例2：chn(1234567)        返回：&quot;一二三四五六七&quot;&#10;        &#10;        例3：chn(1234567,true,true)    返回：&quot;壹佰贰拾叁万肆仟伍佰陆拾柒&quot;&#10;        &#10;        例4：chn(1234567,,false)    返回：&quot;一二三四五六七&quot;" type="字符串函数"/>
<F110 define="fill()" desc="    函数说明：&#10;        获得n个s拼成的字符串&#10;        相关函数：space()    产生一个空串&#10;        &#10;    语法：&#10;        fill(s, n)&#10;        &#10;    参数说明：&#10;        s        用于拼成新串的源串&#10;        n        新串中包含源串的个数&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：fill(&quot;1 &quot;,10)    返回：&quot;1 1 1 1 1 1 1 1 1 1 &quot;&#10;        &#10;        例2：fill(&quot;a b&quot;,10)    返回：&quot;a ba ba ba ba ba ba ba ba ba b&quot;" type="字符串函数"/>
<F111 define="hexstring()" desc="    函数说明：&#10;        将数据或者byte数组转换为十六进制字符（数据当做无符号数据处理）&#10;        &#10;    语法：&#10;        hexstring(dataExp{,spaceExp})&#10;        &#10;    参数说明：&#10;        dataExp        数据或者byte数组表达式&#10;        spaceExp    布尔型，数据之间是否用空格隔开，true表示要，false表示不要&#10;        &#10;    返回值：&#10;        字符型，十六进制字符&#10;        &#10;    示例：&#10;        例1：hexstring(12345678,true)    返回：&quot;BC 61 4E&quot;&#10;        例2：hexstring(12345678,false)    返回：&quot;BC614E&quot;&#10;        例3：hexstring(12345678)    返回：&quot;BC614E&quot;" type="字符串函数"/>
<F112 define="left()" desc="    函数说明：&#10;        获得源字符串左边的子串&#10;        相关函数：mid()            获得源字符串中间的子串&#10;              right()        获得源字符串右边的子串&#10;&#10;    语法：&#10;        left(string, n)&#10;        &#10;    参数说明：&#10;        string        获得子串的源串&#10;        n        获得子串的长度&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：left(&quot;abcdefg&quot;,3)        返回：&quot;abc&quot;" type="字符串函数"/>
<F113 define="lrim()" desc="    函数说明：&#10;        去掉字符串左边的空格&#10;        相关函数：rrim()        去掉字符串右边的空格&#10;              trim()        去掉字符串左右的空串&#10;        &#10;    语法：&#10;        ltrim(s)&#10;        &#10;    参数说明：&#10;        s        准备去掉左边空格的源串&#10;        &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;        例1：ltrim(&quot;  abc  def  &quot;)    返回：&quot;abc  def  &quot;&#10;        &#10;        例2：ltrim(&quot;def abc  &quot;)        返回：&quot;def abc  &quot;" type="字符串函数"/>
<F114 define="len()" desc="    函数说明：&#10;        计算字符串的长度&#10;        &#10;    语法：&#10;        len(s)&#10;        &#10;    参数说明：&#10;        s        待计算长度的字符串&#10;        &#10;    返回值：&#10;        整数&#10;        &#10;    示例：&#10;        例1：len(&quot;adfg&quot;)    返回：4&#10;        &#10;        例2：len(&quot;  abd  &quot;)    返回：7" type="字符串函数"/>
<F115 define="like()" desc="    函数说明：&#10;        判断字符串是否匹配格式串(*匹配0个或多个字符，?匹配单个字符)&#10;        &#10;    语法：&#10;        like( stringExp, formatExp{, ignoreCase} )&#10;        &#10;    参数说明：&#10;        stringExp            字符串的表达式&#10;        formatExp            格式串的表达式&#10;        ignoreCase            布尔值的表达式，缺省为false，表示匹配时大小写敏感，否则忽略大小写&#10;    &#10;    返回值：&#10;        布尔型&#10;        &#10;    示例：&#10;        例1：like( &quot;abc123&quot;, &quot;abc*&quot; )        返回：true&#10;        &#10;        例2：like( &quot;abc123&quot;, &quot;abc1?3&quot; )        返回：true&#10;        &#10;        例3：like( &quot;abc123&quot;, &quot;abc*34&quot; )        返回：false&#10;        &#10;        例4：like( &quot;abc123&quot;, &quot;ABC*&quot; )        返回：false&#10;        &#10;        例5：like( &quot;abc123&quot;, &quot;ABC*&quot;, true )    返回：true&#10;        " type="字符串函数"/>
<F116 define="lower()" desc="    函数说明：&#10;        将字符串转成小写&#10;        相关函数：upper()        把字符串转成大写&#10;              word_cap()        将字符串每一个单词的首字母大写&#10;        &#10;    语法：&#10;        lower(s)&#10;        &#10;    参数说明：&#10;        s        待转成小写的字符串&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：lower(&quot;ABCdef&quot;)    返回：&quot;abcdef&quot;&#10;        &#10;        例2：lower(&quot;defABC&quot;)    返回：&quot;defabc&quot;" type="字符串函数"/>
<F117 define="mid()" desc="    函数说明：&#10;        返回字符串的子串&#10;        相关函数：left()        获得源字符串左边的子串&#10;              right()        获得源字符串右边的子串&#10;        &#10;    语法：&#10;        mid(s, start{, end})&#10;        &#10;    参数说明：&#10;        s        待获得子串的源串&#10;        start        获得子串的起始位置&#10;        end        获得子串的结束位置，缺省为源串的长度&#10;        &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;        例1：mid(&quot;abcde&quot;,0)    返回：abcde&#10;        &#10;        例2：mid(&quot;abcde&quot;,1,2)    返回：b&#10;        &#10;        例3：mid(&quot;abcde&quot;,3)    返回：de" type="字符串函数"/>
<F118 define="pos()" desc="    函数说明：&#10;        查找母串中子串的位置&#10;        &#10;    语法：&#10;        pos(s1, s2{, begin})&#10;        &#10;    参数说明：&#10;        s1        待查找子串的母串&#10;        s2        被查找的子串&#10;        begin        查找的起始位置，缺省为0&#10;        &#10;    返回值:&#10;        整数&#10;    &#10;    示例:&#10;        例1：pos(&quot;abcdef&quot;,&quot;def&quot;)    返回：3&#10;        &#10;        例2：pos(&quot;abcdefdef&quot;,&quot;def&quot;,5)    返回：6&#10;" type="字符串函数"/>
<F119 define="right()" desc="    函数说明：&#10;        获得字符串右边的子串&#10;        相关函数：left()        获得源字符串左边的子串&#10;              mid()            获得源字符串中间的子串&#10;&#10;    语法：&#10;        right(s, n)&#10;        &#10;    参数说明：&#10;        s        待获得子串的源串&#10;        n        获得子串的长度&#10;    &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;        例1：right(&quot;abced&quot;,2)  返回：&quot;ed&quot;" type="字符串函数"/>
<F120 define="rtrim()" desc="    函数说明：&#10;        去掉字符串右边的空格&#10;        相关函数：ltrim() 去掉字符串左边的空格&#10;                            trim()            去掉字符串左右的空串&#10;        &#10;    语法：&#10;        rtrim(s)&#10;        &#10;    参数说明：&#10;        s        准备去掉右边空格的源串&#10;        &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;        例1：rtrim(&quot;  abc  def  &quot;)    返回：&quot;  abc  def&quot;&#10;        &#10;        例2：rtrim(&quot;def abc  &quot;)        返回：&quot;def abc&quot;" type="字符串函数"/>
<F121 define="rmb()" desc="    函数说明：&#10;        将浮点数（只支持小数点后两位）转换人民币大写格式&#10;        &#10;    语法：&#10;        rmb( numberExp )&#10;        &#10;    参数说明：&#10;        numberExp        数据值表达式&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：rmb(123456.89)    返回：&quot;壹拾贰万叁仟肆佰伍拾陆圆捌角玖分&quot;" type="字符串函数"/>
<F122 define="rplc()" desc="    函数说明：&#10;        将字符串src的子字符串a变为字符串b，&#10;        &#10;    语法：&#10;        rplc( srcExp,subStrA,rplcStrB{,boolExp})&#10;        &#10;    参数说明：&#10;        srcExp            源字符串&#10;        subStrA            源字符串的子字符串&#10;        rplcStrB        将要替换成的字符串&#10;        boolExp            引号里的字符是否需要变换，缺省为true&#10;        &#10;    返回值：&#10;        替换后的字符串&#10;        &#10;    示例：&#10;        例1：rplc(&quot;abc'abc'def&quot;,&quot;a&quot;,&quot;中国&quot;)        返回：&quot;中国bc'中国bc'def&quot;&#10;        &#10;        例2：rplc(&quot;abc'abc'def&quot;,&quot;a&quot;,&quot;中国&quot;,false)    返回：&quot;中国bc'abc'def&quot;&#10;        &#10;        例3：rplc(&quot;abc'abc'def&quot;,&quot;a&quot;,&quot;中国&quot;,true)    返回：&quot;中国bc'中国bc'def&quot;" type="字符串函数"/>
<F123 define="space()" desc="    函数说明：&#10;        产生一个空串&#10;        相关函数：fill()    获得n个s拼成的字符串&#10;        &#10;    语法：&#10;        space(n)&#10;        &#10;    参数说明：&#10;        n        生成空串的长度&#10;        &#10;    返回值：&#10;        字符串型，获得n个空格拼成的字符串&#10;        &#10;    示例：&#10;        例1：space(5)    返回：&quot;     &quot;" type="字符串函数"/>
<F124 define="split()" desc="    函数说明：&#10;        将字符串按分割符分割成多个子串&#10;        &#10;    语法：&#10;        split( srcExp,sepExp{,boolExp})&#10;        &#10;    参数说明：&#10;        srcExp        待分割的字符串表达式&#10;        sepExp        分隔符表达式&#10;        boolExp        bool型，是否解析引号、括号里的分隔符，&#10;                    为true时解析，为false时不解析，缺省为false&#10;        &#10;    返回值：&#10;        分割后的字符串列表&#10;        &#10;    示例：&#10;        例1：=split(&quot;ab;cd;ef;tg;tt&quot;,&quot;;&quot;)        返回数组：[&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;,&quot;tg&quot;,&quot;tt&quot;]&#10;        &#10;        例2：=split(&quot;ab;c'd;e'f;tg;tt&quot;,&quot;;&quot;,false)    返回数组：[&quot;ab&quot;,&quot;c'd;e'f&quot;,&quot;tg&quot;,&quot;tt&quot;]　不解析引号里的分隔符&#10;        &#10;        例3：=split(&quot;ab;c[d;e]f;tg;tt&quot;,&quot;;&quot;,false)    返回数组：[&quot;ab&quot;,&quot;c[d;e]f&quot;,&quot;tg&quot;,&quot;tt&quot;]　不解析括号里的分隔符&#10;        &#10;        例4：=split(&quot;ab;c'd;e'f;tg;tt&quot;,&quot;;&quot;,true)    返回数组：[&quot;ab&quot;,&quot;c'd&quot;,&quot;e'f&quot;,&quot;tg&quot;,&quot;tt&quot;]　解析引号里的分隔符&#10;        &#10;        例5：=split(&quot;ab;c[d;e]f;tg;tt&quot;,&quot;;&quot;,true)    返回数组：[&quot;ab&quot;,&quot;c[d&quot;,&quot;e]f&quot;,&quot;tg&quot;,&quot;tt&quot;]　解析括号里的分隔符" type="字符串函数"/>
<F125 define="trim()" desc="    函数说明：&#10;        去掉字符串左右的空串&#10;        相关函数：right_trim()        去掉字符串右边的空格&#10;              left_trim()        去掉字符串左边的空格&#10;        &#10;    语法：&#10;        trim(s)&#10;        &#10;    参数说明：&#10;        s        待去掉左右空串的源串&#10;        &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;        例1：trim(&quot;  abc  &quot;)    返回:&quot;abc&quot;&#10;        &#10;        例2：trim(&quot;  a  bc  &quot;)    返回:&quot;a  bc&quot;" type="字符串函数"/>
<F126 define="upper()" desc="    函数说明：&#10;        把字符串转成大写&#10;        相关函数：lower()        把字符串转成小写&#10;              word_cap()        将字符串每一个单词的首字母大写&#10;    语法：&#10;        upper(s)&#10;        &#10;    参数说明：&#10;        s        待转成大写的源串&#10;        &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;        例1：upper(&quot;ABCdef&quot;)    返回:&quot;ABCDEF&quot;&#10;        &#10;        例2：upper(&quot;abcDEF&quot;)    返回:&quot;ABCDEF&quot;" type="字符串函数"/>
<F127 define="wordCap()" desc="    函数说明：&#10;        将字符串每一个单词的首字母大写&#10;        相关函数：upper()                把字符串转成大写&#10;              lower()                把字符串转成小写&#10;                            &#10;    语法：&#10;        wordCap(s)&#10;        &#10;    参数说明：&#10;        s        需要将单词首字母大写的源串&#10;        &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;        例1：wordCap(&quot;I love my country&quot;)    返回：&quot;I Love My Country&quot;&#10;        &#10;        例2：wordCap(&quot;she is beautiful&quot;)    返回：&quot;She Is Beautiful&quot;" type="字符串函数"/>
<F128 define="rmQuote()" desc="    函数说明：&#10;        删除表达式里的引号，包括单引号和双引号&#10;        &#10;    语法：&#10;        rmQuote(exp)&#10;        &#10;    参数说明：&#10;        exp            表达式&#10;        &#10;    返回值：&#10;        字符串" type="字符串函数"/>
<F129 define="link" desc="    函数说明：&#10;        生成一个url&#10;&#10;    语法：&#10;        link(serviceName{,jspArgNames,jspArgValues{,reportArgNames,reportArgValues}})&#10;        &#10;    参数说明：&#10;        serviceName 服务名称&#10; jspArgNames jsp参数名称数组，可为空，元素类型需为字符串型&#10; jspArgValues jsp参数值数组，需与jspArgNames元素个数相同&#10; reportArgNames 报表参数名称数组，可为空，元素类型需为字符串型&#10; reportArgValues 报表参数值数组，需与reportArgNames元素个数相同&#10;        &#10;    返回值：&#10;        字符串型&#10;        &#10;    示例：&#10;&#10;        例1：link(&quot;ServiceName&quot;,list(&quot;jspArg1&quot;,&quot;jspArg2&quot;), list(&quot;value1&quot;,2),&quot;count&quot;,5)&#10;  返回ServiceName?jasArg1=value1&amp;jspArg2=2&amp;params=count=5" type="字符串函数"/>
<F130 define="bigint()" desc="    函数说明：&#10;        将字符型整数转换成大整数或对数值型数据取整返回大整数&#10;        该数据类型精度高，支持大于64位的整数，但是运算速度慢&#10;        如果小于64位的整数，建议用long(支持64位，即最大为2的64次方)或者int(支持32位，即最大为2的32次方)&#10;        &#10;    语法：&#10;        bigint(stringExp)&#10;        bigint(numberExp)&#10;        &#10;    参数说明：&#10;        stringExp        需要转换的整数串&#10;        numberExp        需要取整的数值型数据，超过64位要用decimal类型，缺省为double(64位)&#10;        &#10;    返回值：&#10;        大整数BigInteger&#10;        &#10;    示例：&#10;        例1：bigint(&quot;123456789012345678901234567890&quot;)        返回：123456789012345678901234567890&#10;        &#10;        例2：bigint(decimal(&quot;1234567890123456789012345.67890&quot;))    返回：1234567890123456789012345&#10;        &#10;        例3：bigint(12345.6789012345678901234567890)        返回：12345&#10;        " type="数据类型转换"/>
<F131 define="date()" desc="    函数说明：&#10;        将字符串转换成日期型数据&#10;        &#10;    语法：&#10;        date(stringExp)&#10;        &#10;    参数说明：&#10;        stringExp        字符串表达式，其结果必须返回合法日期格式的字符串&#10;                        要求格式为yyyy-MM-dd，不含时间，如果含了时间，时间部分不转换&#10;                                    &#10;    返回值：&#10;        日期时间型，但是时间部分都为00:00:00&#10;        &#10;    示例：&#10;        例1：date(&quot;1982-08-09&quot;)            返回日期：1982-08-09 00:00:00&#10;        &#10;        例2：date(&quot;1982-08-09 10:20:30&quot;)    返回日期：1982-08-09 00:00:00&#10;        " type="数据类型转换"/>
<F132 define="dateTime()" desc="    函数说明：&#10;        将字符串或长整数转换成日期时间&#10;        &#10;    语法：&#10;        dateTime(string)&#10;        dateTime(long)&#10;        &#10;    参数说明：&#10;        string        格式为yyyy-MM-dd HH:mm:ss的字符串&#10;        long        以微秒计的长整数&#10;        &#10;    返回值：&#10;        日期时间&#10;    &#10;    示例：&#10;        例1：dateTime(&quot;2006-01-01 10:20:30&quot;)        返回：2006-01-01 10:20:30&#10;            &#10;        例2：dateTime(&quot;2006-01-01 10:20:30:111&quot;)    返回：2006-01-01 10:20:30&#10;        &#10;        例3：dateTime(12345)                返回：1970-01-01 08:00:12" type="数据类型转换"/>
<F133 define="datetime2()" desc="    函数说明：&#10;        将各种格式的日期字符串转换成日期时间型数据，转换时可以指定字符串的当前格式&#10;        &#10;    语法：&#10;        datetime2(string, format)&#10;        &#10;    参数说明：&#10;        string        各种格式的日期字符串&#10;        format        用于说明参数1的格式串&#10;        &#10;    返回值：&#10;        日期时间型数据&#10;        &#10;    示例：&#10;        例1：datetime2(&quot;12/28/1972&quot;,&quot;MM/dd/yyyy&quot;)            返回：1972-12-28 00:00:00&#10;        &#10;        例2：datetime2(&quot;12/28/1972 10:23:43&quot;,&quot;MM/dd/yyyy hh:mm:ss&quot;)    返回：1972-12-28 10:23:43&#10;        &#10;        例3：datetime2(&quot;19800227&quot;,&quot;yyyyMMdd&quot;)                返回：1980-02-27 00:00:00&#10;        &#10;        例4：datetime2(&quot;1982年12月30日&quot;,&quot;yyyy年MM月dd日&quot;)        返回：1982-12-30 00:00:00" type="数据类型转换"/>
<F134 define="decimal()" desc="    函数说明：&#10;        将字符串或数字型数值转换成大浮点数&#10;        &#10;    语法：&#10;        deicmal(stringExp)&#10;        decimal(numberExp)&#10;        &#10;    参数说明：&#10;        stringExp        给定数字串,可含小数点&#10;        numberExp        数值，只能少于等于64位，超过64位就要用字符串&#10;        &#10;    返回值：&#10;        大浮点数BigDecimal&#10;        &#10;    示例：&#10;        例1：decimal(&quot;123456789012345678901234567890&quot;)    返回：123456789012345678901234567890&#10;        &#10;        例2：decimal(1234567890123456)            返回：1234567890123456（BigDecimal类型）&#10;" type="数据类型转换"/>
<F135 define="double()" desc="    函数说明：&#10;        将字符串或数字转换成64位的双精度浮点数&#10;        &#10;    语法：&#10;        double( string )&#10;        double( number )&#10;        &#10;    参数说明：&#10;        string        需要转换的字符串表达式&#10;        number        数字&#10;        &#10;    返回值：&#10;        64位的双精度浮点数&#10;        &#10;    示例：&#10;        例1：double(&quot;1234567&quot;)    返回：1234567.0&#10;        &#10;        例2：double(1234567)    返回：1234567.0" type="数据类型转换"/>
<F136 define="float()" desc="    函数说明：&#10;        将单精度浮点数、双精度浮点数、字符串转换为32位的单精度浮点型&#10;        &#10;    语法：&#10;        float(string)&#10;        float(number)&#10;        &#10;    参数说明：&#10;        string        需要转换的单精度浮点数、双精度浮点数表达式&#10;        number        数字&#10;        &#10;    返回值：&#10;        32位的单精度浮点数&#10;        &#10;    示例：&#10;        例1：float(&quot;1234567&quot;)    返回：1234567.0&#10;        &#10;        例2：float(1234567.0)    返回：1234567.0&#10;        &#10;        例3：float(1234567)    表达式提示错误，因为1234567不是浮点数" type="数据类型转换"/>
<F137 define="int()" desc="    函数说明：&#10;        将字符串或数字转换成整数&#10;        &#10;    语法：&#10;        int( string )&#10;        int( number )&#10;        &#10;    参数说明：&#10;        string        需要转换的字符串表达式&#10;        number        数字，如果带有小数位，转换后小数位被截掉&#10;        &#10;    返回值：&#10;        32位整数&#10;        &#10;    示例:&#10;        例1：int( &quot;100&quot; )    返回：100&#10;        &#10;        例2：int( 100.1 )    返回：100&#10;        &#10;        例3：int(100.9999)    返回：100" type="数据类型转换"/>
<F138 define="long()" desc="    函数说明：&#10;        将字符串或数字转换成64位长整数&#10;        &#10;    语法：&#10;        long( string )&#10;        long( number )&#10;        &#10;    参数说明：&#10;        string        需要转换的字符串表达式&#10;        number        数字,如果带有小数，则小数部分被截掉&#10;        &#10;    返回值：&#10;        64位长整数&#10;        &#10;    示例：&#10;        例1：long(&quot;1234567&quot;)    返回：1234567&#10;        &#10;        例2：long(1234567.789)    返回：1234567" type="数据类型转换"/>
<F139 define="number()" desc="    函数说明：&#10;        将字符串转换成相应的32位整数、64位整数、或者64位符点数&#10;        &#10;    语法：&#10;        number( string )&#10;        &#10;    参数说明：&#10;        string        需要转换的字符串表达式&#10;        &#10;    返回值：&#10;        32位整数、64位整数、或者64位符点数&#10;        &#10;    示例：&#10;        例1：number(&quot;123&quot;)        返回：123&#10;        &#10;        例2：number(&quot;1234567890&quot;)    返回：1234567890&#10;        &#10;        例3：number(&quot;12345.7891&quot;)    返回：12345.7891" type="数据类型转换"/>
<F140 define="str()" desc="    函数说明：&#10;        将对象转换成字符型，转换过程中可以进行格式化&#10;        &#10;    语法：&#10;        str(expression{, format})&#10;        &#10;    参数说明：&#10;        expression        需要转换成字符串的常数对象或表达式&#10;        format            转换过程中进行格式化的格式串&#10;        &#10;    返回值：&#10;        字符型&#10;        &#10;    示例：&#10;        例1：str(123)        返回值：&quot;123&quot;&#10;        &#10;        例2：str(arg1,&quot;yyyy年MM月dd日&quot;)，其中arg1为日期型参数，值为1972-09-09，&#10;                    返回值：&quot;1972年09月09日&quot;&#10;        &#10;        例3：str(3456.9876,&quot;￥#,##0.00&quot;)    返回值：&quot;￥3,456.99&quot;" type="数据类型转换"/>
<F141 define="isdate()" desc="    函数说明：&#10;        判定字符串是否具有转换成日期的合法格式&#10;        &#10;    语法：&#10;        isdate( string )&#10;        &#10;    参数说明：&#10;        string            字符串表达式&#10;        &#10;    返回值：&#10;        布尔型&#10;        &#10;    示例：&#10;        例1：isdate(&quot;2006-10-10&quot;)        返回：true&#10;        &#10;        例2：isdate(&quot;2006-10-10 10:20:30&quot;)    返回：true&#10;        &#10;        例3：isdate(&quot;20061010&quot;)            返回：false&#10;        &#10;        例4：isdate(&quot;10:20:30&quot;)            返回：false" type="数据类型判断"/>
<F142 define="isnumber()" desc="    函数说明：&#10;        判定字符串是否具有转换成数值的合法格式&#10;        &#10;    语法：&#10;        isnumber( string )&#10;        &#10;    参数说明：&#10;        string            字符串表达式&#10;        &#10;    返回值：&#10;        布尔型&#10;        &#10;    示例：&#10;        例1：isnumber(&quot;abc&quot;)    返回：false&#10;        &#10;        例2：isnumber(&quot;1234&quot;)    返回：true" type="数据类型判断"/>
<F143 define="istime()" desc="    函数说明：&#10;        判定字符串是否具有转换成时间的合法格式&#10;        &#10;    语法：&#10;        istime( string )&#10;        &#10;    参数说明：&#10;        string            字符串表达式&#10;        &#10;    返回值：&#10;        布尔型&#10;&#10;    示例：&#10;        例1：istime(&quot;2006-10-10&quot;)        返回：false&#10;        &#10;        例2：istime(&quot;2006-10-10 10:20:30&quot;)    返回：false&#10;        &#10;        例3：istime(&quot;20061010&quot;)            返回：false&#10;        &#10;        例4：istime(&quot;10:20:30&quot;)            返回：true" type="数据类型判断"/>
<F144 define="isEmpty()" desc="    函数说明：&#10;        判定表达式运算的结果列表中的元素个数是否为0,或者运算的结果是否为null&#10;        &#10;    语法：&#10;        isEmpty(exp)&#10;        &#10;    参数说明：&#10;        exp            表达式&#10;        &#10;    返回值：&#10;        布尔型&#10;" type="数据类型判断"/>
<F145 define="pno()" desc="    函数说明：&#10;        取得当前页的页码，注意，本函数只是在分页后才有效&#10;    语法：&#10;        pno({booleanExp})&#10;    参数说明：&#10;        booleanExp        表达式&#10;    返回值：&#10;        当前页的页码。&#10;    函数示例：&#10;        pno()       返回前页在总的页表中的页码&#10;        pno(true)   返回前页在纵向分页的页表中的页码&#10;        pno(false)  返回前页在横向分页的页表中的页码" type="分页后运算函数"/>
<F146 define="pcount()" desc="    函数说明：&#10;        取得总的页数，注意，本函数只是在分页后才有效&#10;    语法：&#10;        pcount({booleanExp})&#10;    参数说明：&#10;        booleanExp        表达式&#10;    返回值：&#10;        页数。&#10;    函数示例：&#10;        pcount()       返回总的页表中的页数&#10;        pcount(true)   返回纵向分页的页表中的页数&#10;        pcount(false)  返回横向分页的页表中的页数" type="分页后运算函数"/>
<F147 define="pcsum()" desc="    函数说明：&#10;        计算分页后的当前页中所有的单元格(cellExp)的和，注意，本函数只是在分页后才有效&#10;    语法：&#10;        pcsum({cellExp})&#10;    参数说明：&#10;        cellExp        表达式&#10;    返回值：&#10;        当前页中所有的单元格(cellExp)的和&#10;    函数示例：&#10;        pcsum(A2{条件})      返回当前页中所有的A2格之和" type="分页后运算函数"/>
<F148 define="pccount()" desc="    函数说明：&#10;        计算分页后的当前页中所有的单元格(cellExp)的个数，注意，本函数只是在分页后才有效&#10;    语法：&#10;        pccount({cellExp})&#10;    参数说明：&#10;        cellExp        表达式&#10;    返回值：&#10;        当前页中所有的单元格(cellExp)的个数&#10;    函数示例：&#10;        pccount(A2{条件})      返回当前页中所有的A2格的个数" type="分页后运算函数"/>
<F149 define="graph()" desc="    函数说明：&#10;        计算生成统计图&#10;    语法：&#10;        graph({graphTypeExp})&#10;    参数说明：&#10;        graphTypeExp        统计图类型表达式，本参数运算的结果为整型。分别对应以下值：&#10;                                1：区域图&#10;                                 2：条形图&#10;                                 3：三维条形图&#10;                                 4：三维簇状条形图&#10;                                 5：堆积条形图&#10;                                 6：三维堆积条形图&#10;                                7：柱形图&#10;                                8：三维柱形图&#10;                                 9：三维簇状柱形图&#10;                                 10：堆积柱形图&#10;                                 11：三维堆积柱形图&#10;                                 12：折线图&#10;                                 13：饼型图&#10;                                 14：散列图&#10;                                 15：三维区域图&#10;                                 16：三维折线图&#10;                                 17：三维饼型图&#10;                                 18：时序状态图&#10;                                 19：时间走势图&#10;                                 20：双轴折线图&#10;                                 21：双轴柱线图&#10;                                22：雷达图&#10;                                 23：甘特图&#10;                                 24：仪表盘&#10;                                 25：里程碑&#10;    返回值：&#10;        统计图&#10;    函数示例：&#10;        graph(2)      计算条形图" type="统计图运算函数"/>
</funcs>
